import{_ as a,c as s,o as i,a5 as l}from"./chunks/framework.B33oykO0.js";const t="/assets/cd7b0c9b764c424ca2635a86c1795fd7-1652690458526.BxkujAlf.png",v=JSON.parse('{"title":"入门程序","description":"","frontmatter":{},"headers":[],"relativePath":"docs/code/java/primary/5-入门程序.md","filePath":"docs/code/java/primary/5-入门程序.md","lastUpdated":null}'),e={name:"docs/code/java/primary/5-入门程序.md"},p=l(`<h1 id="入门程序" tabindex="-1">入门程序 <a class="header-anchor" href="#入门程序" aria-label="Permalink to &quot;入门程序&quot;">​</a></h1><blockquote><p>Hello World 中文意思是『你好，世界』。因为 《The C Programming Language》 中使用它做为第一个演示程序，所以后来的程序员在学习编程或进行设备调试时延续了这一习惯。</p><p>还有一种说法是，在比C语言还要久远的B语言在贝尔实验室出生的时候，工程师们就做了这样一件事，通过程序的方式向这个世界打招呼，也表示我们已经进入了通过代码与世界沟通的大门。这句输出语句也被记录在了贝尔实验室的工作测试日志中。</p></blockquote><h2 id="书写与运行第一个程序" tabindex="-1">书写与运行第一个程序 <a class="header-anchor" href="#书写与运行第一个程序" aria-label="Permalink to &quot;书写与运行第一个程序&quot;">​</a></h2><ol><li><p>使用文本编辑工具创建文件，命名为<code>Index.java</code>，文件名将在未来自拟，但扩展名必须要写成<code>java</code>。文件内编辑如下内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Java的程序严格控制大小写，并且空格也将作为程序的一部分，空格可以多，但不能缺少。</p></blockquote><p>上文的代码就是Java的源代码，存储Java源代码的文件就叫源文件。</p></li><li><p>接下来进行程序的编译，真正要运行Java程序需要进行以下的步骤：</p><p><code>Java源代码 -&gt; 通过编译器编译java文件 -&gt; class字节码文件 -&gt; 通过解释器运行class文件 -&gt; 得到Java源代码所控制的结果</code></p><p>所以第一步就是要将Java源代码通过编译器转换成字节码文件，如果正确的配置了Java的Path变量并且测试了<code>javac</code>在控制台中的运行结果，那么就可以在源文件所在的文件夹打开控制台，输入以下的内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Index.java</span></span></code></pre></div><p>语句执行后理应不会出现任何内容，直接结束当前控制台然后进入新的指令候选行，这是正常的，如果出现了内容，通常就是源文件中出现了语法错误，需要重新排查。</p><blockquote><p><strong>有关代码中出现中文，从而导致编译报错的问题解决方案：</strong></p><p>出现此问题的原因是控制台所采用的系统编码，在对java文件进行解析的时候，出现了编码异常情况，从而导致编译过程中，系统错误的认为代码中出现了错误的语句导致的。</p><p>在一定情况下，中文是会导致编码错误的，所以要参考编辑器对文本的编码进行设置，设置成为UTF-8编码即可。</p></blockquote></li><li><p>编译成功后，在Java文件的旁边就会出现class文件，这也是即将要运行的文件。此文件是源码编译后的产物，如果对源码进行修改，此文件则要通过重新编译来更新。</p></li><li><p>接着还是在这个控制台中，就要进行class文件的解释运行，借助java指令来进行解释：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Index</span></span></code></pre></div><p>执行以上指令后，控制台中应当出现<code>helloworld!</code>字样后结束控制台，则表示此程序是运行成功的。</p></li></ol><blockquote><p>需要注意的是，在进行编译的时候，要写上.java扩展名，但是在解释的时候是不用的。</p></blockquote><h2 id="第一个程序的解释" tabindex="-1">第一个程序的解释 <a class="header-anchor" href="#第一个程序的解释" aria-label="Permalink to &quot;第一个程序的解释&quot;">​</a></h2><p>Java的组成部分就这么几种，由层级由大到小则是：类、方法/函数、语句，类是Java源文件最基础的结构，使用class单词引导，方法则是一串语句的集合，方法中的语句将从上到下逐条的运行；语句是java程序最小的单元，表示一个动作，并且要用分号结尾。</p><p><img src="`+t+'" alt="cd7b0c9b764c424ca2635a86c1795fd7-1652690458526"></p><h3 id="类的声明" tabindex="-1">类的声明 <a class="header-anchor" href="#类的声明" aria-label="Permalink to &quot;类的声明&quot;">​</a></h3><p>类是Java文件的根基，所有的代码都要写到类中（除了包相关定义）。如果class单词前出现了public，则表示此类为公开类。一个java文件中允许存在多个类声明，但每个类中最多仅能存在一个公开类，或者不存在公开类。当一个java文件中存在多个类声明时，编译java文件将根据类的个数生成class文件，class文件名称与类名相同。</p><ul><li>public：修饰class为公开类。</li><li>class：声明一个类，开始结束使用对称大括号定义。</li><li>Index：自拟的类名称，公开类的名称必须与文件名相同，尽量采用无空格字母组成。</li></ul><h3 id="主函数的定义" tabindex="-1">主函数的定义 <a class="header-anchor" href="#主函数的定义" aria-label="Permalink to &quot;主函数的定义&quot;">​</a></h3><p>类中主要存在属性和方法，其中主函数是一种特殊的函数，将在程序在被解释时自动启动主函数来执行其中的内容。每个类中最多只能存在一个主函数，主函数中除了大括号内的内容之外都是规定写法，不能有其他写法。</p><ul><li>public：修饰方法为公开方法。</li><li>static：修饰方法为静态方法。</li><li>void：规定方法的返回值为无返回。</li><li>main：方法名称。</li><li>String[] args：小括号中的内容都是方法的参数。</li></ul><h3 id="输出语句" tabindex="-1">输出语句 <a class="header-anchor" href="#输出语句" aria-label="Permalink to &quot;输出语句&quot;">​</a></h3><p>输出语句用于向控制台中输出内容，如果输出的内容中存在中文，则需要使用文本编辑工具更改文件的编码格式，否则将出现乱码问题。</p><ul><li>System.out.println：此语句为系统内置的，是规定写法。其中println表示打印在一行中，将在打印完成后执行一次换行。如果将单词改为print，则不会在打印后出现换行。</li><li>(“xxx”)：实际要打印的内容，必要使用双引号包裹。如果存在中文需要使用文本编辑工具的编码修改工具，修改当前java文件的编码格式，否则会出现中文乱码问题。</li><li>;：在java中，每一个语句都要以一个分号结尾。</li></ul><h2 id="关于公开类的解释" tabindex="-1">关于公开类的解释 <a class="header-anchor" href="#关于公开类的解释" aria-label="Permalink to &quot;关于公开类的解释&quot;">​</a></h2><p>一个java文件中可以存在多个类，但通常一个java文件中只存在一个类，那个类就是公开类。因为公开类的名称必要与文件名相同，所以在看到文件名后就能知道类名，也有助于更方便的理解类名想表达出来的代码含义。</p><p>在使用控制台编译运行程序时，也将优先扫描公开类中的主函数来执行。</p><p>关于公开类，需要有以下几个规定：</p><ol><li>公开类的修饰为public，也就是在class前面添加public单词。</li><li>每个java文件中，只能存在一个公开类，或者没有公开类，但是不能存在多个公开类。</li><li>普通类可以与文件名同名，公开类的类名必须与文件名相同。</li><li>一般情况下，在每个java文件中只存在一个类，这个类就是公开类，这样通过文件名即可知道类名。</li></ol><h2 id="关于命名的注意点" tabindex="-1">关于命名的注意点 <a class="header-anchor" href="#关于命名的注意点" aria-label="Permalink to &quot;关于命名的注意点&quot;">​</a></h2><ol><li>java文件的名字是自拟的，可以是任意英文单词，甚至是任意长度，但是不要出现空格等特殊字符。</li><li>class文件与类名是对应的，在编译java文件后，一个类将生成一个同名的class文件。</li><li>类的名字也不要存在空格等特殊字符，一般使用一个单词即可。</li><li>实际执行运行的是class文件，java文件是构建class文件的一个中间过程。</li></ol>',24),n=[p];function h(o,c,d,r,k,u){return i(),s("div",null,n)}const b=a(e,[["render",h]]);export{v as __pageData,b as default};
