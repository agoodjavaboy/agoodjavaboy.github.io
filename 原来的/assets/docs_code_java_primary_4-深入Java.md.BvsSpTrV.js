import{_ as a,c as s,o as n,a5 as p}from"./chunks/framework.B33oykO0.js";const e="/assets/3ebb4fb985234015851c6823504d8383.D_k540Gh.png",l="/assets/83e77fc364924e84bd84f05556cb6a98.BhLQzKq5.png",u=JSON.parse('{"title":"深入Java","description":"","frontmatter":{},"headers":[],"relativePath":"docs/code/java/primary/4-深入Java.md","filePath":"docs/code/java/primary/4-深入Java.md","lastUpdated":null}'),i={name:"docs/code/java/primary/4-深入Java.md"},t=p('<h1 id="深入java" tabindex="-1">深入Java <a class="header-anchor" href="#深入java" aria-label="Permalink to &quot;深入Java&quot;">​</a></h1><h2 id="目录结构的解析" tabindex="-1">目录结构的解析 <a class="header-anchor" href="#目录结构的解析" aria-label="Permalink to &quot;目录结构的解析&quot;">​</a></h2><p>安装到计算机上的Java实际上就是一个软件，它的运行全都依赖着安装包解压到计算机上的一堆文件的相互协同来完成一个个的任务。</p><p>在安装完Java之后，安装的目录应该是如下样式：</p><p><img src="'+e+`" alt="d06e6837c5924230b0ea68bc3f415fbb-1642337194615"></p><p>对每个目录进行解释：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>java：Java的JDK和JRE的安装目录，也就是软件的根目录；</span></span>
<span class="line"><span>    jdk：Java开发环境所用到的各种依赖和开发包；</span></span>
<span class="line"><span>        bin：Java中能够被系统执行调用执行的软件，例如解释器、编译器等；</span></span>
<span class="line"><span>        include：Java融合进的其他类型语言的文件，用于底层硬件调用等；</span></span>
<span class="line"><span>        jre：开发环境中的运行环境；</span></span>
<span class="line"><span>        lib：编译好的依赖，可在开发过程中直接引用使用；</span></span>
<span class="line"><span>        src.zip：Java提供的所有依赖的源码包，将在未来学习中做参考研究；</span></span>
<span class="line"><span>    jre：Java运行环境所用到的指令和依赖包；</span></span>
<span class="line"><span>        bin：Java在运行程序过程中使用到的运行文件；</span></span>
<span class="line"><span>        lib：运行过程中使用到的程序依赖，与JDK中的lib相同；</span></span></code></pre></div><p>从上文中可以看到，Java实际上并没有直接调用系统底层资源的能力，例如对内存的读写，以及创建和销毁线程等等操作都需要借助其他语言的协助。</p><p>并且由于Java是一款开源的语言，所以所有的Java安装包中，只要你希望有，Java都会给你一个满是源码的压缩包，供你学习或重构Java底层代码。</p><h2 id="java的模块" tabindex="-1">Java的模块 <a class="header-anchor" href="#java的模块" aria-label="Permalink to &quot;Java的模块&quot;">​</a></h2><p>狭义上的Java就是一门语言，可以用来开发软件。但是Java实际上代表了一整个生态：</p><ul><li><p>无论是高斯林先生首创的Java语法；</p></li><li><p>还是Oracle指定的JVM规范；</p></li><li><p>还是在后续演化中出现的各种Java工具、框架、插件；</p></li><li><p>以及由Java语法演化出来的变种语言；</p></li><li><p>还是按照JVM规范开发出来的各式各样的虚拟机；</p></li></ul><p>都属于Java的一部分。</p><hr><p>Java按照功能，可以简单分解成三个部分：</p><ul><li><strong>JVM</strong>：Java虚拟机是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。JVM将负责调度和协调系统资源来运行Java程序。JVM的主要作用就是<strong>屏蔽不同操作系统之间的差异</strong>，它的工作就是让一套Java代码能够在不同的操作系统中执行出同样的效果。</li><li><strong>JRE</strong>：Java运行环境，主要在JVM的支持下对Java程序进行运行，包括运行程序所使用的解释器，以及程序所依赖的类库，和底层支撑JVM。其中包含了：解释器，类库，JVM。</li><li><strong>JDK</strong>：Java开发环境，主要用于移动设备、嵌入式设备上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。也就是说JDK包含JRE，所以间接的包含了JVM，编译器用于将Java程序编译成字节码文件，工具包可支撑在开发环境中对依赖的引用。其中包含了：JRE，编译器，类库与工具包。</li></ul><p>但是如果从更细致的角度分析Java的组成，就将形成一个复杂的图像：</p><p><img src="`+l+'" alt="83e77fc364924e84bd84f05556cb6a98"></p><p>这张图中，越底层的内容将支撑着上层的内容，例如没有<code>Java Hotsport Client and Server VM（一款Java虚拟机）</code>的存在，就没有以上所有的内容。只有所有内容的支撑，才会成就<code>Java Language（Java语言）</code>。</p>',19),J=[t];function c(v,o,r,d,_,h){return n(),s("div",null,J)}const g=a(i,[["render",c]]);export{u as __pageData,g as default};
