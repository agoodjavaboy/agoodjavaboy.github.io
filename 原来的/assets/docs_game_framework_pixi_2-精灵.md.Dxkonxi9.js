import{_ as s,c as i,o as a,a5 as t}from"./chunks/framework.B33oykO0.js";const n="/assets/04.D2-gBbwm.png",h="/assets/08.CrWJeF8S.png",p="/assets/06.CssSb9uC.png",C=JSON.parse('{"title":"精灵操作","description":"","frontmatter":{},"headers":[],"relativePath":"docs/game/framework/pixi/2-精灵.md","filePath":"docs/game/framework/pixi/2-精灵.md","lastUpdated":null}'),l={name:"docs/game/framework/pixi/2-精灵.md"},k=t('<h1 id="精灵操作" tabindex="-1">精灵操作 <a class="header-anchor" href="#精灵操作" aria-label="Permalink to &quot;精灵操作&quot;">​</a></h1><h2 id="添加精灵并居中" tabindex="-1">添加精灵并居中 <a class="header-anchor" href="#添加精灵并居中" aria-label="Permalink to &quot;添加精灵并居中&quot;">​</a></h2><p><img src="'+n+`" alt="04"></p><p>有许多方法可以在 PixiJS 中向画布绘制内容，但最简单的是使用 Sprite（精灵） 。Sprite允许很多操作，它包装了加载的图像资源，允许绘制、缩放、旋转等。</p><ol><li><p>下面将把一张图片当成一个精灵，渲染到画布上。在之前，需要加载它。就像在任何网页中，图像加载是异步发生的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//加载这个图片</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> bunny</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PIXI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Sprite.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://pixijs.com/assets/bunny.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//感谢 Pixi 官网提供的兔子</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//app是上一章创建的画布，我们要在画布的舞台上创建一个子元素叫做兔子</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.stage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bunny)</span></span></code></pre></div><p>如果正确的话，屏幕的右上角就会出现一只兔子。</p><p>PIXI7 还提供了可以加载纹理的工具 Assets 它具有更强大和方便的功能，并且是异步的，如果要实现添加精灵，可以类似如下写法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//加载一个资源</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PIXI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Assets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://pixijs.com/assets/bunny.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //加载完成之后，资源信息将被封装到response里，顺便将其做成一个精灵</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bunny </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PIXI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Sprite.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //将做好的精灵放到页面上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app.stage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addChlid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bunny)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div></li><li><p>然后我们还可以把兔子放到屏幕的中间：</p><p>锚点是精灵的基准点，默认精灵的基准点再左上角，可以调整基准点到图片的中央：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.anchor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用百分比的方式设置锚点</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//或者单独控制基准点x和y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.anchor.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.anchor.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//再或者使用像素的方式而不是百分比的方式设置锚点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cat.pivot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//单位为像素</span></span></code></pre></div></li><li><p>然后将图片放到网页的中央：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.screen.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //精灵的基准点的x轴位置在页面的宽度一半的位置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.screen.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //精灵的基准点的y轴位置在页面高度的一半的位置</span></span></code></pre></div></li></ol><h2 id="让精灵转起来" tabindex="-1">让精灵转起来 <a class="header-anchor" href="#让精灵转起来" aria-label="Permalink to &quot;让精灵转起来&quot;">​</a></h2><p>对于大多数项目，精灵都有相应的动画。动画实际上就是在一秒内更改精灵的某个属性，比如角度或者位置，并且将更改后的结果渲染一帧到浏览器上。</p><div class="danger custom-block"><p class="custom-block-title">请注意</p><p>精灵的旋转是绕着锚点旋转的，所以在旋转前需要指定锚点在精灵正中。</p></div><p><img src="`+h+`" alt="08"></p><p>如果要实现实时持续的渲染效果，就要用到 ticker 的计时器，每一帧动作都将回调此计时器：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.ticker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bunny.rotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delta </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//rotation表示旋转</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>所以在未来如果需要对精灵添加动画，从而更新场景，只需要在ticker add回调函数中执行即可。</p><h2 id="放大精灵" tabindex="-1">放大精灵 <a class="header-anchor" href="#放大精灵" aria-label="Permalink to &quot;放大精灵&quot;">​</a></h2><p><img src="`+p+`" alt="06"></p><p>放大精灵有两种方式，一种是通过像素的方式，或者使用比例的方式。</p><ol><li><p>像素方式调整大小，单位是像素：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>通过比例的方式：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x 和 y 方向各扩大两倍</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.scale.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.scale.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//或者一次性给两个都指定扩大两倍</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.scale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//或者一次性指定xy两个轴</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bunny.scale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li></ol><h2 id="其他操作" tabindex="-1">其他操作 <a class="header-anchor" href="#其他操作" aria-label="Permalink to &quot;其他操作&quot;">​</a></h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><strong>position</strong></td><td>X 和 Y 位置以像素为单位给出，并更改对象相对于其父对象的位置，也可以直接用作 <code>object.x</code> / <code>object.y</code></td></tr><tr><td><strong>rotation</strong></td><td>旋转以弧度指定，并顺时针旋转对象 (0.0 - 2 * Math.PI)</td></tr><tr><td><strong>angle</strong></td><td>角度是旋转的别名，以度而不是弧度指定 (0.0 - 360.0)</td></tr><tr><td><strong>pivot</strong></td><td>对象旋转的点（以像素为单位） - 还设置子对象的原点</td></tr><tr><td><strong>alpha</strong></td><td>不透明度从 0.0（完全透明）到 1.0（完全不透明），由子级继承</td></tr><tr><td><strong>scale</strong></td><td>比例指定为百分比，1.0 为 100% 或实际大小，并且可以为 x 和 y 轴独立设置</td></tr><tr><td><strong>skew</strong></td><td>Skew 与 CSS skew() 函数类似，在 x 和 y 方向上变换对象，并以弧度指定</td></tr><tr><td><strong>visible</strong></td><td>对象是否可见，作为布尔值 - 防止更新和渲染对象和子对象</td></tr><tr><td><strong>renderable</strong></td><td>对象是否应该渲染 - 当 <code>false</code> 时，对象仍然会更新，但不会渲染，不影响子对象</td></tr></tbody></table>`,18),e=[k];function d(r,E,g,o,y,c){return a(),i("div",null,e)}const u=s(l,[["render",d]]);export{C as __pageData,u as default};
