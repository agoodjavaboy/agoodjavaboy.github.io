import{_ as a,c as t,o as r,a5 as o}from"./chunks/framework.B33oykO0.js";const u=JSON.parse('{"title":"入门课程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/code/java/primary/1-入门课程.md","filePath":"docs/code/java/primary/1-入门课程.md","lastUpdated":null}'),l={name:"docs/code/java/primary/1-入门课程.md"},e=o('<h1 id="入门课程" tabindex="-1">入门课程 <a class="header-anchor" href="#入门课程" aria-label="Permalink to &quot;入门课程&quot;">​</a></h1><h2 id="编程语言概述" tabindex="-1">编程语言概述 <a class="header-anchor" href="#编程语言概述" aria-label="Permalink to &quot;编程语言概述&quot;">​</a></h2><p>自然语言是在自然演化过程中产生的语言，比如人类的各种语言，就属于自然语言；语言的作用就是传递和存储信息。</p><p>编程语言（programming language）可以简单的理解为一种计算机和人都能识别的语言。一种计算机语言让程序员能够准确地定义计算机所需要使用的数据，并精确地定义在不同情况下所应当采取的行动。</p><p>编程语言处在不断的发展和变化中，从最初的机器语言发展到如今的2500种以上的高级语言，每种语言都有其特定的用途和不同的发展轨迹。</p><ul><li><p>服务端开发常用到的Java；</p></li><li><p>人工智能大数据方面常用到的python；</p></li><li><p>展示端经常用到的脚本语言JavaScript；</p></li></ul><p>编程语言并不像人类自然语言发展变化一样的缓慢而又持久，其发展是相当快速的，这主要是计算机硬件、互联网和IT业的发展促进了编程语言的发展。</p><p>计算机行业的不断发展出现了许多千奇百怪的需求，单一的语言不能很好的应对所有的需求，所以出现了多种编程语言。计算机软件应用方向可以分成很多种，大数据、网站、人工智能、桌面应用或移动应用，任何一种编程语言都可以实现以上需求，区别在于代码复杂度。</p><h3 id="编程语言分类" tabindex="-1">编程语言分类 <a class="header-anchor" href="#编程语言分类" aria-label="Permalink to &quot;编程语言分类&quot;">​</a></h3><p>编程语言的发展可以简单的分成三步，分别在应用和编写上有所提升：</p><ul><li><strong>机器语言</strong>：这种语言主要是利用二进制编码进行指令的发送（硬件之间的沟通就使用此类指令），能够被计算机快速地识别，其灵活性相对较高，且执行速度较为可观，机器语言与汇编语言之间的相似性较高。但由于具有局限性，所以在使用上存在一定的约束性。</li><li><strong>汇编语言</strong>：该语言主要是以缩写英文作为标符进行编写的（早期的软件就是由汇编语言编写），运用汇编语言进行编写的一般都是较为简练的小程序，其在执行方面较为便利，但汇编语言在程序方面较为冗长，所以具有较高的出错率，并且学习和开发门槛较高。</li><li><strong>高级语言</strong>：所谓的高级语言（所有的现代语言就是高级编程语言），其实是由多种编程语言结合之后的总称，其可以对多条指令进行整合，将其变为单条指令完成输送。其在操作细节指令以及中间过程等方面都得到了适当的简化，所以，整个程序更为简便，具有较强的操作性，而这种编码方式的简化，使得计算机编程对于相关工作人员的专业水平要求不断放宽。</li></ul><p>语言的高级与否，实际上也可以通过是否更接近人类认知和阅读进行判断。越容易读懂且学习门槛更低的就可以被称为高级编程语言。</p><h3 id="高级编程语言分类" tabindex="-1">高级编程语言分类 <a class="header-anchor" href="#高级编程语言分类" aria-label="Permalink to &quot;高级编程语言分类&quot;">​</a></h3><p>计算机的实际执行还是依靠着非常原始的指令，可能是汇编语言或者机器语言。所以高级编程语言在被计算机执行时，需要将高级语言指令转换为计算机可运行的机器语言，那根据编译机制的不同，还会将编程语言分为两类：</p><ul><li><strong>编译型语言</strong>：高级编程语言将通过编译器软件（通常软件自带的编译软件）进行编译，生成计算机可执行的机器语言后运行机器语言输出指令，因为在编译后的运行中直接运行的机器语言，所以不会消耗额外的效率去执行编译操作，效率较高。但编译后生成的可执行文件通常因操作系统而不同，所以在不同的操作系统中要进行不同的编译，而不能将可执行文件在其他操作系统中执行。</li><li><strong>解释型语言</strong>：高级编程语言的运行将逐行逐句的进行编译，并直接操作计算机，此类语言通常用于脚本等轻量运算或对效率要求不高的应用环境。因为在运行时要兼顾编译的耗时，所以效率比编译型语言低，但运行所依赖的运行环境会因操作系统的不同而安装不同的运行环境，这样就可以将源码直接迁移到其他操作系统后，采用特定的运行环境软件来运行，可以实现跨平台的效果。</li><li><strong>半编译语言</strong>：编译器将源代码编译成自研解释器可理解的代码，这样可以将源码进行编译后在不同操作系统中根据自研解释器的运行获得同样的运行结果。</li></ul><p>因为编程语言会对计算机硬件的内存进行读写操作，那对内存进行空间管理和划分的区别还可以将其分为三类：</p><ul><li><strong>强类型语言</strong>：强类型是针对类型检查的严格程度而言的，它指任何变量在使用的时候必须要指定这个变量的类型，而且在程序的运行过程中这个变量只能存储这个类型的数据。因此，对于强类型语言，一个变量不经过强制转换，它永远是这个数据类型，不允许隐式的类型转换。强类型是自定义类所具有的优势，它使得对象处理的数据更容易被理解。因此，强类型语言在大规模信息系统开发中具有巨大优势，特别是当设计者定义了由自定义类所组成的数据访问层，并把设计向组织内的其他程序员发布的时候。它可以通过类型检查机制在编译过程中发现许多容易被人忽视的错误，从而保证软件的质量，使得大规模的软件集成为可能。</li><li><strong>弱类型语言</strong>：弱类型的检查很弱，仅能严格的区分指令和数据，并不会强制变量数据类型在运行中的改变。弱类型语言允许变量类型的隐式转换，允许强制类型转换等，如字符串和数值可以自动转化。</li><li><strong>无类型语言</strong>：无类型不检查，甚至不区分指令和数据。由于此类语言导致开发人员对内存的控制不佳，所以此类语言很少应用到大型项目的开发中。</li></ul><h2 id="软件概述" tabindex="-1">软件概述 <a class="header-anchor" href="#软件概述" aria-label="Permalink to &quot;软件概述&quot;">​</a></h2><p>软件是一系列<strong>按照特定顺序组织的计算机数据和指令的集合</strong>。</p><p>一般来讲软件被划分为<strong>系统软件、应用软件</strong>和介于这两者之间的中间件，也就是说常说的Windows系统或者安卓等操作系统都属于系统软件，常用的安装到系统软件上的应用称为应用软件。<strong>软件并不只是包括可以在计算机上运行的电脑程序，与这些电脑程序相关的文档一般也被认为是软件的一部分</strong>。简单的说软件就是程序加文档的集合体。</p><p>软件是通过编程语言来编写的指令代码来支撑运行的，并且应用软件会分为<strong>B/S架构（浏览器与服务器）和C/S（客户端与服务器）架构</strong>之分，B/S架构表示在浏览器上访问的网站其实也是软件的一种形态。</p><p>比如网页端的淘宝网站和手机上的淘宝应用都可以称为软件，微博也是一样的道理，可以实现的功能都是一样的只是载体不一样而已。比如涉及到浏览器访问的软件就属于BS软件，涉及到安装包安装的软件或者需要将个人计算机作为运行载体的软件就属于CS语言。</p><p>BS软件的好处就是发版更加简单，并且适配性更好。网站的更新可以只在服务器端更新网页代码，用户在新访问的时候就可以看到新的内容，而不需要用户重新下载和安装任何程序。缺点就是强依赖网络，如果没有了网络网站也就无法访问了，并且软件的运行效率收到了浏览器和网速的制约。</p><p>CS软件的好处就是运行速度更快，借助个人计算机的算力和服务器算力共同执行任务，并且可以在断网情况下仍能够提供一定的功能。但是缺点就是发布新的版本的时候需要用户手动更新客户端。如果部分用户没有更新客户端，则需要对原来的功能的接口仍然保持维护，同时对新接口进行开发，这就会增加维护的成本。并且由于软件所运行的环境是需要适配的，所以针对不同的操作系统还需要开发不同的客户端。</p><h2 id="计算机概述" tabindex="-1">计算机概述 <a class="header-anchor" href="#计算机概述" aria-label="Permalink to &quot;计算机概述&quot;">​</a></h2><p>计算机分为两类，一种是服务器级的，还有一种就是个人使用的。不过所有的计算机都是由硬件和系统组成的，不同的硬件所设计的架构不同能够运行的底层不同，这就导致建设在其上的软件都是不同的（系统级软件和应用级软件都不同）。</p><p>所以在电脑上安装安卓系统和在手机上安装电脑系统都无法达到其原生系统的使用体验和速度；并且通常针对不同的操作系统，软件厂商也对针对不同的操作系统发布不同的软件安装包。</p><p>计算机组成：</p><ul><li><p>硬件：为适应不同的运行环境而生产的不同架构的可供运算的电子元件的集合；</p></li><li><p>操作系统：运行在硬件系统之上的，可以为用户便捷的提供操作的软件；</p></li></ul>',29),i=[e];function n(p,s,d,c,h,_){return r(),t("div",null,i)}const m=a(l,[["render",n]]);export{u as __pageData,m as default};
