import{_ as s,c as i,o as a,aF as e}from"./chunks/framework.CvyoTX4A.js";const g=JSON.parse('{"title":"内置对象","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/11-内置对象.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/11-内置对象.md"}'),l={name:"mds/1-👾后端开发/1-Java/2-Java Web/11-内置对象.md"};function n(p,t,h,d,r,o){return a(),i("div",null,t[0]||(t[0]=[e(`<h1 id="内置对象" tabindex="-1">内置对象 <a class="header-anchor" href="#内置对象" aria-label="Permalink to &quot;内置对象&quot;">​</a></h1><h2 id="内置对象是什么" tabindex="-1">内置对象是什么 <a class="header-anchor" href="#内置对象是什么" aria-label="Permalink to &quot;内置对象是什么&quot;">​</a></h2><ul><li>我们书写的jsp代码中的脚本标签和HTML代码将被编译进java类的service方法中。</li><li><strong>service方法中的第一行存在多个对象类型的引用声明。</strong></li><li>不同的引用有不同的对象进行赋值，我们要研究的是，这些引用中都有什么对象，都可以做什么操作。</li><li>在jsp页面中，可以直接调用引用名，因为我们jsp代码在service方法中，对第一行中的引用是可以直接调用的。</li><li>脚本标签中的定义标签是可以创建属性和方法的，因为已经脱离了service方法，所以在自定义的方法中无法调用内置对象的引用。</li></ul><h2 id="内置对象都有哪些" tabindex="-1">内置对象都有哪些 <a class="header-anchor" href="#内置对象都有哪些" aria-label="Permalink to &quot;内置对象都有哪些&quot;">​</a></h2><table tabindex="0"><thead><tr><th>引用名</th><th>作用</th><th>实际类型</th></tr></thead><tbody><tr><td>request</td><td>（通过参数传入）作用域存值，请求转发，修改编码</td><td>HttpServletRequest</td></tr><tr><td>response</td><td>（通过参数传入）重定向，修改编码，响应内容</td><td>HttpServletResponse</td></tr><tr><td>session</td><td>（通过pageContext对象获得）作用域存值</td><td>HttpSession</td></tr><tr><td>application</td><td>（通过pageContext对象获得）获得web项目的信息，作用域存取值</td><td>ServletContext</td></tr><tr><td>config</td><td>（通过pageContext对象获得）读取web项目的各种信息</td><td>ServletConfig</td></tr><tr><td>page</td><td>与java中的this关键字相同，表示当前jsp页面编译成的Servlet对象</td><td>Object</td></tr><tr><td>out</td><td>（通过pageContext对象获得）与Servlet类中的PrintWrite类似，功能相同，向页面输出内容</td><td>JspWriter</td></tr><tr><td>exception</td><td>只有在指令标签上添加了isErrorPage属性并赋值为true的时候才会有这个引用。与java中的Throwable相同，实现类有Tomcat实现</td><td>Throwable</td></tr><tr><td>pageContext</td><td>可以作为一个作用域，还可以存取其他作用域的值。</td><td>PageContext</td></tr></tbody></table><h2 id="内置对象都有什么作用" tabindex="-1">内置对象都有什么作用 <a class="header-anchor" href="#内置对象都有什么作用" aria-label="Permalink to &quot;内置对象都有什么作用&quot;">​</a></h2><h3 id="request" tabindex="-1">request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;request&quot;">​</a></h3><ul><li><p>forward：可以转发定位。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	request.getRequestDispatcher(&quot;MyJsp.jsp&quot;).forward(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>include：可以进行页面包含。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	request.getRequestDispatcher(&quot;MyJsp.jsp&quot;).include(request, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>setAttribute：可以进行作用域存值，使用request作用域进行存值只能经历一次请求。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.setAttribute(&quot;name&quot;,&quot;hello&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.getRequestDispatcher(&quot;MyJsp.jsp&quot;).forward(request,response);//存值完成后使用请求转发的方式跳转到另一个页面，这样才能在另一个页面取到值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>getAttribute：可以进行作用域取值。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object o = request.getAttribute(&quot;name&quot;);//取出一个Object类型的value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    out.write(o.toString());//write可以向页面写出内容，只能写出String类型，所以调用toString方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%= request.getAttribute(&quot;name&quot;) %&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 也可以使用显示标签进行输出 --&gt;</span></span></code></pre></div></li><li><p>getSession：可以获得session，还可以使用session内置对象。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	HttpSession hs = request.getSession();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>getParameter：获得请求中的信息。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	String name = request.getParameter(&quot;name&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%= name %&gt;</span></span></code></pre></div></li></ul><h3 id="response" tabindex="-1">response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;response&quot;">​</a></h3><ul><li><p>sendRedirect：进行请求重定向。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	response.sendRedirect(&quot;MyJsp.jsp&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>getWriter：获得输出流，但是在jsp页面获得PringWriter对象的时候要进行导包。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page language=&quot;java&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PrintWriter pw = response.getWriter();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pw.write(&quot;hello web!&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pw.flush();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pw.close();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li></ul><h3 id="session" tabindex="-1">session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;session&quot;">​</a></h3><ul><li><p>setAttribute：作用域存值</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	session.setAttribute(&quot;name&quot;,&quot;hello&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>getAttribute：作用域取值</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	session.getAttribute(&quot;name&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li></ul><h3 id="application" tabindex="-1">application <a class="header-anchor" href="#application" aria-label="Permalink to &quot;application&quot;">​</a></h3><ul><li><p>setAttribute：作用域存值</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	application.setAttribute(&quot;name&quot;,&quot;hello&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>getAttribute：作用域取值</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	Object o = application.getAttribute(&quot;name&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%= o %&gt;</span></span></code></pre></div></li></ul><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to &quot;config&quot;">​</a></h3><ul><li><p>&lt;context-param&gt;标签所配置的配置文件是所有的Servlet都可以读取的，使用ServletContext可以读取全局配置文件，多个Servlet都可以使用。</p></li><li><p>ServletConfig可以给单独的给某一个Servlet配置信息，使用&lt;init-param&gt;标签，这个标签要写在&lt;servlet&gt;标签里面，只能单个的Servlet读取。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 全局配置文件，可以给所有的Servlet使用 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context-param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;world&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">context-param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 单独的某个Servlet可以使用的配置 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;TestContext&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.gaoshu.servlet.TestContext&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">init-param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">param-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">init-param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;TestContext&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;/TestContext.do&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">url-pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">servlet-mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//读取全局配置文件:world</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String value1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInitParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//读取本Servlet的配置文件:java</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String value2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServletConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInitParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value2);</span></span></code></pre></div></li></ul><h3 id="exception" tabindex="-1">exception <a class="header-anchor" href="#exception" aria-label="Permalink to &quot;exception&quot;">​</a></h3><ul><li><p>只有在指令标签中定义了isErrorPage=true的页面中才会出现此对象。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page language=&quot;java&quot; isErrorPage=&quot;true&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span></span></code></pre></div></li><li><p>此对象为异常的根类：Throwable（Error和Exception的父亲），具体的实现有服务器决定，出现了什么异常就创建什么异常对象。</p></li><li><p>创建出来的异常对象将赋值给exception引用，可以使用此引用打印错误信息。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%= exception.getMessage() %&gt;</span></span></code></pre></div></li><li><p>可以在其他页面添加errorPage属性，指向isErrorPage = true的页面，将异常信息放到异常页面显示或处理。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page language=&quot;java&quot; errorPage=&quot;MyJsp.jsp&quot; import=&quot;java.util.*,java.io.*&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span></span></code></pre></div></li></ul><h3 id="pagecontext" tabindex="-1">pageContext <a class="header-anchor" href="#pagecontext" aria-label="Permalink to &quot;pageContext&quot;">​</a></h3><blockquote><p>pageContext的作用域的名字叫page，这与内置对象page是不同的。</p><ul><li>内置对象page：表示当前jsp也就是this对象。</li><li>作用域page：表示当前jsp中的作用域PageContext，简称page。</li></ul></blockquote><ul><li><p>PageContext扩展了JspContext，以便在Servlet环境中使用JSP技术时提供有用的上下文信息。</p></li><li><p>PageContext实例提供对与JSP页面关联的所有名称空间的访问，提供对几个页面属性的访问。内置对象被自动添加到pageContext中。</p></li><li><p>PageContext类是一个抽象类，它被设计成通过符合JSP引擎运行时环境来扩展以提供依赖于实现的实现。 JSP实现类通过调用JspFactory.getPageContext()方法来获得PageContext实例，并通过调用JspFactory.releasePageContext()来释放该实例。</p></li><li><p>PageContext为页面/组件作者和页面实现者提供了许多工具，包括:</p><ul><li>用于管理各种作用域命名空间的单个API</li><li>许多方便的API来访问各种公共对象</li><li>获取用于输出的JspWriter的机制</li><li>一种根据页面管理会话使用的机制</li><li>向脚本环境公开页面指令属性的机制</li><li>将当前请求转发或包含到应用程序中的其他活动组件的机制</li><li>处理errorpage异常处理的机制</li><li>用于容器生成代码的方法</li></ul><p>有些方法是由容器生成的代码使用的，而不是由JSP页面作者或JSP标记库作者编写的代码使用的。</p></li><li><p>支持生命周期的方法有initialize()和release()</p></li><li><p>以下方法提供了对内助对象的方便访问:getException()、getPage() getRequest()、getResponse()、getSession()、getServletConfig()和getServletContext()。</p></li><li><p>以下方法提供了对转发、包含和错误处理的支持:forward()、include()和handlePageException()</p></li></ul><h4 id="作为作用域使用" tabindex="-1">作为作用域使用 <a class="header-anchor" href="#作为作用域使用" aria-label="Permalink to &quot;作为作用域使用&quot;">​</a></h4><ul><li>servlet中存在三个作用域，request session context，在JSP中新增了page作用域，实际就是pageContext对象。</li><li>这个作用域的声明周期非常短，只在当前jsp页面中有效，无法跨请求。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 作用域存值 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">	&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   		pageContext.setAttribute(&quot;name&quot;, &quot;hello&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   	 %&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 作用域取值 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">   	 &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   	 	pageContext.getAttribute(&quot;name&quot;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   	  %&gt;</span></span></code></pre></div><h4 id="取出其他作用域中的值" tabindex="-1">取出其他作用域中的值 <a class="header-anchor" href="#取出其他作用域中的值" aria-label="Permalink to &quot;取出其他作用域中的值&quot;">​</a></h4><ul><li><p>在操作作用域进行取值或者删除值的时候，不仅要传入键的值，还要传入一个常量。这个常量表示操作哪个作用域。</p></li><li><p>可以直接传入常量的值，也是一样的效果。</p></li><li><p>之所以推荐使用常量名的方式，就是为了语义化。</p></li></ul><table tabindex="0"><thead><tr><th>常量名</th><th>常量值</th><th>含义</th></tr></thead><tbody><tr><td>pageContext.PAGE_SCOPE</td><td>1</td><td>本页面作用域</td></tr><tr><td>pageContext.REQUEST_SCOPE</td><td>2</td><td>request作用域</td></tr><tr><td>pageContext.SESSION_SCOPE</td><td>3</td><td>session作用域</td></tr><tr><td>pageContext.APPLICATION_SCOPE</td><td>4</td><td>servletContext作用域</td></tr></tbody></table><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageContext.setAttribute(&quot;a&quot;,1);	//往page作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  request.setAttribute(&quot;a&quot;, 2);		//往request作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  session.setAttribute(&quot;a&quot;,3);		//往session作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  application.setAttribute(&quot;a&quot;, 4);	//往context/application作用域中存值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  //取值的时候，使用pageContext对象调用getAttribute方法，先传入key值，然后传入作用域标识</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  out.write(&quot;==&gt;&quot;+pageContext.getAttribute(&quot;a&quot;,pageContext.REQUEST_SCOPE));//结果为2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div><h4 id="从小到大在作用域中寻找值" tabindex="-1">从小到大在作用域中寻找值 <a class="header-anchor" href="#从小到大在作用域中寻找值" aria-label="Permalink to &quot;从小到大在作用域中寻找值&quot;">​</a></h4><ul><li>我们可以使用常量的方式来在指定的作用域中取值，也可以根据生命周期从小到大的方式在多个作用域中寻找值。</li><li>在多个作用域中存在重名的key值时，可以使用指定作用域的方式取值。当不同作用域中不存在重名的key值时，就可以使用从小到大寻找的方式。</li><li>如果找到了响应的key则不会继续向下寻找，直接返回此作用域中的value。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pageContext.setAttribute(&quot;a&quot;,1);	//往page作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.setAttribute(&quot;a&quot;, 2);		//往request作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    session.setAttribute(&quot;a&quot;,3);		//往session作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    application.setAttribute(&quot;a&quot;, 4);	//往context/application作用域中存值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	//取值的时候，使用pageContext对象调用findAttribute方法，传入key则返回最小的key匹配的作用域中的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    out.write(&quot;==&gt;&quot;+pageContext.findAttribute(&quot;a&quot;));//结果为1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div><h4 id="删除其他作用域中的值" tabindex="-1">删除其他作用域中的值 <a class="header-anchor" href="#删除其他作用域中的值" aria-label="Permalink to &quot;删除其他作用域中的值&quot;">​</a></h4><ul><li>删除其他作用域中的值是调用的pageContext的removeAttribute方法。</li><li>第一个参数表示要删除的key值，第二个参数表示在哪个作用域中删除。</li><li>作用域的编号与上文的表格相同。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pageContext.setAttribute(&quot;a&quot;,1);	//往page作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.setAttribute(&quot;a&quot;, 2);		//往request作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    session.setAttribute(&quot;a&quot;,3);		//往session作用域中存值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    application.setAttribute(&quot;a&quot;, 4);	//往context/application作用域中存值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	//这将删除page作用域中key为a的值。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pageContext.removeAttribute(&quot;a&quot;,pageContext.PAGE_SCOPE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div><h4 id="间接获得其他内置对象" tabindex="-1">间接获得其他内置对象 <a class="header-anchor" href="#间接获得其他内置对象" aria-label="Permalink to &quot;间接获得其他内置对象&quot;">​</a></h4><ul><li>在原理上将，jsp转换成的java代码中，很多的内置对象都是使用PageContext对象获得的。</li><li>既然可以在源码中获得对象，在jsp页面中同样可以以同样的方式获得。</li></ul><table tabindex="0"><thead><tr><th>内置对象</th><th>获取方式</th></tr></thead><tbody><tr><td>request</td><td><code>pageContext.getRequest();</code></td></tr><tr><td>response</td><td><code>pageContext.getResponse();</code></td></tr><tr><td>session</td><td><code>pageContext.getSession();</code></td></tr><tr><td>application</td><td><code>pageCntext.getServletContext();</code></td></tr><tr><td>page</td><td><code>pageContext.getPage();</code></td></tr><tr><td>out</td><td>\`\`pageContext.getOut();\`</td></tr><tr><td>Config</td><td><code>pageContext.getServletConfig();</code></td></tr><tr><td>Exception</td><td><code>pageContext.getException();</code></td></tr></tbody></table><h4 id="转发和包含" tabindex="-1">转发和包含 <a class="header-anchor" href="#转发和包含" aria-label="Permalink to &quot;转发和包含&quot;">​</a></h4><ul><li><p>之前在学包含的时候存在两种包含：静态 动态，pageContext的包含是不将java代码整合到一起，在显示的时候再调用包含进来的jsp页面，属于编译前包含，静态包含。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pageContext.include(&quot;MyJsp.jsp&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li><li><p>还可以使用forward方法进行页面的请求转发。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	pageContext.forward(&quot;MyJsp.jsp&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span></code></pre></div></li></ul><h4 id="pagecontext-api" tabindex="-1">PageContext API <a class="header-anchor" href="#pagecontext-api" aria-label="Permalink to &quot;PageContext API&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Field Summary</th><th></th></tr></thead><tbody><tr><td><code>static java.lang.String</code></td><td>APPLICATION<br>用于在PageContext名称表中存储ServletContext的名称。</td></tr><tr><td><code>static int</code></td><td>APPLICATION_SCOPE<br>应用范围:命名引用在ServletContext中保持可用，直到它被回收。</td></tr><tr><td><code>static java.lang.String</code></td><td>CONFIG<br>用于在PageContext名称表中存储ServletConfig的名称。</td></tr><tr><td><code>static java.lang.String</code></td><td>EXCEPTION<br>用于在ServletRequest属性列表和PageContext名称表中存储未捕获异常的名称。</td></tr><tr><td><code>static java.lang.String</code></td><td>OUT<br>用于在PageContext名称表中存储当前JspWriter的名称。</td></tr><tr><td><code>static java.lang.String</code></td><td>PAGE<br>用于在此PageContext的nametables中存储Servlet的名称。</td></tr><tr><td><code>static int</code></td><td>PAGE_SCOPE<br>Page scope:(这是缺省值)在当前Servlet.service()调用返回之前，命名引用在此PageContext中保持可用。</td></tr><tr><td><code>static java.lang.String</code></td><td>PAGECONTEXT<br>用于将此PageContext存储在其自己的名称表中。</td></tr><tr><td><code>static java.lang.String</code></td><td>REQUEST<br>用于在PageContext名称表中存储ServletRequest的名称。</td></tr><tr><td><code>static int</code></td><td>REQUEST_SCOPE<br>请求范围:在当前请求完成之前，命名引用仍然可以从与Servlet关联的ServletRequest中获得。</td></tr><tr><td><code>static java.lang.String</code></td><td>RESPONSE<br>用于在PageContext名称表中存储servlet响应的名称。</td></tr><tr><td><code>static java.lang.String</code></td><td>SESSION<br>用于在PageContext名称表中存储HttpSession的名称。</td></tr><tr><td><code>static int</code></td><td>SESSION_SCOPE<br>会话范围(仅在此页面参与会话时有效):命名引用从与Servlet关联的HttpSession(如果有的话)中保持可用，直到HttpSession失效。</td></tr></tbody></table><table tabindex="0"><thead><tr><th><strong>Constructor Summary</strong></th></tr></thead><tbody><tr><td><code>PageContext()</code><br>唯一的构造函数。</td></tr></tbody></table><table tabindex="0"><thead><tr><th>Method Summary</th><th></th></tr></thead><tbody><tr><td><code>abstract void</code></td><td><code>forward(java.lang.String relativeUrlPath)</code><br>此方法用于将当前ServletRequest和ServletResponse重定向或“转发”到应用程序中的另一个活动组件。</td></tr><tr><td><code>ErrorData</code></td><td><code>getErrorData()</code><br>提供对错误信息的方便访问。</td></tr><tr><td><code>abstract java.lang.Exception</code></td><td><code>getException()</code><br>异常对象(一个异常)的当前值。</td></tr><tr><td><code>abstract java.lang.Object</code></td><td><code>getPage()</code><br>页面对象的当前值(在Servlet环境中，这是javax.servlet.Servlet的实例)。</td></tr><tr><td><code>abstract ServletRequest</code></td><td><code>getRequest()</code><br>请求对象(ServletRequest)的当前值。</td></tr><tr><td><code>abstract ServletResponse</code></td><td><code>getResponse()</code><br>响应对象(ServletResponse)的当前值。</td></tr><tr><td><code>abstract ServletConfig</code></td><td><code>getServletConfig()</code><br>ServletConfig实例。</td></tr><tr><td><code>abstract ServletContext</code></td><td><code>getServletContext()</code><br>ServletContext实例。</td></tr><tr><td><code>abstract HttpSession</code></td><td><code>getSession()</code><br>会话对象(HttpSession)的当前值。</td></tr><tr><td><code>abstract void</code></td><td><code>handlePageException(java.lang.Exception e)</code><br>此方法旨在通过将异常转发到此JSP的指定错误页面来处理未处理的“页面”级别异常。</td></tr><tr><td><code>abstract void</code></td><td><code>handlePageException(java.lang.Throwable t)</code><br>此方法旨在通过将异常转发到此JSP的指定错误页面来处理未处理的“页面”级别异常。</td></tr><tr><td><code>abstract void</code></td><td><code>include(java.lang.String relativeUrlPath)</code><br>使指定的资源作为调用线程正在处理的当前ServletRequest和ServletResponse的一部分进行处理。</td></tr><tr><td><code>abstract void</code></td><td><code>include(java.lang.String relativeUrlPath, boolean flush)</code><br>使指定的资源作为调用线程正在处理的当前ServletRequest和ServletResponse的一部分进行处理。</td></tr><tr><td><code>abstract void</code></td><td><code>initialize(Servlet servlet, ServletRequest request, ServletResponse response, java.lang.String errorPageURL, boolean needsSession, int bufferSize, boolean autoFlush)</code><br>调用initialize方法来初始化未初始化的PageContext，以便JSP实现类可以使用它在_jspService()方法中为传入的请求和响应提供服务。</td></tr><tr><td><code>BodyContent</code></td><td><code>pushBody()</code><br>返回一个新的BodyContent对象，保存当前的“out”JspWriter，并更新PageContext的页面范围属性名称空间中的“out”属性的值。</td></tr><tr><td><code>abstract void</code></td><td><code>release()</code><br>此方法将“重置”PageContext的内部状态，释放所有内部引用，并为以后调用initialize()时重用PageContext做好准备。</td></tr></tbody></table>`,43)]))}const E=s(l,[["render",n]]);export{g as __pageData,E as default};
