import{_ as a,c as r,o as t,aF as i}from"./chunks/framework.CvyoTX4A.js";const p=JSON.parse('{"title":"MVC设计模式","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/15-MVC设计模式.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/15-MVC设计模式.md"}'),l={name:"mds/1-👾后端开发/1-Java/2-Java Web/15-MVC设计模式.md"};function o(b,e,n,s,h,d){return t(),r("div",null,e[0]||(e[0]=[i('<h1 id="mvc设计模式" tabindex="-1">MVC设计模式 <a class="header-anchor" href="#mvc设计模式" aria-label="Permalink to &quot;MVC设计模式&quot;">​</a></h1><ul><li><p>MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)。</p></li><li><p>一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码。</p></li><li><p>将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。也就是解耦合的一个方式。</p><ul><li>Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。 通常模型对象负责在数据库中存取数据。</li><li>View（视图）是应用程序中处理数据显示的部分。 通常视图是依据模型数据创建的。</li><li>Controller（控制器）是应用程序中处理用户交互的部分。 通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li></ul></li><li><p>在web项目中，DAO称为模型层，因为数据都是从数据库来的，DAO是唯一获得数据库信息的途径。Servlet是控制层，主要做用户的交互。HTML或JSP是视图层，用于展示给用户信息并接受用户的操作。</p></li></ul><h2 id="视图" tabindex="-1">视图 <a class="header-anchor" href="#视图" aria-label="Permalink to &quot;视图&quot;">​</a></h2><p>视图是用户看到并与之交互的界面。对老式的Web应用程序来说，视图就是由<a href="https://baike.baidu.com/item/HTML" target="_blank" rel="noreferrer">HTML</a>元素组成的界面，在新式的Web应用程序中，<a href="https://baike.baidu.com/item/HTML" target="_blank" rel="noreferrer">HTML</a>依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括[Adobe Flash](<a href="https://baike.baidu.com/item/Adobe" target="_blank" rel="noreferrer">https://baike.baidu.com/item/Adobe</a> Flash)和像<a href="https://baike.baidu.com/item/XHTML" target="_blank" rel="noreferrer">XHTML</a>，<a href="https://baike.baidu.com/item/XML" target="_blank" rel="noreferrer">XML</a>/<a href="https://baike.baidu.com/item/XSL" target="_blank" rel="noreferrer">XSL</a>,<a href="https://baike.baidu.com/item/WML" target="_blank" rel="noreferrer">WML</a>等一些标识语言和[Web services](<a href="https://baike.baidu.com/item/Web" target="_blank" rel="noreferrer">https://baike.baidu.com/item/Web</a> services).</p><p>MVC好处是它能为应用程序处理很多不同的<a href="https://baike.baidu.com/item/%E8%A7%86%E5%9B%BE" target="_blank" rel="noreferrer">视图</a>。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。</p><h2 id="模型" tabindex="-1">模型 <a class="header-anchor" href="#模型" aria-label="Permalink to &quot;模型&quot;">​</a></h2><p>模型表示企业数据和业务规则。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用像<a href="https://baike.baidu.com/item/EJB" target="_blank" rel="noreferrer">EJB</a>s和ColdFusion Components这样的构件对象来处理数据库，被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。</p><h2 id="控制器" tabindex="-1">控制器 <a class="header-anchor" href="#控制器" aria-label="Permalink to &quot;控制器&quot;">​</a></h2><p>控制器接受用户的输入并调用模型和视图去完成用户的需求，所以当单击Web页面中的超链接和发送<a href="https://baike.baidu.com/item/HTML%E8%A1%A8%E5%8D%95" target="_blank" rel="noreferrer">HTML表单</a>时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。</p>',9)]))}const c=a(l,[["render",o]]);export{p as __pageData,c as default};
