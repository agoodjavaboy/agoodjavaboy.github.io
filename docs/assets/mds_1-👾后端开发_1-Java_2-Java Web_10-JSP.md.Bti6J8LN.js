import{_ as s,c as t,o as l,aF as i}from"./chunks/framework.CvyoTX4A.js";const u=JSON.parse('{"title":"JSP","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/10-JSP.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/10-JSP.md"}'),e={name:"mds/1-👾后端开发/1-Java/2-Java Web/10-JSP.md"};function n(p,a,d,o,r,h){return l(),t("div",null,a[0]||(a[0]=[i(`<h1 id="jsp" tabindex="-1">JSP <a class="header-anchor" href="#jsp" aria-label="Permalink to &quot;JSP&quot;">​</a></h1><h2 id="jsp是什么" tabindex="-1">JSP是什么 <a class="header-anchor" href="#jsp是什么" aria-label="Permalink to &quot;JSP是什么&quot;">​</a></h2><ul><li>jsp的全称叫java server pages，也就是运行在服务器端的页面。</li><li>jsp中允许书写java代码，并且与HTML代码共存。因为有java代码的参与，所以需要编译器进行解析后从服务器端输出。</li><li>jsp使前端页面有了动态的数据展示效果，而并非只静态的展示内容。</li><li>jsp文件以.jsp结尾，在浏览器上可以直接进行访问。这种访问方式与HTML相同。</li></ul><h2 id="运行机制" tabindex="-1">运行机制 <a class="header-anchor" href="#运行机制" aria-label="Permalink to &quot;运行机制&quot;">​</a></h2><ul><li>服务器当接收到一个jsp请求时，会首先将jsp页面变成一个java类（服务器自动完成）。</li><li>生成的java类存放在服务器路径下的work\\Catalina\\localhost\\项目名中。</li><li>生成的java文件，就是一个自定义Servlet类，其中_jspService方法就是继承HttpServlet时重写的service方法，是同一个作用，就是处理请求和发送响应。</li><li>浏览器上显示的内容是通过一个JspWriter的类的write方法进行逐行写出的，这个类类似PrintWrite类，write方法具有同样的作用。</li></ul><h2 id="jsp标签" tabindex="-1">JSP标签 <a class="header-anchor" href="#jsp标签" aria-label="Permalink to &quot;JSP标签&quot;">​</a></h2><ul><li><p>JSP中的标签主要用于书写java代码，但是拥有不同的功能。</p></li><li><p>还有部分标签具有独有的语法及属性。</p></li><li><p>标签可以帮助开发人员在HTML代码中书写java代码。</p></li><li><p>JSP中的标签不能嵌套使用，但是可以进行切割使用。</p></li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>    for(int i=1;i&lt;=9;i++){</span></span>
<span class="line"><span>        for(int j=1;j&lt;=i;j++){</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>			&lt;%= i+&quot;x&quot;+j+&quot;=&quot;+i*j+&quot; &quot; %&gt;</span></span>
<span class="line"><span>&lt;%	</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>%&gt;</span></span>
<span class="line"><span>		&lt;%= &quot;&lt;br /&gt;&quot; %&gt;</span></span>
<span class="line"><span>&lt;%</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>%&gt;</span></span></code></pre></div><h3 id="脚本标签" tabindex="-1">脚本标签 <a class="header-anchor" href="#脚本标签" aria-label="Permalink to &quot;脚本标签&quot;">​</a></h3><h4 id="普通标签" tabindex="-1">普通标签 &lt;% %&gt; <a class="header-anchor" href="#普通标签" aria-label="Permalink to &quot;普通标签 &lt;% %&gt;&quot;">​</a></h4><ul><li>普通标签中可以书写java代码，将被直接编译到service方法中。</li><li>普通标签的内容因为是编译到方法中的，所以变量都是局部变量，不能书写方法。</li><li>一般会在普通标签中书写流程控制及运算等java方法中的代码。</li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%</span></span>
<span class="line"><span>	int a = 10;</span></span>
<span class="line"><span>    int b = 20;</span></span>
<span class="line"><span>    int c = a+b;</span></span>
<span class="line"><span>%&gt;</span></span></code></pre></div><h4 id="输出标签" tabindex="-1">输出标签 &lt;%= %&gt; <a class="header-anchor" href="#输出标签" aria-label="Permalink to &quot;输出标签 &lt;%= %&gt;&quot;">​</a></h4><ul><li>输出标签也称为表达式标签，其中的内容将直接输出到页面中。</li><li>底层的原理是：将表达式标签中的内容放到write方法中作为参数。</li><li>输出标签中不能声明变量，不能书写方法，不能书写分号，实参写什么这里写什么。</li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%= &quot;hello world&quot; %&gt;</span></span>
<span class="line"><span>&lt;%= 1+1 %&gt;</span></span></code></pre></div><h4 id="定义标签" tabindex="-1">定义标签 &lt;%! %&gt; <a class="header-anchor" href="#定义标签" aria-label="Permalink to &quot;定义标签 &lt;%! %&gt;&quot;">​</a></h4><ul><li>脚本标签是被编译到方法中的，定义标签是编译到类中的。</li><li>定义标签中的变量是全局变量（属性），可以声明方法。</li><li>在java中，类里的代码怎么写，这里就怎么写。</li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%!</span></span>
<span class="line"><span>    public void showCode(int a,int b){</span></span>
<span class="line"><span>    	int c = a+b;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>%&gt;</span></span></code></pre></div><h3 id="指令标签" tabindex="-1">指令标签 <a class="header-anchor" href="#指令标签" aria-label="Permalink to &quot;指令标签&quot;">​</a></h3><ul><li>指令标签并不用于书写java代码，更多的是用于定义当前页面/当前类的各项设置。</li><li>指令标签更像HTML里面的标签，存在属性和属性值。</li></ul><h4 id="定义标签-page" tabindex="-1">定义标签 &lt;%@ page %&gt; <a class="header-anchor" href="#定义标签-page" aria-label="Permalink to &quot;定义标签 &lt;%@ page %&gt;&quot;">​</a></h4><ul><li>在此标签中可以书写属性及属性值，来定义导包等相关操作。</li><li>在此标签中书写的内容将影响到jsp编译生成的类的内容。</li></ul><table tabindex="0"><thead><tr><th>作用</th><th>属性名</th><th>属性值</th></tr></thead><tbody><tr><td>导包</td><td>import</td><td>跟java导包一样，还可以连用：java.util.*,java.io.*</td></tr><tr><td>设置页面编码</td><td>pageEncoding</td><td>utf-8，要把所有的JSP页面的默认值改成UTF-8</td></tr><tr><td>设置session生成</td><td>session</td><td>默认为true，表示在访问后生成此次访问的session对象</td></tr><tr><td>当页面出现错误跳转的位置</td><td>errorPage</td><td>默认为空，可以写成jsp页面/servlet的地址</td></tr><tr><td>指定当前页面是否可以处理异常</td><td>isErrorPage</td><td>默认为false，可选为true</td></tr><tr><td>设置页面编码格式</td><td>contentType</td><td>可选text/html或者text/html;charset=utf-8</td></tr><tr><td>动态执行的语言</td><td>language</td><td>将此JSP页面及脚本编译成什么语言</td></tr><tr><td>指定继承的类</td><td>extends</td><td>某个类的全限定名</td></tr><tr><td>是否忽略EL表达式</td><td>isELIgnored</td><td>默认不忽略false，可选为true</td></tr><tr><td>是否是线程安全的</td><td>isThreadSafe</td><td>默认为true，可选为false</td></tr><tr><td>在write的时候，攒多大flush一次</td><td>buffer</td><td>默认8kb，可自选大小</td></tr><tr><td>是否自动刷新</td><td>autoFlush</td><td>默认为true，可选为false</td></tr></tbody></table><ul><li><p>import属性中可以进行连续的导包，用英文的逗号隔开两个导包的目标路径。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java.util.*,java.sql.*&quot;</span></span></code></pre></div></li><li><p>pageEncoding属性将修改response对象的contextType，也就是响应的格式，默认响应的文本格式是text/html，还有就是编码格式为pageEncoding属性的属性值。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html;charset=utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></li><li><p>errorPage属性值指向了另一个页面或者Servlet，表示当我的页面出现了异常则跳转到哪个页面中去。errorPage的路径只能跳转到本项目中的某个路径中</p></li><li><p>isErrorPage = true 所加的jsp页面，将拥有一个exception的对象，这个对象可以展示异常信息等。如果不加 isErrorPage = true 这个属性，那页面中不存在异常对象的。</p></li><li><p>contentType属性与response的setContentType方法相同，表示我输出的内容要让浏览器如何解析，也可以理解为，我发送的的内容是什么格式的。</p></li><li><p>language表示将jsp页面编译成什么语言，没有例外都是java。</p></li><li><p>extends属性表示此jsp所生成的java类将继承哪个类，这将使原有继承的类消失。默认原有继承HttpJspBase类，如果指定了其他的类，则要保证此jsp页面间接继承HttpJspBase类。</p></li><li><p>session如果值为false则生成新的session对象，session是单例模式：</p><ul><li>jsp session 是饿汉式</li><li>servlet session是懒汉式（需要手动调用）</li></ul></li></ul><h4 id="引入其他标签库-taglib" tabindex="-1">引入其他标签库&lt;%@ taglib %&gt; <a class="header-anchor" href="#引入其他标签库-taglib" aria-label="Permalink to &quot;引入其他标签库&lt;%@ taglib %&gt;&quot;">​</a></h4><ul><li>可以使用引入标签在外部引入其他的标签在当前jsp使用。</li><li>其他的标签主要做流程控制或者运算等功能。</li><li>最常用的外部标签库是JSTL标签库。</li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jstl/core&quot; %&gt;</span></span></code></pre></div><blockquote><p>perfix：前缀，也就是如何召唤使用此标签库中的标签。</p><p>uri：路径，表示去哪里找到这个标签库并下载。</p></blockquote><h4 id="静态包含-include" tabindex="-1">静态包含&lt;%@ include %&gt; <a class="header-anchor" href="#静态包含-include" aria-label="Permalink to &quot;静态包含&lt;%@ include %&gt;&quot;">​</a></h4><ul><li>使用包含指令可以让jsp页面融合其他的jsp页面然后一起展示。</li><li>这种包含动作是将两个JSP页面的源码整合到一起后编译称为一个java类，然后向外输出。</li><li>这种包含被称为：<strong>静态包含，也叫编译前包含</strong>。</li><li>因为两个JSP编译生成了同一个java代码，<strong>所以要小心变量名重复和方法名重复</strong>。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;页面路径&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><blockquote><p>file属性用于指定包含的jsp页面的路径。</p></blockquote><h3 id="动作标签" tabindex="-1">动作标签 <a class="header-anchor" href="#动作标签" aria-label="Permalink to &quot;动作标签&quot;">​</a></h3><ul><li>动作标签可以做的事情实际就是HttpServletRequest对象获得getRequestDispatcher方法所获得的RequestDispatcher对象可以做的事情。也就是转发（forward方法）和包含（include方法）。</li></ul><h4 id="包含动作-jsp-include" tabindex="-1">包含动作 &lt;jsp:include &gt; <a class="header-anchor" href="#包含动作-jsp-include" aria-label="Permalink to &quot;包含动作 &lt;jsp:include &gt;&quot;">​</a></h4><ul><li>这种包含与上文中所说的指令标签的包含不同，这种包含类似include方法，是在执行java代码的时候include其他的Servlet类进来，协同的想页面输出内容。</li><li>包含动作不会将两个Servlet类的java代码整合到一起，这种包含称为<strong>动态包含，也叫编译后包含</strong>。</li><li>包含动作可以写在页面的任意位置，也就是需要展示包含进来的页面的内容的位置。</li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;jsp:include page=&quot;index.jsp&quot;/&gt;</span></span></code></pre></div><blockquote><p>page属性的值用于指定要包含进的jsp页面。</p></blockquote><p><strong>包含并传参 &lt;jsp:param &gt;</strong></p><ul><li>如果在两个页面中要使用同一个变量，则可以使用传参的方式使本jsp与包含进来的jsp页面使用同一值。</li><li>这个值（键值对）将被存储在request作用域中，可以在另个jsp页面进行取出。</li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;jsp:include page=&quot;jsp1.jsp&quot;&gt;</span></span>
<span class="line"><span>	&lt;jsp:param name=&quot;world&quot; value=&quot;hello&quot; /&gt;</span></span>
<span class="line"><span>&lt;/jsp:include&gt;</span></span></code></pre></div><blockquote><ul><li><p>name：指定一个键。</p></li><li><p>value：键所对应的值。</p></li></ul><p>一个jsp:include标签中可以存在多个jsp:param标签，可以向包含进来的页面中传入多个值。</p></blockquote><h4 id="转发动作-jsp-forward" tabindex="-1">转发动作 &lt;jsp:forward &gt; <a class="header-anchor" href="#转发动作-jsp-forward" aria-label="Permalink to &quot;转发动作 &lt;jsp:forward &gt;&quot;">​</a></h4><ul><li>动作标签中的请求转发与Servlet中使用request对象获得RequestDispatcher对象后做的转发操作是相同的。</li><li>当指令执行到转发的位置，则会发生跳转页面的现象。</li><li>因为是转发操作，地址栏还是访问的jsp路径，显示的是转发之后jsp的内容。</li></ul><div class="language-jsp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;jsp:forward page=&quot;index.jsp&quot; /&gt;</span></span></code></pre></div><blockquote><p>page属性的值用于指定要转发（跳转）到的jsp页面。</p></blockquote>`,46)]))}const g=s(e,[["render",n]]);export{u as __pageData,g as default};
