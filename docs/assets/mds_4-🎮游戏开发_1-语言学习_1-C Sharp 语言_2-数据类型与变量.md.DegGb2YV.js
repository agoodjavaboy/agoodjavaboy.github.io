import{_ as a,c as e,o as i,aF as d}from"./chunks/framework.CvyoTX4A.js";const b=JSON.parse('{"title":"数据类型与变量","description":"","frontmatter":{},"headers":[],"relativePath":"mds/4-🎮游戏开发/1-语言学习/1-C Sharp 语言/2-数据类型与变量.md","filePath":"mds/4-🎮游戏开发/1-语言学习/1-C Sharp 语言/2-数据类型与变量.md"}'),s={name:"mds/4-🎮游戏开发/1-语言学习/1-C Sharp 语言/2-数据类型与变量.md"};function l(r,t,h,o,n,c){return i(),e("div",null,t[0]||(t[0]=[d(`<h1 id="数据类型与变量" tabindex="-1">数据类型与变量 <a class="header-anchor" href="#数据类型与变量" aria-label="Permalink to &quot;数据类型与变量&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p>在C#中数据类型分为三种：</p><ol><li>值类型：普通类型，属于基础数据类型；</li><li>引用类型：对象类型，用于存储一个地址的引用。这将在学习对象后学习，此处不做解释；</li><li>指针类型：类似引用，将一个值的地址保存到变量中，以便后续操作。指针类型需要配合“不安全代码”相关知识，此处不做解释；</li></ol><h2 id="值类型" tabindex="-1">值类型 <a class="header-anchor" href="#值类型" aria-label="Permalink to &quot;值类型&quot;">​</a></h2><h3 id="有符号位" tabindex="-1"><strong>有符号位</strong> <a class="header-anchor" href="#有符号位" aria-label="Permalink to &quot;**有符号位**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>sbyte</td><td>8位整数</td></tr><tr><td>short</td><td>16位整数</td></tr><tr><td>int</td><td>32位整数类型</td></tr><tr><td>long</td><td>64位整数</td></tr><tr><td>float</td><td>32位单精度浮点型</td></tr><tr><td>double</td><td>64位双精度浮点型</td></tr></tbody></table><ul><li>float类型值，要在后缀加上<code>f</code>或者<code>F</code>：<code>float a = 1.0F;</code></li><li>double类型值，要在后缀加上<code>d</code>或者<code>D</code>：<code>double b = 1.0D;</code></li></ul><h3 id="无符号位" tabindex="-1"><strong>无符号位</strong> <a class="header-anchor" href="#无符号位" aria-label="Permalink to &quot;**无符号位**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>byte</td><td>无符号8位整数</td></tr><tr><td>ushort</td><td>16位无符号整数</td></tr><tr><td>uint</td><td>32位无符号整数</td></tr><tr><td>ulong</td><td>64位无符号整数</td></tr></tbody></table><p>无符号位的变量，不能承载负数。</p><h3 id="其他类型" tabindex="-1">其他类型 <a class="header-anchor" href="#其他类型" aria-label="Permalink to &quot;其他类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>bool</td><td>布尔类型</td></tr><tr><td>char</td><td>字符类型</td></tr><tr><td>decimal</td><td>128位精准十进制，28-29位有效数</td></tr></tbody></table><ul><li>bool类型的值只能是False或者True；</li><li>char类型是16位Unicode字符，使用单引号括起；</li><li>decimal高精度浮点型，数字后缀要加<code>M</code>或<code>m</code>：<code>decimal b = 1.0M;</code></li></ul><h3 id="类型的大小" tabindex="-1">类型的大小 <a class="header-anchor" href="#类型的大小" aria-label="Permalink to &quot;类型的大小&quot;">​</a></h3><p>因为C#可以在多个操作系统上编译（普遍都是Windows平台），如果要获得数据类型在当前操作系统上具体的大小，可以使用<code>sizeof</code>方法进行查看，此方法将返回byte大小，要注意的是，位的表示位bit，8个bit为一个byte。</p><p>以下展示使用sizeof方法检测int类型的大小，并使用Console的占位写法进行内容拼接后打印：</p><div class="language-C# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> System</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Size of int: {0}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Size of int: 4</span></span></code></pre></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><h3 id="定义变量" tabindex="-1">定义变量 <a class="header-anchor" href="#定义变量" aria-label="Permalink to &quot;定义变量&quot;">​</a></h3><h3 id="动态类型" tabindex="-1">动态类型 <a class="header-anchor" href="#动态类型" aria-label="Permalink to &quot;动态类型&quot;">​</a></h3><h2 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h2><h2 id="变量作用域" tabindex="-1">变量作用域 <a class="header-anchor" href="#变量作用域" aria-label="Permalink to &quot;变量作用域&quot;">​</a></h2><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2>`,24)]))}const k=a(s,[["render",l]]);export{b as __pageData,k as default};
