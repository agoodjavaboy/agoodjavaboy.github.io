import{_ as a,c as s,o as i,aF as d}from"./chunks/framework.CvyoTX4A.js";const h="/assets/32fb2fa062484b13bd95b23503370bf8-1652767578323.2dKZ0L8x.png",y=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/1-Java语言/4-运算符.md","filePath":"mds/1-👾后端开发/1-Java/1-Java语言/4-运算符.md"}'),l={name:"mds/1-👾后端开发/1-Java/1-Java语言/4-运算符.md"};function e(n,t,p,r,k,g){return i(),s("div",null,t[0]||(t[0]=[d('<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><p>计算机的主要作用就是运算，运算是计算机中最原子的操作。Java提供了丰富快捷的运算符号实现二目数据运算和三目逻辑运算，并且因为计算机理解数据都是二进制的，所以还提供了有关二进制的运算符，使用快捷的运算方式实现较为复杂的算法。Java的运算符很像普通数学中应用到的运算符号，也存在优先级，运算顺序等规律，所以在学习Java运算符的时候，可以套用一些数学中常用的运算常识。</p><blockquote><p>二目运算表示原子计算由两个参数完成，三目运算表示用三个参数完成最基本的一次运算。</p></blockquote><p>运算中常用的是二目运算，在学习一个运算符的时候要时刻提问自己以下两个问题：</p><ol><li>运算符链接的是什么类型的数据。</li><li>运算结果是什么类型的。</li></ol><h2 id="算术运算" tabindex="-1">算术运算 <a class="header-anchor" href="#算术运算" aria-label="Permalink to &quot;算术运算&quot;">​</a></h2><p>算术运算是对数字进行运算，二目中都要为数字类型，不限制整型或浮点型。算数运算的结果也是数字类型。当多个数学运算符相连时，将从左向右依次进行运算，像数学一样，乘除和取余的优先级高于加减。</p><h3 id="普通数学运算" tabindex="-1">普通数学运算 <a class="header-anchor" href="#普通数学运算" aria-label="Permalink to &quot;普通数学运算&quot;">​</a></h3><table tabindex="0"><thead><tr><th>运算符</th><th>作用</th><th>示例（运算结果）</th></tr></thead><tbody><tr><td>+</td><td>加法运算，将两个值进行相加</td><td>1+1（2）</td></tr><tr><td>-</td><td>减法运算，前面的值减去后面的值得到差</td><td>2-1（1）</td></tr><tr><td>*</td><td>乘法运算，两值相乘得积</td><td>2*3（6）</td></tr><tr><td>/</td><td>整除运算，前值除后值得到商，不要余数（整数与整数运算整除得商，整数与小数运算得小数结果）</td><td>10/3（3）</td></tr><tr><td>%</td><td>取余运算（模），前值除后值得到余数，不要商</td><td>10%3（1）</td></tr></tbody></table><h3 id="递增递减运算" tabindex="-1">递增递减运算 <a class="header-anchor" href="#递增递减运算" aria-label="Permalink to &quot;递增递减运算&quot;">​</a></h3><table tabindex="0"><thead><tr><th>运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>++</td><td>在自身大小中加一</td><td>1++(2)</td></tr><tr><td>–</td><td>在自身大小中减一</td><td>2–(1)</td></tr></tbody></table><p>递增递减运算的结果与实际加一减一的结果没有区别。递增递减中的两个加减号可以写到变量前，也可以写道变量之后。当加减号写到变量前面时，运算的结果将直接得出并直接覆盖变量原来的值，但如果加减号写道变量后面的时候，运算的结果不会直接覆盖变量原来的值，而是在下次运算或者做结果输出的时候覆盖变量的值。</p><p><img src="'+h+`" alt=""></p><h3 id="赋值运算" tabindex="-1">赋值运算 <a class="header-anchor" href="#赋值运算" aria-label="Permalink to &quot;赋值运算&quot;">​</a></h3><p>等号在数学中表示结果展示所用，但在程序中通常将结果展示到一个变量空间中，所以等号也可以当作一种赋值运算符号。赋值运算与算术运算对称，可以在运算后直接将运算结果计入运算成员中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//等效于：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>承接上文<code>a = 10</code>，a去参与其他运算得到的结果如下：</p><table tabindex="0"><thead><tr><th>运算符</th><th>作用</th><th>实例</th></tr></thead><tbody><tr><td>+=</td><td>将号后面值加入前面的变量中</td><td>a+=1;（a=11）</td></tr><tr><td>-=</td><td>在减号前面的值中减去等号后面的值</td><td>a-=1;(a=9)</td></tr><tr><td>*=</td><td>两值相乘，将结果赋值给乘号前面的值</td><td>a*=2(a=20)</td></tr><tr><td>/=</td><td>用除号前面值除以等号后面的值，将结果赋值给除号前面的值</td><td>a/=3(a=3)</td></tr><tr><td>%=</td><td>用模号前面的值，除余等号后面的值，将结果赋值给模号前面的值</td><td>a%=3（a=1）</td></tr></tbody></table><p>使用赋值运算符进行计算时，是直接将需要添加的值直接加入到变量空间中。当使用加法运算并赋值结果的方式时，会开辟新的空间用于记录运算的临时结果，再将临时结果空间的值存入到指定的变量中。</p><p>这样就可以避免在运算过程中导致的自动类型提升问题，例如byte类型的变量进行加一运算得到的结果是int类型，姑且可以认为运算的临时空间初始大小就是int类型那么大，如果要放到byte类型中就要经历强制类型转换。如果采用赋值运算的方式就可以直接在byte空间内部加一，从而避免自动类型提升产生过大的类型的结果的问题。</p><p>如果使用int类型的变量<code>*=</code>double类型的0.1，得到的结果应该是一个小数，但是因为int类型空间并不能记录小数，所以只能记录结果中的整数部分，小数都无法展示和记录下来。</p><h2 id="布尔运算" tabindex="-1">布尔运算 <a class="header-anchor" href="#布尔运算" aria-label="Permalink to &quot;布尔运算&quot;">​</a></h2><p>布尔运算将得到一个boolean类型的结果，也就是非对即错。布尔运算符可能连接两个值，或者连接两个布尔值或表达式，但最终得到的都是一个boolean结果。布尔运算将在未来大量应用到流程控制中。</p><h3 id="比较运算-关系运算" tabindex="-1">比较运算（关系运算） <a class="header-anchor" href="#比较运算-关系运算" aria-label="Permalink to &quot;比较运算（关系运算）&quot;">​</a></h3><p>Java的比较运算与数学中的比较运算大致相同，需要连接两个数值来判断大小。当判断结果为正确得到结果为true，否则结果为false。</p><table tabindex="0"><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>&gt;</td><td>判断前者是否大于后者</td><td>1&gt;2（false）</td></tr><tr><td>&lt;</td><td>判断前者是否小于后者</td><td>1&lt;2（true）</td></tr><tr><td>&gt;=</td><td>判断前者是否大于后者且包含后者</td><td>1&gt;=2（false）</td></tr><tr><td>&lt;=</td><td>判断前者是否小于后者且包含后者</td><td>1&lt;=1（true）</td></tr><tr><td>==</td><td>判断前者与后者是否相同</td><td>1==1（true）</td></tr><tr><td>!=</td><td>判断前者与后者是否不同（如果不同得到true，如果相同得到false）</td><td>1!=2（true）</td></tr></tbody></table><p>其中<code>==</code>在做基本类型比较的时候比较的是值的内容，在比较引用类型是是引用的地址，也就是说可能完全相同的两个值在使用<code>==</code>号比较后为true，但完全相同的两个引用类型在使用<code>==</code>号比较后就可能会出现false，其原因就是两个对象的地址不相同。关于对象类型使用<code>==</code>号的知识将在未来详述。</p><h3 id="逻辑运算" tabindex="-1">逻辑运算 <a class="header-anchor" href="#逻辑运算" aria-label="Permalink to &quot;逻辑运算&quot;">​</a></h3><p>逻辑运算符需要连接两个布尔值或者布尔运算表达式，最终将得到一个布尔运算结果。布尔运算表达式可以是比较运算或者是逻辑运算表达式，只要是得到布尔值的表达式就可以。</p><table tabindex="0"><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与：连接的两个布尔值必须全部都是true才得到true</td><td>true&amp;&amp;false（false）</td></tr><tr><td>||</td><td>或：连接的两个布尔值任何一个为true则得到true</td><td>false||false（false）</td></tr><tr><td>!</td><td>非：将后面的布尔值进行取反</td><td>!true（false）</td></tr><tr><td>^</td><td>异或：两值不相同则为true，否则位false</td><td>true^false（true）</td></tr><tr><td>&amp;</td><td>与&amp;&amp;使用方式相同</td><td>true&amp;false（false</td></tr><tr><td>|</td><td>与|使用方式相同</td><td>false|false（false）</td></tr></tbody></table><p>其中&amp;&amp;和||属于带有短路特性的逻辑运算，例如<code>false &amp;&amp; i++&gt;1</code>运算之后，会发现i的值并没有发生改变，是因为&amp;&amp;在判断了第一个值之后发现为false，那接下来无论出现true还是false结果肯定就是false，索性不再向后运算，直接将false作为结果。||与&amp;&amp;相同，如果判断到值为false就不会向后运算了，因为无论怎么运算结果肯定是false。利用这一特性可以在未来应用中优化程序运行速度，提高逻辑运算效率。</p><h3 id="三目运算" tabindex="-1">三目运算 <a class="header-anchor" href="#三目运算" aria-label="Permalink to &quot;三目运算&quot;">​</a></h3><p>三目运算也叫做三元运算，将通过三个值的运算得到一个结果，这个结果可以是任何类型的结果。其中第一个值必须是一个布尔运算或者布尔值，其余的两个值的类型必须一致，结果的类型必须与后两个值的类型一致。当布尔运算结果为true时将采纳第二个值作为结果，如果false则采用第三个值为结果。</p><p>三目运算的语法为：<code>类型A 变量 = 布尔值?类型A能匹配的值1:类型A能匹配的值2;</code>，并且三目运算是可以嵌套使用的，嵌套的三目运算将作为第二和第三个值（任何三目运算的第一个值都必须是布尔表达式），但是要保证所有的三目运算的结果都为最终接收变量能够匹配的类型。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//变量 = 布尔表达式?当布尔表达式为true的时候采用的值:当布尔表达式为false的时候采用的值;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a=456</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//嵌套//</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">76</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a=12</span></span></code></pre></div><h2 id="位运算" tabindex="-1">位运算 <a class="header-anchor" href="#位运算" aria-label="Permalink to &quot;位运算&quot;">​</a></h2><p>位运算将从二进制的角度对每一位上的值进行运算。运算结果得到一个新的二进制结果，但反映出来的是一个十进制的数字。</p><p>在学习二进制时，要熟练掌握十进制与二进制之间的转换运算，以便对运算过程进行演算。</p><h3 id="位与和位或" tabindex="-1">位与和位或 <a class="header-anchor" href="#位与和位或" aria-label="Permalink to &quot;位与和位或&quot;">​</a></h3><p>位与和位或和逻辑运算中的与和或相同，但是是在每一位二进制数上进行的运算。其中1与boolean类型中的true对应，0与false对应。</p><table tabindex="0"><thead><tr><th>运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>两个值的每位进行比较，都为1则得1，任何一个为0则得0</td><td>2&amp;3（2）</td></tr><tr><td>|</td><td>两个值得每位进行比较，任何一个为1则得1，都为0得0</td><td>2|3（3）</td></tr><tr><td>^</td><td>两个值得每位进行比较，不相同则为1，相同则为0</td><td>6^3（5）</td></tr><tr><td>~</td><td>取反，若为1则得到0，若为0则得到1</td><td>~6（-7）</td></tr></tbody></table><h3 id="位移运算" tabindex="-1">位移运算 <a class="header-anchor" href="#位移运算" aria-label="Permalink to &quot;位移运算&quot;">​</a></h3><p>位移运算会将二进制数字整体向空间的左侧或者右侧移动，在空间之外的内容将被忽略删除，新出现的位用0补充。</p><table tabindex="0"><thead><tr><th>运算符</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>&gt;&gt;</td><td>将数字的二进制表达形式向右移动几位</td><td>10&gt;&gt;1（5）</td></tr><tr><td>&lt;&lt;</td><td>将数字的二进制表达形式向左移动几位</td><td>10&lt;&lt;1（20）</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>3&gt;&gt;&gt;1（1）</td></tr></tbody></table><p>&gt;&gt;右移后高位补的数字取决于原数字是正数还是负数，如果是正数则用0补位，如果为负数则用1补位。但是&gt;&gt;&gt;无符号右移后，无论原数字是正数还是负数，都将以0向高位补位。</p><h2 id="运算符优先级" tabindex="-1">运算符优先级 <a class="header-anchor" href="#运算符优先级" aria-label="Permalink to &quot;运算符优先级&quot;">​</a></h2><p>在同类型运算中，采用从左向右的运算顺序。当一套算式中出现多种运算符时，遵循以下原则：</p><ol><li>逻辑非运算优先级最高。</li><li>算术运算优先级第二，其中乘除和取余运算优先级高于加减法优先级。</li><li>比较运算优先级第三。</li><li>逻辑运算优先级最低，将在最后运算。</li></ol><p>但实际应用过程中，仍然采用小括号的方式手动规定优先级，小括号可嵌套使用，将从最小单位的小括号中开始运算。并且在实际使用中场景较为复杂，一旦出现多种类型混合运算的方式，建议非同类型的运算还是加上小括号，无论自然优先级是否复合要求。</p><p>优先级从高到低排序：</p><table tabindex="0"><thead><tr><th>优先级从高到低排序：</th></tr></thead><tbody><tr><td>使用括号添加的优先级最高</td></tr><tr><td>++、–、~、!</td></tr><tr><td>*、/、%</td></tr><tr><td>+、-</td></tr><tr><td>&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td>&lt;、&gt;、&lt;=、&gt;=</td></tr><tr><td>==、!=</td></tr><tr><td>&amp;</td></tr><tr><td>^</td></tr><tr><td>|</td></tr><tr><td>&amp;&amp;</td></tr><tr><td>||</td></tr><tr><td>?:</td></tr><tr><td>=、*=、/=、%=、+=、-=、&lt;&lt;=、&gt;&gt;=、&gt;&gt;&gt;=、&amp;=、^=、|=</td></tr></tbody></table><h2 id="字符串类型的加法" tabindex="-1">字符串类型的加法 <a class="header-anchor" href="#字符串类型的加法" aria-label="Permalink to &quot;字符串类型的加法&quot;">​</a></h2><p>字符串与字符串之间只能使用加法来进行字符串拼接的操作，实际上就是将数值或者字符串作为字符拼接成一个整体的字符串。</p><p>但在一串字符串相加运算中，在没有进行字符串相加前，仍然是采用数字相加的。在经历字符串相加之后就持续向后进行字符串相加操作，无论后面是否存在数字都将采用拼接的方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//hello11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2hello11</span></span></code></pre></div>`,55)]))}const E=a(l,[["render",e]]);export{y as __pageData,E as default};
