import{_ as s,c as e,o as n,aF as l}from"./chunks/framework.CvyoTX4A.js";const p="/assets/9e090110adc240649ee67b0577421747-17418417073804.DClwyCSn.png",t="/assets/f2e75fad3e814d49ba40ed846d8368dd.DkltOvBD.png",i="/assets/532c3ba72c21472b84609de02b3b3184.DElU9VbP.png",o="/assets/4f36cc444638475f90e618837f4e7659.DHt69iRf.png",c="/assets/3ebb4fb985234015851c6823504d8383.D_k540Gh.png",r="/assets/8a6718c1320f4f89a45c86b83b9e7d35.C2DG1IDS.png",d="/assets/fd976caa089d4c81b6f8c132e523b2f6.CSnWu616.png",J="/assets/3ebb4fb985234015851c6823504d8383.D_k540Gh.png",b="/assets/83e77fc364924e84bd84f05556cb6a98.BhLQzKq5.png",D=JSON.parse('{"title":"软件安装与环境配置","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/1-Java语言/1-环境安装.md","filePath":"mds/1-👾后端开发/1-Java/1-Java语言/1-环境安装.md"}'),v={name:"mds/1-👾后端开发/1-Java/1-Java语言/1-环境安装.md"};function h(f,a,_,m,g,u){return n(),e("div",null,a[0]||(a[0]=[l('<h1 id="软件安装与环境配置" tabindex="-1">软件安装与环境配置 <a class="header-anchor" href="#软件安装与环境配置" aria-label="Permalink to &quot;软件安装与环境配置&quot;">​</a></h1><p>Java的安装包可以在很多地方下载，本次教程从Java8版本开始：</p><ol><li><p><a href="https://www.oracle.com/java/technologies/downloads/#java8" target="_blank" rel="noreferrer">从Oracle官网下载</a></p></li><li><p><a href="https://www.java.com/zh-CN/" target="_blank" rel="noreferrer">从Java官网下载</a></p></li><li><p><a href="https://repo.huaweicloud.com/java/jdk/" target="_blank" rel="noreferrer">从华为镜像站下载</a></p></li></ol><blockquote><p>此处以Win7为例，任何Windiws版本中，都可以通过搜索功能找到相关配置窗口。</p></blockquote><h2 id="检测并去除原java" tabindex="-1">检测并去除原Java <a class="header-anchor" href="#检测并去除原java" aria-label="Permalink to &quot;检测并去除原Java&quot;">​</a></h2><p>在安装Java之前，要先检查计算机中是否存在已经安装的Java，先将曾安装到计算机中的Java卸载，否则同一个计算机中存在两个Java可能会出现冲突。</p><ol><li><p>打开控制面板，调整为“类别”显示模式：</p><p><img src="'+p+'" alt="9e090110adc240649ee67b0577421747"></p></li><li><p>在程序下方，点击卸载程序。右击列表中的软件，将所有与Java相关的软件卸载：</p><p><img src="'+t+'" alt="f2e75fad3e814d49ba40ed846d8368dd"></p></li></ol><h2 id="安装java程序" tabindex="-1">安装Java程序 <a class="header-anchor" href="#安装java程序" aria-label="Permalink to &quot;安装Java程序&quot;">​</a></h2><p>Java的安装要经历两步，分别是对JDK的安装与JRE的安装：</p><ul><li>JDK：Java的开发环境，包括开发过程中和运行程序时所使用到的类库及其他必要依赖。</li><li>JRE：Java的运行环境，包括运行程序时所使用到的依赖。</li></ul><ol><li><p>首先开始安装的是JDK：双击安装包，并指定JDK的安装路径，推荐不安装到系统盘，但如果修改过安装路径请保持默认目录结构，具体目录结构在第三步介绍：</p><p><img src="'+i+'" alt="532c3ba72c21472b84609de02b3b3184"></p></li><li><p>然后开始JRE的安装，同样指定安装路径，必要安装到JDK文件夹的旁边，具体目录结构可参照第三步：</p><p><img src="'+o+'" alt="4f36cc444638475f90e618837f4e7659"></p></li><li><p>无论采用默认的安装路径还是自定义的路径，都要保持文件结构目录如下，默认的安装方式将自动构建如下的目录结构，可能文件夹名称不同：</p><p><img src="'+c+'" alt="3ebb4fb985234015851c6823504d8383"></p></li><li><p>验证安装结果，需要打开系统控制台输入<code>java</code>查看打印结果是否如下，如果显示指令不存在，则需要重新安装Java：</p><blockquote><p>控制台也叫终端，或者命令行，相比较图形化界面直观的操作方式，命令行都是以单词字母组成的命令来控制计算机的各种操作的。命令行的好处是快捷，记住指令之后可以很快的指挥计算机完成操作，而不需要寻找按钮和单独的输入，缺点就是指令的复杂多样化，会增加学习难度。 打开命令行有很多种方式，以下列举几种在Windows中打开命令行的方式。命令行通常会定位到一个路径上，以下几种方式所定位的路径也有所不同：</p><ol><li>Win+R运行cmd打开，定位到当前登录用户文件夹下。</li><li>文件夹地址栏输入cmd打开，定位到原文件夹路径下。</li><li>按住Shift并在文件夹或桌面右击，选择打开命令行，定位到右击所处文件夹下。</li><li>开始菜单搜索cmd打开，定位到当前登录用户文件夹下。</li></ol></blockquote><p><img src="'+r+'" alt="8a6718c1320f4f89a45c86b83b9e7d35"></p><p>指令不存在时，将展示如下：</p><p><img src="'+d+'" alt="fd976caa089d4c81b6f8c132e523b2f6"></p></li></ol><h2 id="安装目录及模块结构" tabindex="-1">安装目录及模块结构 <a class="header-anchor" href="#安装目录及模块结构" aria-label="Permalink to &quot;安装目录及模块结构&quot;">​</a></h2><h3 id="目录介绍" tabindex="-1">目录介绍 <a class="header-anchor" href="#目录介绍" aria-label="Permalink to &quot;目录介绍&quot;">​</a></h3><p>经过上文的安装程序，也能察觉到Java实际就是安装在电脑上的一个软件。像生物一样，编程语言在安装到计算机以后也存在“肉体”和“灵魂”两部分。所谓肉体也就是安装到计算机上的目录以及解压出来的文件，灵魂就是程序在运行起来以后，具体有多少个功能模块以及都有什么分工。</p><p>以下安装路径中的文件夹名称可能因人而异，下文中关于java、jdk、jre文件夹的名称都可能与实际安装名称不同，但除此三个文件夹之外，必须保证其他文件夹名称如下，并无论名称如何命名，文件夹结构必须如下。</p><p><img src="'+J+`" alt="d06e6837c5924230b0ea68bc3f415fbb-1642337194615"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>java：Java的JDK和JRE的安装目录，也就是软件的根目录；</span></span>
<span class="line"><span>    jdk：Java开发环境所用到的各种依赖和开发包；</span></span>
<span class="line"><span>        bin：Java中能够被系统执行调用执行的软件，例如解释器、编译器等；</span></span>
<span class="line"><span>        include：Java融合进的其他类型语言的文件，用于底层硬件调用等；</span></span>
<span class="line"><span>        jre：开发环境中的运行环境；</span></span>
<span class="line"><span>        lib：编译好的依赖，可在开发过程中直接引用使用；</span></span>
<span class="line"><span>        src.zip：Java提供的所有依赖的源码包，将在未来学习中做参考研究；</span></span>
<span class="line"><span>    jre：Java运行环境所用到的指令和依赖包；</span></span>
<span class="line"><span>        bin：Java在运行程序过程中使用到的运行文件；</span></span>
<span class="line"><span>        lib：运行过程中使用到的程序依赖，与JDK中的lib相同；</span></span></code></pre></div><h3 id="模块介绍" tabindex="-1">模块介绍 <a class="header-anchor" href="#模块介绍" aria-label="Permalink to &quot;模块介绍&quot;">​</a></h3><p><img src="`+b+'" alt="83e77fc364924e84bd84f05556cb6a98"></p><p>Java组成模块有很多，但最主要的组成部分可以分为三个：</p><ul><li><strong>JVM</strong>：Java虚拟机是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。JVM将负责调度和协调系统资源来运行Java程序。JVM的主要作用就是<strong>屏蔽不同操作系统之间的差异</strong>，它的工作就是让一套Java代码能够在不同的操作系统中执行出同样的效果。</li><li><strong>JRE</strong>：Java运行环境，主要在JVM的支持下对Java程序进行运行，包括运行程序所使用的解释器，以及程序所依赖的类库，和底层支撑JVM。</li><li><strong>JDK</strong>：Java开发环境，主要用于移动设备、嵌入式设备上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具。也就是说JDK包含JRE，所以间接的包含了JVM，编译器用于将Java程序编译成字节码文件，工具包可支撑在开发环境中对依赖的引用。</li></ul><blockquote><p>JDK中包含：JRE，编译器，类库与工具包。</p><p>JRE中包含：解释器，类库，JVM。</p></blockquote>',22)]))}const j=s(v,[["render",h]]);export{D as __pageData,j as default};
