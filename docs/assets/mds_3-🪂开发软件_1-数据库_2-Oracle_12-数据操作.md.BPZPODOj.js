import{_ as i,c as a,o as l,aF as h}from"./chunks/framework.CvyoTX4A.js";const t="/assets/1567997444897.DTpAuxDe.png",n="/assets/1567997476733.CfQokyWu.png",e="/assets/1567998885886.Bjrba3YT.png",k="/assets/1567998945618.CFLEOuL3.png",p="/assets/1567999174057.DHlYcsp1.png",d="/assets/1567999641489.C2KnWhOj.png",r="/assets/1568000242250.CmtcgnM0.png",g="/assets/1568010983374.UN-kOI5G.png",E="/assets/1568012985306.2G8Lk_mj.png",y="/assets/1568013311505.CaW6j8Qs.png",o="/assets/1568082565935.C3t5RjKe.png",c="/assets/1568013706596.CtkUh1VX.png",F="/assets/1568014160876.CcvRuUYx.png",u="/assets/1568014370466.OnEtizx5.png",D="/assets/1568015115686.D6y6q6aX.png",A="/assets/1568082255764.D9pAfrDG.png",m="/assets/1568088005629.DChb7yCA.png",w=JSON.parse('{"title":"数据操作","description":"","frontmatter":{},"headers":[],"relativePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/12-数据操作.md","filePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/12-数据操作.md"}'),b={name:"mds/3-🪂开发软件/1-数据库/2-Oracle/12-数据操作.md"};function C(v,s,q,_,f,B){return l(),a("div",null,s[0]||(s[0]=[h(`<h1 id="数据操作" tabindex="-1">数据操作 <a class="header-anchor" href="#数据操作" aria-label="Permalink to &quot;数据操作&quot;">​</a></h1><h2 id="查看表格中的所有数据" tabindex="-1">查看表格中的所有数据 <a class="header-anchor" href="#查看表格中的所有数据" aria-label="Permalink to &quot;查看表格中的所有数据&quot;">​</a></h2><h3 id="指定列查询" tabindex="-1">指定列查询 <a class="header-anchor" href="#指定列查询" aria-label="Permalink to &quot;指定列查询&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 语法:查询哪一列的数据,来自哪一个表格.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列名,列名... </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名;</span></span></code></pre></div><ul><li>多个列名之间需要用<code>,</code>隔开,最后一个列名后面不要添加逗号.</li><li>from后跟表名,表示查询这些列,来自哪个表.</li><li>SQL语句中所有的字符都不限大小写,标识符建议小写,关键字建议大写.</li></ul><p><img src="`+t+`" alt="1567997444897"></p><h3 id="全表查询" tabindex="-1">全表查询 <a class="header-anchor" href="#全表查询" aria-label="Permalink to &quot;全表查询&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 语法:查询哪一个表中的所有数据.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名;</span></span></code></pre></div><ul><li><code>*</code>通配符,将变成表中的所有列名.</li><li>在SQL优化的概念上,不建议使用*号,因为将*转换成列名的过程将耗费资源.</li></ul><p><img src="`+n+`" alt="1567997476733"></p><h3 id="结果运算" tabindex="-1">结果运算 <a class="header-anchor" href="#结果运算" aria-label="Permalink to &quot;结果运算&quot;">​</a></h3><h4 id="操作符" tabindex="-1">操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;操作符&quot;">​</a></h4><table tabindex="0"><thead><tr><th>操作符</th><th>定义</th></tr></thead><tbody><tr><td>+</td><td>将结果进行加法运算</td></tr><tr><td>-</td><td>将结果进行减法法运算</td></tr><tr><td>*</td><td>将结果进行乘法运算</td></tr><tr><td>/</td><td>将结果进行除法运算</td></tr></tbody></table><h4 id="列与值得运算" tabindex="-1">列与值得运算 <a class="header-anchor" href="#列与值得运算" aria-label="Permalink to &quot;列与值得运算&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:可以将列中的数据与值进行运算:只能运算数字类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employee_id,salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span></code></pre></div><p><img src="`+e+`" alt="1567998885886"></p><h4 id="列与列的运算" tabindex="-1">列与列的运算 <a class="header-anchor" href="#列与列的运算" aria-label="Permalink to &quot;列与列的运算&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:还可以使两个列的数据进行运算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">department_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span></code></pre></div><p><img src="`+k+`" alt="1567998945618"></p><h3 id="结果拼接" tabindex="-1">结果拼接 <a class="header-anchor" href="#结果拼接" aria-label="Permalink to &quot;结果拼接&quot;">​</a></h3><ul><li>可以借助<code>||</code>将查询出来的结果进行多列和字符串的拼接.</li><li>在SQL中,字符串使用单引号<code> &#39; &#39;</code>括起.</li><li>也可以使用内置的concat函数进行操作，但是concat只能连接两个列的值。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:将姓与名拼接在一起,并且其中添加空格分隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span></code></pre></div><p><img src="`+p+`" alt="1567999174057"></p><h3 id="条件查询" tabindex="-1">条件查询 <a class="header-anchor" href="#条件查询" aria-label="Permalink to &quot;条件查询&quot;">​</a></h3><ul><li>可以借助条件查询做更精确/更复杂的查询.</li><li>条件查询借助<code>where</code>子句,写在查询语句的后面,属于同一语句.</li><li>在where后书写的条件判断与在java的if中书写的差不多.</li><li>where后的运算结果也要得到一个布尔值.</li><li>在存在where子句时,SQL的工作流程是:from ==&gt; where ==&gt; select <ul><li>先确定从哪个表中取出数据.</li><li>然后表中对所有数据中的指定列进行筛选(where).</li><li>将筛选之后的结果通过select确定然后展示.</li></ul></li><li>在SQL中,标识符和关键字不区分大小写,但是在单引号引起的字符串中,区分大小写.</li></ul><h4 id="操作符-1" tabindex="-1">操作符 <a class="header-anchor" href="#操作符-1" aria-label="Permalink to &quot;操作符&quot;">​</a></h4><table tabindex="0"><thead><tr><th>操作符</th><th>意义</th></tr></thead><tbody><tr><td>&gt;和&lt;</td><td>做大于小于比较.</td></tr><tr><td>&gt;=和&lt;=</td><td>做大于等于与小于等于比较.</td></tr><tr><td>=</td><td>做等于比较.</td></tr><tr><td>!=</td><td>做不等于比较.</td></tr></tbody></table><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查询工资超过并且不包括10000元的人员名字.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查询工资小于并且不包括5000元的人员名字.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查询不做AD-VP工作的人.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;AD_VP&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="`+d+`" alt="1567999641489"></p><h4 id="逻辑运算" tabindex="-1">逻辑运算 <a class="header-anchor" href="#逻辑运算" aria-label="Permalink to &quot;逻辑运算&quot;">​</a></h4><table tabindex="0"><thead><tr><th>运算符</th><th>意义</th></tr></thead><tbody><tr><td>and</td><td>与操作</td></tr><tr><td>or</td><td>或操作</td></tr><tr><td>not</td><td>非操作</td></tr></tbody></table><ul><li>在SQL中,逻辑运算的两边所判断得值也是布尔结果.</li><li>使用方法与java中相似.</li><li>优先级与java相似,可以使用小括号<code>( )</code>手动定义优先级.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查询工资在5000-10000并不包含两个值得人员名称.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查询工资等于4800或者9000的人员信息.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查询工资不等于9000的人员信息.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查询工资不等于9000且不等于4800的人员信息.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="`+r+`" alt="1568000242250"></p><h4 id="模糊" tabindex="-1">模糊 <a class="header-anchor" href="#模糊" aria-label="Permalink to &quot;模糊&quot;">​</a></h4><ul><li>在做&quot;查询所有姓李的老师的信息&quot;,或者&quot;查询所有名字中带旭的学生的信息&quot;,或者&quot;查询所有名字为二狗用户信息&quot;这种类似操作的时候,有一些值是不固定的.</li><li>模糊查询关键字:like,通过like和%与_的配合来查询符合要求的结果.</li><li>语法:<code>select 列名 from 表名 where 列名 like (匹配参数);</code></li><li>模糊查询的匹配参数,要写在单引号<code>&#39; &#39;</code>中.</li></ul><table tabindex="0"><thead><tr><th>匹配符</th><th>意义</th></tr></thead><tbody><tr><td>%</td><td>从0-N个忽略的字符</td></tr><tr><td>_</td><td>忽略1个字符</td></tr></tbody></table><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询所有用户中,姓以K开头的人员信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;K%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询所有用户中,姓以K开头,并且姓由四个字母组成的人员信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;K____&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="`+g+`" alt="1568010983374"></p><h4 id="区间" tabindex="-1">区间 <a class="header-anchor" href="#区间" aria-label="Permalink to &quot;区间&quot;">​</a></h4><ul><li>区间就是取出起始值与结束值之间的数据.</li><li>使用关键字between和and来确定:哪一列的数据的哪个起始值和哪个结束值.</li><li>语法:<code>select 列名 from 表名 where 列名 between 起始值 and 结束值;</code></li><li>实际上,使用<code>&gt;</code>和<code>&lt;</code>也能达到区间取值的效果.</li><li>between and与大于等于和小于等于等效,也就是会包含指定的值.</li><li>起始值必须要小于结束值，并且取出的结果包含两端。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询工资在5000到10000之间的用户信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">between</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="`+E+`" alt="1568012985306"></p><h4 id="一组值的匹配" tabindex="-1">一组值的匹配 <a class="header-anchor" href="#一组值的匹配" aria-label="Permalink to &quot;一组值的匹配&quot;">​</a></h4><ul><li>如果要寻找表中多个值匹配的记录,可以使用in来操作.</li><li>in的操作与or和等号结合的操作等效.</li><li>在SQL语句中，名字不要添加引号：别名，表名，列名，但是值要加：添加值，where后判断值。</li><li>语法:<code>select 列名 from 表名 where 列名 in (值,值,值...);</code></li><li>in比or与等号结合的方式,更加注重值的匹配,而减少逻辑运算的思路.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查看所有用户中工资等于10000,5800,7500的用户信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5800</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="`+y+`" alt="1568013311505"></p><h4 id="空的判断" tabindex="-1">空的判断 <a class="header-anchor" href="#空的判断" aria-label="Permalink to &quot;空的判断&quot;">​</a></h4><ul><li>null的意义:没有值,不等价于任何值,是一个未知数,具有不确定性.</li><li>null与空字符串/0/空格等均不相同.</li><li>所以在做null判断的时候,不能使用<code>=</code>进行判断.</li><li>借助<code>is null</code>和<code>is not null</code>来做非空和空的判断.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:查找员工表中commission_pct列中的数据不是空的员工信息.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commission_pct </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="`+o+`" alt="1568082565935"></p><h3 id="取别名" tabindex="-1">取别名 <a class="header-anchor" href="#取别名" aria-label="Permalink to &quot;取别名&quot;">​</a></h3><ul><li>可以对查询出的列进行取别名,取得别名将<strong>用来展示</strong>.</li><li>可以对查询的表格取别名,表格的别名就是为了简便书写.</li></ul><h4 id="列的别名" tabindex="-1">列的别名 <a class="header-anchor" href="#列的别名" aria-label="Permalink to &quot;列的别名&quot;">​</a></h4><ul><li>使用<code>as</code>关键字来取别名.</li><li>或者使用空格<code></code>将别名与列名隔开.</li><li>Oracle数据库取别名时,别名不要添加单引号,可以添加双引号或者不添加引号.</li><li>对列取得别名只能在展示的时候使用.</li><li>给列起别名的时候，as可以不写，但一定不要加引号。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询所有用户的名,列改为&#39;名&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first_name 名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span></code></pre></div><p><img src="`+c+`" alt="1568013706596"></p><h4 id="表的别名" tabindex="-1">表的别名 <a class="header-anchor" href="#表的别名" aria-label="Permalink to &quot;表的别名&quot;">​</a></h4><ul><li>在未来进行表连接的时候,将会更加简便.</li><li>用表名或者表的别名,能够精准的定位到某个表的一列上.</li><li>表的别名可以在where和select中使用.</li><li>在给表去别名时，不能使用as关键字，且不加单引号。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询所有用户中,姓中存在&#39;da&#39;字符的人员信息</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees emp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> emp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">last_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> like</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%da%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><img src="`+F+`" alt="1568014160876"></p><h3 id="去重复" tabindex="-1">去重复 <a class="header-anchor" href="#去重复" aria-label="Permalink to &quot;去重复&quot;">​</a></h3><ul><li>当查出的结果中,存在重复的数据时,可以使用<code>distinct</code>关键字都某一列的数据进行去重复操作.</li><li>去重复后,展示的都是不重复的数据.</li><li>语法:<code>select distinct 列名 from 表名;</code></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询用户表中所有的工作编号.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span></code></pre></div><p><img src="`+u+`" alt="1568014370466"></p><h3 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h3><ul><li>排序是当结果生成以后,在select之后进行排序,然后通过select显示指定的列. <ul><li>from ==&gt; where ==&gt; select ==&gt; order by</li></ul></li></ul><h4 id="升序" tabindex="-1">升序 <a class="header-anchor" href="#升序" aria-label="Permalink to &quot;升序&quot;">​</a></h4><ul><li>借助order by关键字来进行升序排列.</li><li>语法:<code>select 列名 from 表名 order by 列名,列名...;</code></li></ul><h4 id="降序" tabindex="-1">降序 <a class="header-anchor" href="#降序" aria-label="Permalink to &quot;降序&quot;">​</a></h4><ul><li>借助order by desc关键字来进行降序排列.</li><li>语法:<code>select 列名 from 表名 order by 列名,列名... desc; </code></li></ul><hr><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 查询所有员工的工资进行降序排列,如果工资相同,则编号升序排列.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,employee_id;</span></span></code></pre></div><p><img src="`+D+`" alt="1568015115686"></p><h3 id="条件判断" tabindex="-1">条件判断 <a class="header-anchor" href="#条件判断" aria-label="Permalink to &quot;条件判断&quot;">​</a></h3><h4 id="case-when-then" tabindex="-1">case when then <a class="header-anchor" href="#case-when-then" aria-label="Permalink to &quot;case when then&quot;">​</a></h4><ul><li>SQL中存在类似于java的switch的流程语句.</li><li>语法:<code>select 列名,case 列名 when 可能会出现的值 then 如果出现了前面的值,就显示的内容 end from 表名;</code></li><li>case when then操作与switch相似,只能匹配指定的值,不能取区间.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 示例:如果在job_id这一列中,出现了AD_VP这个值,就显示广告,如果出现了IT_PROG就显示开发,如果出现了FI_ACCOUNT就显示销售,其他显示未知.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 	employee_id,job_id,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    	case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> job_id </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    		when</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;AD_VP&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;广告&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       		when</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;IT_PROG&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;开发&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         	when</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FI_ACCOUNT&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;销售&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         	else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;未知&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- case when then做区间判断语法：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_name,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;老男人&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;青壮年&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> then</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;青少年&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;未知&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student;</span></span></code></pre></div><p><img src="`+A+`" alt="1568082255764"></p><h4 id="decode" tabindex="-1">decode <a class="header-anchor" href="#decode" aria-label="Permalink to &quot;decode&quot;">​</a></h4><ul><li>使用decode可以得到与case when then相同的效果.</li><li>decode将简化case when then的代码量.</li><li>语法:<code>select decode(列名,值,匹配的显示,值2,匹配的显示2,其他情况显示) from 表名;</code></li><li>decode与case一样不能做区间判断,只能做指定值判断.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--示例:查询所有员工的工资,如果为1000元,则显示aaa,否则显示bbb.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decode(salary,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bbb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span></code></pre></div><p><img src="`+m+`" alt="1568088005629"></p><h2 id="修改表格中的数据" tabindex="-1">修改表格中的数据 <a class="header-anchor" href="#修改表格中的数据" aria-label="Permalink to &quot;修改表格中的数据&quot;">​</a></h2><ul><li>借助<code>update</code>关键字来实现修改操作.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 这种语法将修改整个表中,某一列的所有数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">值,列名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">值...;</span></span></code></pre></div><ul><li>所以update一般与where子句一起执行.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;疙瘩&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="删除表格中的数据" tabindex="-1">删除表格中的数据 <a class="header-anchor" href="#删除表格中的数据" aria-label="Permalink to &quot;删除表格中的数据&quot;">​</a></h2><ul><li>借助<code>delete</code>关键字来实现删除操作.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名;</span></span></code></pre></div><ul><li>一般delete也是借助where联合工作的.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="在表格中添加数据" tabindex="-1">在表格中添加数据 <a class="header-anchor" href="#在表格中添加数据" aria-label="Permalink to &quot;在表格中添加数据&quot;">​</a></h2><h3 id="全表插入" tabindex="-1">全表插入 <a class="header-anchor" href="#全表插入" aria-label="Permalink to &quot;全表插入&quot;">​</a></h3><ul><li>在插入数据的时候,不指定插入哪个列中,按照表中列的次序往表中插入数据.</li><li>语法:<code>insert into 表名 values(值,值...);</code></li><li>在values中填写的值,与表中的列的次序完全一致!</li><li>在执行了DML语言之后,要执行TCL进行事务控制. <ul><li><code>commit</code>是提交从上次提交事务至今,中间没有做处理的DML.</li><li><code>rollback</code>是回滚到上次提交之后的状态.</li></ul></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my_student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       sid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       sname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       sage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(to_char(sage,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yyyy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1919</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to_char(sage,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yyyy&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2019</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;二狗&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,to_date(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2000-01-01&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yyyy-mm-dd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><h3 id="指定列插入" tabindex="-1">指定列插入 <a class="header-anchor" href="#指定列插入" aria-label="Permalink to &quot;指定列插入&quot;">​</a></h3><ul><li>在指定列插入的时候,要说明往哪个列中插入信息,并且值要与指定的列次序相同.</li><li>语法:<code>insert into 表名(列1,列2,列3...) values(值1,值2,值3...);</code></li><li>在表名括号中的列名要与values括号中的值次序匹配.</li><li>同样要执行TCL事务控制.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,sname) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1004&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;牙碜&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="使用序列自动生产id编号" tabindex="-1">使用序列自动生产ID编号 <a class="header-anchor" href="#使用序列自动生产id编号" aria-label="Permalink to &quot;使用序列自动生产ID编号&quot;">​</a></h3><ul><li>如果每次手动书写编号,可能会出现重复的异常.</li><li>如果编号由java生成,持久化,线程安全问题等都需要考虑.</li><li>在不同的数据库中,都存在类似序列功能的模块,在Oracle叫做sequence.</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 借助序列自动生成id,从而添加记录到表中:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sequence</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myuser_seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> increment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> my_student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">myuser_seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nextval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;大拿&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,to_date(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2013/09/16&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;yyyy/mm/dd&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><ul><li>只要经过了nextval,序列都会增加,无论是否用到了!</li></ul>`,104)]))}const P=i(b,[["render",C]]);export{w as __pageData,P as default};
