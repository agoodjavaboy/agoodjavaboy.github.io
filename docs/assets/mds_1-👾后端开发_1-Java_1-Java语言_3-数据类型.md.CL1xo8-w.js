import{_ as i,c as a,o as t,aF as l}from"./chunks/framework.CvyoTX4A.js";const h="/assets/image-1675333989944.Qu4T6rEe.png",n="/assets/image-1675333998587.Ci8ciF3W.png",p="/assets/image-1675334016723.Tk7NkZAe.png",k="/assets/image-1675334031864.CW9ETCBk.png",F=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/1-Java语言/3-数据类型.md","filePath":"mds/1-👾后端开发/1-Java/1-Java语言/3-数据类型.md"}'),e={name:"mds/1-👾后端开发/1-Java/1-Java语言/3-数据类型.md"};function d(r,s,E,g,y,o){return t(),a("div",null,s[0]||(s[0]=[l('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>Java是一种强数据类型语言，每一个变量在声明时都必须规定其数据类型，在运行中也不允许其改变数据类型。数据类型的作用其实就是规范变量存储数据的大小，从而合理利用计算机内存空间。</p><p>在程序运行过程中出现的数值都要使用变量进行承接，因为变量规定了存储数据的大小，所以要预判运行中出现的数据大小从而规定变量的数据类型。</p><p>在运行程序的过程中会有很多的数值存入计算机内存，在存储这些数据的时候并不会根据数值的大小而动态的分配存储空间的大小，而是会给每一个数值创建一块固定大小的空间将数据存储进去，如果此数值在程序运算过程中发生了加法或者减法的时候就会在它所属的空间中进行加减运算。</p><p>在给每一个数值创建空间时要考虑到两个问题：给小的值创建标准大小空间会不会比较浪费，给大的值创建标准空间会不会放不下那么大的值。所以并不是所有分配出去的空间都是标准大小的，而是经过预判之后才会分配的，这个分配前的预判就要由开发人员完成。</p><h2 id="十进制与二进制的转换" tabindex="-1">十进制与二进制的转换 <a class="header-anchor" href="#十进制与二进制的转换" aria-label="Permalink to &quot;十进制与二进制的转换&quot;">​</a></h2><p>在了解Java数据类型之前要具备一定计算机进制运算常识，因为计算机运算中通常只使用二进制，所以对进制的转换有利于对Byte等二进制计量单位的理解和演算。</p><h3 id="十进制转换为二进制" tabindex="-1">十进制转换为二进制 <a class="header-anchor" href="#十进制转换为二进制" aria-label="Permalink to &quot;十进制转换为二进制&quot;">​</a></h3><p>采用”除二取余“法可以将十进制运算得到二进制。其具体方法就是将一个整数进行除二运算得到其余数，再对商进行除二运算，一直对商进行运算直到余数为0或1，再将历史得到的所有余数从后向前累加得到二进制数。例如下文中23转换二进制得10111：</p><p><img src="'+h+'" alt="image-1675333989944"></p><h3 id="二进制转换为十进制" tabindex="-1">二进制转换为十进制 <a class="header-anchor" href="#二进制转换为十进制" aria-label="Permalink to &quot;二进制转换为十进制&quot;">​</a></h3><p>二进制数从右向左乘二的几次方，二的几次方从零次方开始每位增加一个，最终将所有乘积相加得到转换后的值。所有的值乘零都得零，所以零位上的运算可以忽略，并且任何数的零次方都得一，所以最右面的运算最大得到1，最小得到0。</p><p><img src="'+n+`" alt="image-1675333998587"></p><h2 id="java的数据类型" tabindex="-1">Java的数据类型 <a class="header-anchor" href="#java的数据类型" aria-label="Permalink to &quot;Java的数据类型&quot;">​</a></h2><p>Java中存在两类数据类型：</p><ol><li>基本数据类型共八种，是最基础的元数据类型，所有的复杂类型都由多个基本类型组成。</li><li>复合数据类型可自定义创建，一般由多个基本数据类型组成，因为可以创建，所以没有个数限制。</li></ol><p>复合数据类型也是由多个基本数据类型组成的，在这里只介绍最原子的基础数据类型。基础数据类型的设计及使用有限的节省了计算机运行过程中对内存的消耗并最大程度的保证了数据的完整和准确。</p><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">类型名</th><th style="text-align:left;">名字</th><th style="text-align:left;">占用字节数</th><th style="text-align:left;">值范围</th></tr></thead><tbody><tr><td style="text-align:left;">byte</td><td style="text-align:left;">字节类型（整数类型）</td><td style="text-align:left;">1B</td><td style="text-align:left;">-128(-27)~127(27-1)</td></tr><tr><td style="text-align:left;">short</td><td style="text-align:left;">短整型（整数类型）</td><td style="text-align:left;">2B</td><td style="text-align:left;">-32768(-215)~32767(215-1)</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">整型（整数类型）</td><td style="text-align:left;">4B</td><td style="text-align:left;">-2147483648(-231)~2147483648(231-1)</td></tr><tr><td style="text-align:left;">long</td><td style="text-align:left;">长整型（整数类型）</td><td style="text-align:left;">8B</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">float</td><td style="text-align:left;">单精度浮点型（小数类型）</td><td style="text-align:left;">4B</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">double</td><td style="text-align:left;">双精度浮点型（小数类型）</td><td style="text-align:left;">8B</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">char</td><td style="text-align:left;">单个字符类型</td><td style="text-align:left;">2B</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">布尔类型</td><td style="text-align:left;">不同的操作系统或JVM将区分boolean的大小</td><td style="text-align:left;"></td></tr></tbody></table><p>在使用变量对数据类型进行存取值时，值要添加相应的修饰来决定其初始类型：</p><ul><li>long类型值需要在数值后添加L或者l；</li><li>float类型值需要在数值后添加F或者f；</li><li>char类型值需要在单个字符前后添加单引号；</li><li>boolean类型只能取值为true或false；</li></ul><blockquote><p>在计算机中，每存储一个0或者1称为1bit，8bit被称为1Byte，简写为1B。虽然有八位计数位置，但第一位只用来记录正负数，0表示此数值为正数，1表示此数值为负数，那么实际记录数值的只有7bit。1B最大的数字理应是最大正数，也就是<code>01111 1111</code>，通过二进制转十进制可以得到为127，最小的数应该是最小负数，也就是<code>1111 1111</code>，运算得到-127，但实际上<code>0000 0000</code>和<code>1000 0000</code>都表示为0，这样就白白的浪费了一种组合方式。所以<code>1000 0000</code>理应表示的-0变成了比当前类型表示的最小数还要小一个的数，这也是计算机在运算过程中的规则。所以1B的最大值仍然是127，最小值变成了-128。</p></blockquote><ul><li><p>在java中，没有规定类型的整形都是int类型，浮点型都是double类型。</p></li><li><p>除了可以使用十进制表示数字，还可以使用二进制、八进制或者十六进制。十进制直接写数字即可，二进制使用0b或者0B开头，八进制以0开头，十六进制使用0x或者0X开头，10-15之间的数字使用a-f表示且不区分大小写，但输出和使用时都采用十进制方式：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//八进制</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 013</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//十六进制</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0X13</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//二进制</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b11010100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0B01101001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>char类型也可以使用Unicode来表示，\\开头，\\u开头表示有意义的Unicode编码，范围在\\u0000-\\uFFFF之间，共65536个字符，其中\\u0000-\\u00FF共256个字符与ASCII编码完全符合。65536之内的数字也可以映射为char类型的字符：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">chat a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">9999&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;炸&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><table tabindex="0"><thead><tr><th>转义字符</th><th>说明</th><th>Unicode表示方式</th></tr></thead><tbody><tr><td>\\b</td><td>退格符</td><td>\\u008</td></tr><tr><td>\\n</td><td>换行符</td><td>\\u000a</td></tr><tr><td>\\r</td><td>回车符</td><td>\\u000d</td></tr><tr><td>\\t</td><td>制表符</td><td>\\u0009</td></tr><tr><td>&quot;</td><td>双引号</td><td>\\u0022</td></tr><tr><td>\\’</td><td>单引号</td><td>\\u0027</td></tr><tr><td>\\</td><td>反斜线</td><td>\\u005c</td></tr></tbody></table></li><li><p>浮点型可以使用科学技术法来表示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14e2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//5.12*10^2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14E5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//5.12*10^5</span></span></code></pre></div></li><li><p>任何基本类型值中，都可以通过下划线分割数字以易于阅读：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0B1000_0000_0000_0000_0000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14_15_92_6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h3 id="复合数据类型" tabindex="-1">复合数据类型 <a class="header-anchor" href="#复合数据类型" aria-label="Permalink to &quot;复合数据类型&quot;">​</a></h3><p>例如<code>helloworld</code>这样由多个字母组成的字符串并不属于基本数据类型，其底层实际是由多个char类型值拼接而成，所以字符串属于复合数据类型。</p><p>复合数据类型通常指通过多种基本数据类型整合而成的数据类型，复合数据类型通常使用引用来接收。可以使用引用接收的复合数据类型可以通过：类、接口、数组来创建。有关引用类型和复合数据类型的知识将在学习面向对象之后展开应用和详述。</p><h1 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h1><p>变量是程序中值的载体，值可以存储在一个变量中，然后通过变量进行运算得到结果。并且变量在创建的初期就必须要规定其数据类型，控制其中存在的值的大小和类型，并且在未来运算中不能发生改变。</p><p>一个变量就将在空间内占用一段空间，这段空间的内容是空的，这里所说的空并不是0，而是虚无。数据类型规定了这段空间的最大空间，变量在承接值时开始创建这个空间的初始大小（数值类型为0），然后将值放到空间中，那变量就拥有了意义。</p><ol><li>变量是值的载体，在程序中直接参与运算。</li><li>变量中的值将在程序运行过程中发生改变，故称为变化的量。</li><li>Java为强数据类型语言，每一个变量在进行运算前都必须规定其类型与实际的值。</li></ol><h2 id="声明变量" tabindex="-1">声明变量 <a class="header-anchor" href="#声明变量" aria-label="Permalink to &quot;声明变量&quot;">​</a></h2><p>声明变量并不会存储实际的值，但这段空间并没有意义，所以并不能进行运算等。声明变量的时候就要声明数据类型来控制变量存储数值的上限。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol><li>变量名属于标识符，可自拟但要遵循标识符命名规范。</li><li>变量名前要添加相应数据类型进行约束。</li><li>声明变量属于语句，所以必要在结尾添加英文分号。</li></ol><h2 id="变量赋值" tabindex="-1">变量赋值 <a class="header-anchor" href="#变量赋值" aria-label="Permalink to &quot;变量赋值&quot;">​</a></h2><p>变量实际意义就是存储数值，这些数值可能来自web请求中的参数，或者其他持久化数据源中，也可以直接写到程序里。在对变量进行赋值之前，必须保证变量已经规定了数据类型，并且值与数据类型相匹配。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //声明变量并赋值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //将变量的声明与赋值分开</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>在程序中写的数字或其他数值在程序运行中不能进行改变，所以这种数值被称为常量的一种。但是数值所赋值到的变量仍然为变量，因为变量中得值仍可以在未来运算中改变。</p><p>也就是说程序中写死的值是常量的一种，而承接常量值的变量仍为变量性质。</p><p>在程序中的数字如果没有后缀强制为何种类型，则默认为int类型，小数如果没有强制后缀类型则为double类型。</p></blockquote><h2 id="变量值的改变" tabindex="-1">变量值的改变 <a class="header-anchor" href="#变量值的改变" aria-label="Permalink to &quot;变量值的改变&quot;">​</a></h2><p>上文中声明变量后仅在内存中存在了一个没有意义的空间，在赋值之后此空间具有了内容。变量的”变“的含义就是此空间内的值可以在运行中发生改变，所以可以对变量进行重新赋值使其数值更新：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a为1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a为2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a为3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="连续定义与赋值" tabindex="-1">连续定义与赋值 <a class="header-anchor" href="#连续定义与赋值" aria-label="Permalink to &quot;连续定义与赋值&quot;">​</a></h2><p>在多个变量类型相同时，可以同时声明多个同一类型的变量：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a,b,c;</span></span></code></pre></div><p>当多个变量类型相同，并且要向其中赋的值也相同，还可以在声明后向所有变量中注入数值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d,e,f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>还可以使用等号串联的方式将最右侧值赋值给左侧所有变量，但前提是变量已经被声明：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a,b,c;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//a b c同时变成5</span></span></code></pre></div><h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><p>现在所有的变量声明和赋值语句都写在了方法中，未来还可能写到其他单元里。变量可以在任何代码块中声明和赋值，一般用在类、方法、局部代码块例如流程控制语句等。</p><p>在同一代码块中（同一大括号包围的范围内），不得出现重复名称的变量名，否则将出现变量名的冲突。</p><p>大部分变量书写的位置都使用大括号包裹起来，例如方法的大括号或者类的大括号等。变量声明的语句出生，到所在大括号结尾结束，在大括号之外再不会出现冲突，也不能再使用。</p><h1 id="标识符命名规范" tabindex="-1">标识符命名规范 <a class="header-anchor" href="#标识符命名规范" aria-label="Permalink to &quot;标识符命名规范&quot;">​</a></h1><p>标识符表示在程序中所有用于标识类、方法、变量名称的字符，标识符的命名需遵循一定规范，并规避采用关键字[关键字]和保留字[保留字]，否则将导致程序异常。判断关键字可以使用具有高亮功能的编辑工具来判断，通常字体出现特殊颜色的单词大多为保留字或关键字。</p><p><img src="`+p+`" alt="image-1675334016723"></p><p>标识符的命名规范分为两类，强制命名规范如果违反将导致程序异常报错无法运行，建议性的规范并不会导致程序异常，但命名规范通常在业内大多数应用中使用，采用标准的规范能快速的了解标识符所标识的成员含义甚至类型。</p><h2 id="强制命名规则" tabindex="-1">强制命名规则 <a class="header-anchor" href="#强制命名规则" aria-label="Permalink to &quot;强制命名规则&quot;">​</a></h2><ol><li>命名只能以数字、字母、下划线(_)、美元符号($)组成，不能出现空格或其他字符。</li><li>数字不能开头，但可以穿插到中间或末尾。</li><li>命名没有长度的限制，但严格区分大小写。</li><li>不得使用java中的关键字和保留字，关键字和保留字是java已经为其定义了具体的含义，或者准备对其做具体含义的单词。例如<code>class</code>（关键字）或<code>goto</code>（保留字）都不可作为自定义名称。</li></ol><h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><ol><li>包名：字母全部小写，例如<code>pack</code>。</li><li>类名：每个单词的首字母大写，例如<code>HelloWorld</code>。</li><li>变量名、方法名：第一个单词的首字母小写，其他的单词首字母大写，例如<code>helloWorldVeryGood</code>。</li><li>常量名：单词全部大写，每个单词之间用下划线隔开，例如<code>USER_SEX</code>。</li><li>见名知义：在遵循以上标准的基础上，通常采用有意义的单词来构成标识符。</li></ol><h1 id="基本类型的转换" tabindex="-1">基本类型的转换 <a class="header-anchor" href="#基本类型的转换" aria-label="Permalink to &quot;基本类型的转换&quot;">​</a></h1><p>类型转换也就是让一个变量接收一个与其类型不符的值，如果变量原来所占用的空间能够容纳转换后接收的内容将正常存储和使用，但如果变量空间不足或不符存入的值的类型，将出现精度损失或者报错的情况。在以下类型转换过程中，不考虑到boolean类型，因为boolean类型并不能进行运算。</p><ol><li>java是强数据类型语言，所有的变量在创建之初就已经定义了类型，也就定义了其中可以包含多大的数值或内容。</li><li>类型转换也就是使一个变量接收与其不匹配的数据，这个数据可能大于类型所定义的大小，也可以小于类型所定义的大小。</li><li>熟练掌握类型转换可以节省内存的空间，并且使用合适的类型保存合适的数据。</li></ol><h2 id="自动数据类型提升" tabindex="-1">自动数据类型提升 <a class="header-anchor" href="#自动数据类型提升" aria-label="Permalink to &quot;自动数据类型提升&quot;">​</a></h2><h3 id="赋值时" tabindex="-1">赋值时 <a class="header-anchor" href="#赋值时" aria-label="Permalink to &quot;赋值时&quot;">​</a></h3><p>在多种类型变量之间进行值传递的时候，Java会考虑到每个变量所管理的空间大小。同类型（整型或浮点型）之间进行转换的时候，数据类型占用空间较小的变量可以直接向占用空间较大的类型的变量中赋值：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span></code></pre></div><blockquote><p>单精度浮点型float数值向double类型中进行赋值的时候会出现精度损失的问题，可能会变大很微小的量。这是因为单精度在存储中就并没有太高精度，会有些许偏差，但这点偏差并不会在单精度中表现出来。双精度的精度很高，会放大单精度空间中的精度偏差从而表现出来。</p></blockquote><p>浮点型小数的变量可以无条件接收任意大的整形类型变量，并且与字节大小无关。但实际存储数值的时候，过大的值会在较小的空间内出现精度损失的问题，所以尽量还是采用大空间接收小变量的原则：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l;</span></span></code></pre></div><h3 id="运算时" tabindex="-1">运算时 <a class="header-anchor" href="#运算时" aria-label="Permalink to &quot;运算时&quot;">​</a></h3><p>运算中出现的数值理应以最大空间的变量类型为结果类型，但实际运用中还是要考虑最终结果的大小来声明结果类型。Java给运算后的结果规定了必须的最小的类型，当然也是运算因子的最大类型为主：</p><ul><li>在运算过程中，如果出现double类型的变量，那得出的结果就是double类型的。</li><li>在运算过程中，如果出现float类型的变量，那得出的结果就是float类型的。</li><li>在运算过程中，如果出现long类型的变量，那得出的结果就是long类型的。</li><li>在运算过程中，如果没有以上任何情况，那结果都是int类型的。</li></ul><blockquote><p>注意：</p><ol><li><p>在运算过程过程中，不考虑值的类型，只考虑变量的类型。</p></li><li><p>小数默认为double类型，整数默认为int类型。</p></li></ol></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//没有出现double，long，float，结果为int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d;</span></span></code></pre></div><h3 id="char类型进行计算" tabindex="-1">char类型进行计算 <a class="header-anchor" href="#char类型进行计算" aria-label="Permalink to &quot;char类型进行计算&quot;">​</a></h3><p>char类型作为一个基本数据类型，是可以与数值类型进行运算的。每一个字符对应着编码表中的某个数字，编码表取决于系统不同。整形和char类型之间是可以相互强制转换的，或者通过运算的方式自动实现。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>char中如果想存入一个单引号或者双引号或者其他特殊的符号，可以通过反斜杠转义的方式完成。反斜杠后的第一个字母将作为原文输出或者与反斜杠配合成特殊字符输出：</p><table tabindex="0"><thead><tr><th>转义符</th><th>实际意义</th></tr></thead><tbody><tr><td>\\n</td><td>换行(LF) ，将当前位置移到下一行开头</td></tr><tr><td>\\t</td><td>水平制表(HT) （跳到下一个TAB位置）</td></tr><tr><td>\\v</td><td>垂直制表(VT)</td></tr><tr><td>\\</td><td>代表一个反斜线字符’‘’</td></tr><tr><td>’</td><td>代表一个单引号（撇号）字符</td></tr><tr><td>&quot;</td><td>代表一个双引号字符</td></tr></tbody></table><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="强制数据类型转换" tabindex="-1">强制数据类型转换 <a class="header-anchor" href="#强制数据类型转换" aria-label="Permalink to &quot;强制数据类型转换&quot;">​</a></h2><p>强制数据类型转换通常使用在将大空间变量向小空间变量赋值时，并且可以强制改变Java默认的运算结果的类型来控制接收变量的类型。</p><p>在进行强制类型转换的时候，如果值大于空间存储大小，则会出现精度损失的问题，得到错误的或有偏差的值。如果空间大于值的大小，则直接转换成功不会出现异常。</p><ul><li>大数据类型变量向小数据类型变量赋值需要转换。</li><li>浮点型向整型赋值需要转换。</li></ul><h3 id="转换成功" tabindex="-1">转换成功 <a class="header-anchor" href="#转换成功" aria-label="Permalink to &quot;转换成功&quot;">​</a></h3><p>接收值的变量能够容纳接收的变量的值时，不会出现精度损失，原变量中的内容将正确的赋值到新变量中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b = 100</span></span></code></pre></div><h3 id="损失精度" tabindex="-1">损失精度 <a class="header-anchor" href="#损失精度" aria-label="Permalink to &quot;损失精度&quot;">​</a></h3><p>当接收值的变量无法容纳接收的值时，将会出现错误的数字保存到新变量中。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b = -128</span></span></code></pre></div><p>在过大的变量出现精度损失问题时，是有规律可循的，这种向空间赋值过大的值的问题称为值溢出。在数据类型中的值超过可存储大小时，将从最小值向前推进：数据的存储可以理解为“环装存储”，当值在存储过程中超过的最大值的界限，则进入最小值的范围向前存储。具体运算原理可使用二进制运算推演。</p><p><img src="`+k+'" alt="image-1675334031864"></p>',93)]))}const b=i(e,[["render",d]]);export{F as __pageData,b as default};
