import{_ as s,c as e,o as i,aF as l}from"./chunks/framework.CvyoTX4A.js";const u=JSON.parse('{"title":"数据结构概述","description":"","frontmatter":{},"headers":[],"relativePath":"mds/6-📝读书笔记/1-程序人生/4-数据结构笔记/1-数据结构概述.md","filePath":"mds/6-📝读书笔记/1-程序人生/4-数据结构笔记/1-数据结构概述.md"}'),n={name:"mds/6-📝读书笔记/1-程序人生/4-数据结构笔记/1-数据结构概述.md"};function t(p,a,r,o,c,d){return i(),e("div",null,a[0]||(a[0]=[l(`<h1 id="数据结构概述" tabindex="-1">数据结构概述 <a class="header-anchor" href="#数据结构概述" aria-label="Permalink to &quot;数据结构概述&quot;">​</a></h1><p>数据结构是研究如何用计算机描述事物及其之间关系的学问，主要研究数据在计算机中的存储表示和对数据的处理方法。</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h2><ul><li><p>数据：数据是描述客观事物的符号，能够输入到计算机中，并被计算机程序处理的符号集合。数据的含义非常广泛，数字/字符/图像/声音或视频都可以称为数据。</p></li><li><p>数据元素：数据的基本单位，在计算机程序中，通常作为一个整体考虑和处理。一个数据元素可由若干个数据项组成，数据项是数据不可分割的最小单位。</p></li><li><p>数据对象：性质相同的数据元素的集合，是数据的一个子集，比如整数数据对象，字母数据对象等。</p></li><li><p>数据结构：数据的组织形式，是数据元素之间存在的一种或多种特定关系的数据元素集合。现实世界中，任何事物都是有内在联系的，不是孤立存在的，数据存在于计算机中也是这样。</p></li><li><p>数据类型：数据类型用来刻画一组性值相同的数据与它们所能做的操作。高级语言中还分为原子类型和结构类型，原子类型是不可再分的基本类型，结构类型是由多个类型数据组合而成的。</p></li></ul><h2 id="逻辑结构与存储结构" tabindex="-1">逻辑结构与存储结构 <a class="header-anchor" href="#逻辑结构与存储结构" aria-label="Permalink to &quot;逻辑结构与存储结构&quot;">​</a></h2><p>数据结构主要任务是通过分析数据对象的结构特征，包括逻辑结构与数据对象之间的关系，从而将逻辑结构表示成计算机可实现的物理结构，方便计算机理解。</p><h3 id="逻辑结构" tabindex="-1">逻辑结构 <a class="header-anchor" href="#逻辑结构" aria-label="Permalink to &quot;逻辑结构&quot;">​</a></h3><p>（logical structure）表示数据对象中数据元素之间的相互关系。</p><ul><li>集合：数据元素同时处在一个集合中，但相互之间没有联系。类似数学意义上的集合。</li><li>线性结构：数据元素之间一对一的联系，与链表式结构相同。</li><li>树形结构：数据元素之间是一对多的层次关系。</li><li>图结构：数据元素之间是多对多的关系。</li></ul><h3 id="存储结构" tabindex="-1">存储结构 <a class="header-anchor" href="#存储结构" aria-label="Permalink to &quot;存储结构&quot;">​</a></h3><p>（storage structure）也称为物理结构，指的是数据的逻辑结构在计算机中的存储形式。数据的存储结构应能正确的反应数据元素之间的逻辑关系。</p><p>数据元素的存储方式一般为顺序存储和链式存储：</p><ul><li>顺序存储表示将数据元素存储在一组地址联系的存储单元中，其元素间的逻辑关系与物理关系一致。</li><li>链式存储表示将数据元素存储在任意空间中，这些空间可以是不连续的，数据元素的存储关系并不能反映逻辑关系，要通过指针来表示逻辑关系。</li></ul><h2 id="抽象数据类型" tabindex="-1">抽象数据类型 <a class="header-anchor" href="#抽象数据类型" aria-label="Permalink to &quot;抽象数据类型&quot;">​</a></h2><p>将要处理的对象描述成计算机能识别的形式，并定义它们可以做的操作，称为抽象数据类型（abstract data type ADT）。抽象的意义子啊与数据类型的数学抽象特性，而不是它们的实现方法。</p><p>一个抽象数据类型定义了一个数据对象/数据对象中数据元素之间的关系及数据元素的操作。</p><h3 id="描述" tabindex="-1">描述 <a class="header-anchor" href="#描述" aria-label="Permalink to &quot;描述&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>基本操作名（参数表）：初始化条件和操作结果描述。</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ADT List</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>	数据对象：D={a^i|a^i ∈ ElemSet,i=1,2, ..., n,n≥0}</span></span>
<span class="line"><span>	数据关系：R={&lt;a^i,a^i&gt;|a^i-1,a^i∈D,i=2,3, ..., n}</span></span>
<span class="line"><span>	基本操作如下：</span></span>
<span class="line"><span>	（1）InitList(&amp;L):初始条件：表L不存在，操作结果：建立一个空的线性表L</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,19)]))}const _=s(n,[["render",t]]);export{u as __pageData,_ as default};
