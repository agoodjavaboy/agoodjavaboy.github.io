import{_ as i,c as a,o as t,aF as l}from"./chunks/framework.CvyoTX4A.js";const E=JSON.parse('{"title":"前端访问后台","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/3-前端访问后台.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/3-前端访问后台.md"}'),e={name:"mds/1-👾后端开发/1-Java/2-Java Web/3-前端访问后台.md"};function h(n,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="前端访问后台" tabindex="-1">前端访问后台 <a class="header-anchor" href="#前端访问后台" aria-label="Permalink to &quot;前端访问后台&quot;">​</a></h1><h2 id="请求方式与不同" tabindex="-1">请求方式与不同 <a class="header-anchor" href="#请求方式与不同" aria-label="Permalink to &quot;请求方式与不同&quot;">​</a></h2><blockquote><p>http协议允许八种访问的方式，但是常用的之后get和post方式。</p></blockquote><h3 id="get方式" tabindex="-1">get方式 <a class="header-anchor" href="#get方式" aria-label="Permalink to &quot;get方式&quot;">​</a></h3><ul><li>显性的提交数据,提交的数据会使用<code>?</code>拼接在<code>URL</code>地址栏中。</li><li>会加载在浏览器的内存中，安全性较低。</li><li>提交的多个数据会用<code>&amp;</code>进行连接。</li><li>但是提交的速度相比post要快一些</li><li>传输的数据有大小限制！</li><li>get方式由于速度快一般不向后台传输内容，而是触发后台的某个功能。</li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://127.0.0.1:1023/2020-3-11-2/Login.do?username=小明&amp;password=12345</span></span></code></pre></div><h3 id="post方式" tabindex="-1">post方式 <a class="header-anchor" href="#post方式" aria-label="Permalink to &quot;post方式&quot;">​</a></h3><ul><li>隐性的提交数据，提交的数据不会改变地址栏路径，而是将数据封装在请求中进行发送。</li><li>安全性相比更高，但是会发送两个数据包到后台，所以速度也相比慢一些。</li><li>没有大小限制的，所以上传文件可以使用post方式。</li><li>一般情况下，所有私密的重要的请求内容都是用post方式提交的。</li></ul><h2 id="访问途径" tabindex="-1">访问途径 <a class="header-anchor" href="#访问途径" aria-label="Permalink to &quot;访问途径&quot;">​</a></h2><h3 id="地址栏访问" tabindex="-1">地址栏访问 <a class="header-anchor" href="#地址栏访问" aria-label="Permalink to &quot;地址栏访问&quot;">​</a></h3><blockquote><p>所有的地址栏访问都是get方式</p></blockquote><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://127.0.0.1:8084/2020-3-11-2/TestServlet.do</span></span></code></pre></div><ul><li>http：请求协议。</li><li>127.0.0.1：还可以使用localhost替代，表示本地计算机。</li><li>8084：服务器对浏览器开放的监听端口。</li><li>2020-3-11-2：项目名。</li><li>TestServlet.do：请求名，在wex.xml中配置的路径名。</li></ul><h3 id="超链接访问" tabindex="-1">超链接访问 <a class="header-anchor" href="#超链接访问" aria-label="Permalink to &quot;超链接访问&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://127.0.0.1:8084/2020-3-11-2/TestServlet.do&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>href属性中的值，表示访问后台Servlet类的路径。</li><li>超链接访问的方式都是get方式。</li><li>可以使用相对路径和绝对路径和全路径的方式访问后台的Servlet类：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 绝对路径：以/开头，后加项目名，然后再寻找请求路径。--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/项目名/请求路径&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 相对路径：不以/开头，后加请求名相对于当前HTML文件的路径。--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请求路径&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 全路径：从网络方面来看，怎么去寻找请求路径。  --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;协议名://IP地址:端口号/项目名/请求名&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击测试&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><blockquote><p><strong>在使用相对路径时，可以使用以下的语句：</strong></p><p>../：代表从当前文件路径上一级路径开始查找。</p><p>./：代表从当前文件路径开始查找，与不写/是一个效果。</p><p>../可以多次书写，也就是返回多个上一级。</p></blockquote><h3 id="表单提交" tabindex="-1">表单提交 <a class="header-anchor" href="#表单提交" aria-label="Permalink to &quot;表单提交&quot;">​</a></h3><ul><li><p>是一个非常重要的提交方式，可以携带数据到后台。</p></li><li><p>表单提交可以通过method设置提交的方式，通过action设置提交的位置。点击提交按钮即可发送输入框中的内容到后台的Servlet类中。</p></li><li><p>一定要注意！from表单的输入框中要有一个name的属性，作为提交的数据的key，数据内容作为value。</p></li><li><p>action属性的值同样可以像超链接的href一样，使用绝对路径，全路径或者相对路径。</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://127.0.0.1:1023/2020-3-11-2/ok.do&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,21)]))}const g=i(e,[["render",h]]);export{E as __pageData,g as default};
