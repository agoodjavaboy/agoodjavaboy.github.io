import{_ as l,c as i,o as e,aF as t}from"./chunks/framework.CvyoTX4A.js";const r="/assets/1583913163488.BieiBbyH.png",s="/assets/1583913742368.BtxNP5rP.png",o="/assets/1583915842181.DjHjr1hA.png",p="/assets/1583915993783.53HaKcHx.png",n="/assets/1583919509943.C0bMIEik.png",c="/assets/1584065624970.DjwrWfam.png",m="/assets/1583913805407.pYaRZsV0.png",u="/assets/1583914087972.BGaccTLi.png",v="/assets/1583914150168.CwpMsYWR.png",b="/assets/1583914219756.BOueUz0x.png",h="/assets/1583914365856.Dp_U6619.png",d="/assets/1583920595041.DHY74Pz7.png",_="/assets/1583979730717.CJxlxVNw.png",J="/assets/1583916106503.cNYAiAXC.png",g="/assets/1583916155217.Ce-Mgo2A.png",E="/assets/1583916365994.DzTtXSwP.png",k=JSON.parse('{"title":"Java Web 简介","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/index.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/index.md"}'),S={name:"mds/1-👾后端开发/1-Java/2-Java Web/index.md"};function x(q,a,f,P,w,W){return e(),i("div",null,a[0]||(a[0]=[t('<blockquote><p>agoodjavaboy © 本课程资料原创</p></blockquote><h1 id="java-web-简介" tabindex="-1">Java Web 简介 <a class="header-anchor" href="#java-web-简介" aria-label="Permalink to &quot;Java Web 简介&quot;">​</a></h1><p>Java作为一个全能开发语言，肯定是具有网络编程的能力的，但是原有的Web接口的使用并非那么方便，所以很多的框架都为此做了编程上的简化，例如Spring MVC，就对Java Web的接口和配置都做了优化。</p><p>之所以要学习Web原生的知识，因为即使是高级的编程框架，他们也是基于这些最基础的接口来进行开发的，了解基础的组件，不仅有助于排查开发过程中可能出现的问题，还对代码的灵活性有有大帮助。</p><h1 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识" aria-label="Permalink to &quot;基础知识&quot;">​</a></h1><h2 id="软件架构" tabindex="-1">软件架构 <a class="header-anchor" href="#软件架构" aria-label="Permalink to &quot;软件架构&quot;">​</a></h2><ul><li>C/S（client server） <ul><li>client表示客户端，server表示服务器</li><li>例如需要在计算机上安装的可与网络通讯的软件：QQ、王者荣耀</li><li>好处在于：安全性高，坏处在于：更新难度大，无论修改后台还是前端，都要修改客户端的代码，不利于维护</li></ul></li><li>B/S（browser server） <ul><li>browser表示浏览器，server表示服务器</li><li>例如在网页上可以运行的程序：淘宝，京东</li><li>好处在于：灵活度高，更新方便，只需要将服务器端信息更新，所有访问的内容都将成为更新后的内容，坏处在于：安全级别低，容易遭受攻击</li></ul></li></ul><h2 id="服务器是什么" tabindex="-1">服务器是什么 <a class="header-anchor" href="#服务器是什么" aria-label="Permalink to &quot;服务器是什么&quot;">​</a></h2><ul><li>服务器也是一个软件，要安装到本地电脑上。</li><li>服务器的作用是本机与网络的介质，可以在本机开辟端口，让网络上的其他成员访问到本机服务器中的内容（项目）。</li><li>还可以理解服务器是一个容器，用来放置供客户使用的资源及代码。</li><li>广义上的服务器是一台设备，实际上是一个超级计算机上安装的软件。</li><li>很多的厂商生产了很多的服务器：Tomcat JBOSS IIS</li></ul><h3 id="tomcat服务器" tabindex="-1">Tomcat服务器 <a class="header-anchor" href="#tomcat服务器" aria-label="Permalink to &quot;Tomcat服务器&quot;">​</a></h3><p><img src="'+r+'" alt="1583913163488"></p><ul><li>bin：可执行文件： <ul><li>startup.bat：在Windows系统中通过命令行启动服务器</li><li>shutdown.bat：在Windows系统中通过命令行关闭服务器</li><li>startup.sh：在Linux系统中通过命令行启动服务器</li><li>shutdown.sh：在Linux系统中通过命令行关闭服务器</li></ul></li><li>conf：配置文件所在的位置。 <ul><li>server.xml：服务器运行所参考的配置</li></ul></li><li>lib：服务器运行所需要的jar包。 <ul><li>servlet-api.jar：JavaEE项目运行所依赖的jar</li><li>jsp-api.jar：JSP解析所依赖的jar</li></ul></li><li>logs：服务器运行期间日志的保存位置。</li><li>temp：缓存或者暂存文件所在的位置。</li><li>webapps：项目在服务器中的位置。</li><li>werk：编译项目后生成的可运行class所在的位置。</li></ul><h2 id="servlet是什么" tabindex="-1">Servlet是什么 <a class="header-anchor" href="#servlet是什么" aria-label="Permalink to &quot;Servlet是什么&quot;">​</a></h2><ul><li>Servlet（Server Applet）是Java Servlet的简称，称为小服务程序或服务连接器，用Java编写的服务器端程序。</li><li>具有独立于平台和协议的特性，主要功能在于交互式地浏览和生成数据，生成动态Web内容。</li><li>狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为接口。</li><li>Servlet运行于支持Java的应用服务器（Tomcat）中。</li><li>从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。</li></ul><h2 id="java版本介绍" tabindex="-1">Java版本介绍 <a class="header-anchor" href="#java版本介绍" aria-label="Permalink to &quot;Java版本介绍&quot;">​</a></h2><ul><li><strong>Java SE（Java Platform，Standard Edition）</strong>。Java SE 以前称为 J2SE。它允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为 Java Platform，Enterprise Edition（Java EE）提供基础。</li><li><strong>Java EE（Java Platform，Enterprise Edition）</strong>。这个版本以前称为 J2EE。企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端 Java 应用程序。Java EE 是在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web 2.0 应用程序。</li><li><strong>Java ME（Java Platform，Micro Edition）</strong>。这个版本以前称为 J2ME。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。Java ME 包括灵活的用户界面、健壮的安全模型、许多内置的网络协议以及对可以动态下载的连网和离线应用程序的丰富支持。基于 Java ME 规范的应用程序只需编写一次，就可以用于许多设备，而且可以利用每个设备的本机功能。</li></ul><blockquote><p>javase: 即J2SE, java标准版, 主要做一般的java应用, 比如, 应用软件/ QQ之类的通信软件等等. javaee: 即J2EE, 主要做企业应用, 比如公司网站, 企业解决方案等; javame: 即J2ME, 主要面向嵌入式等设备应用的开发, 比如手机游戏等.</p></blockquote><h1 id="项目构建" tabindex="-1">项目构建 <a class="header-anchor" href="#项目构建" aria-label="Permalink to &quot;项目构建&quot;">​</a></h1><h2 id="myeclipse创建web项目" tabindex="-1">MyEclipse创建web项目 <a class="header-anchor" href="#myeclipse创建web项目" aria-label="Permalink to &quot;MyEclipse创建web项目&quot;">​</a></h2><h3 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h3><ol><li>新建一个web项目：</li></ol><p><img src="'+s+'" alt="1583913742368"></p><ol start="2"><li><p>输入项目的配置：</p><p><img src="'+o+'" alt="1583915842181"></p></li><li><p>勾选预生成文件：</p><p><img src="'+p+'" alt="1583915993783"></p></li><li><p>项目介绍</p><p><img src="'+n+'" alt="1583919509943"></p><ul><li><p>src：java文件所在的位置，之前JavaSE项目怎么写，就在这里怎么写。</p></li><li><p>WebRoot：存放静态资源的，也就是可以在浏览器上访问的内容（HTML，css，图片，JavaScript）。</p><ul><li>WEB-INF：在web项目启动时初始化的配置。 <ul><li>lib：web项目运行所依赖的jar包所在位置（将jar包粘贴到此处可直接自动导包）。</li><li>web.xml：web项目真正的配置文件。</li></ul></li></ul><blockquote><p>在浏览器访问Web项目的HTML内容或者其他内容时，WebRoot就是项目的根据路径，在项目名后直接书写WebRoot内文件夹和文件的名字。</p></blockquote></li></ul></li><li><p>修改项目编码为utf-8格式，防止后期书写中文代码出现问题：</p><p><img src="'+c+'" alt="1584065624970"></p></li></ol><h3 id="配置服务器" tabindex="-1">配置服务器 <a class="header-anchor" href="#配置服务器" aria-label="Permalink to &quot;配置服务器&quot;">​</a></h3><ol><li>在选项中配置web服务器Tomcat：</li></ol><p><img src="'+m+'" alt="1583913805407"></p><p><img src="'+u+'" alt="1583914087972"></p><ol start="2"><li>显示服务器列表：</li></ol><p><img src="'+v+'" alt="1583914150168"></p><p><img src="'+b+'" alt="1583914219756"></p><p><img src="'+h+'" alt="1583914365856"></p><ol start="3"><li><p>开启服务器，可以点击绿色的播放键或者小虫子：</p><p><img src="'+d+'" alt="1583920595041"></p><ol><li>http-apr-8084 表示服务器对浏览器的监听端口。</li><li>Server startup in xxx ms 表示服务器的启动花费了多长时间。</li></ol></li><li><p>修改服务器的端口号：</p><ul><li><p>在服务器的目录下，在conf文件夹的server.xml中进行修改。</p></li><li><p>在connector标签中就行修改，“connector”表示接收请求的端口，返回响应的端口。</p><p><img src="'+_+'" alt="1583979730717"></p><ul><li>port：端口号</li><li>URIEncoding：路径编码格式</li></ul></li></ul></li></ol><h3 id="将项目加载到服务器中" tabindex="-1">将项目加载到服务器中 <a class="header-anchor" href="#将项目加载到服务器中" aria-label="Permalink to &quot;将项目加载到服务器中&quot;">​</a></h3><ol><li><p>开始配置项目：</p><p><img src="'+J+'" alt="1583916106503"></p></li><li><p>选中项目：</p><p><img src="'+g+'" alt="1583916155217"></p></li><li><p>项目安装后的样子与各种操作：</p><p><img src="'+E+'" alt="1583916365994"></p></li></ol>',34)]))}const T=l(S,[["render",x]]);export{k as __pageData,T as default};
