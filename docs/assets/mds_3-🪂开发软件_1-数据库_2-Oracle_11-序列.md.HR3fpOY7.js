import{_ as i,c as a,o as t,aF as l}from"./chunks/framework.CvyoTX4A.js";const c=JSON.parse('{"title":"序列","description":"","frontmatter":{},"headers":[],"relativePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/11-序列.md","filePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/11-序列.md"}'),e={name:"mds/3-🪂开发软件/1-数据库/2-Oracle/11-序列.md"};function n(h,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="序列" tabindex="-1">序列 <a class="header-anchor" href="#序列" aria-label="Permalink to &quot;序列&quot;">​</a></h1><ul><li>序列实际上就是一组有规律且不重复的值.</li><li>一般将序列用作ID编号.</li><li>序列(SEQUENCE)是序列号生成器，可以为表中的行自动生成序列号，产生一组等间隔的数值(类型为数字)。不占用磁盘空间，占用内存。</li><li>其主要用途是生成表的主键值，可以在插入语句中引用，也可以通过查询检查当前值，或使序列增至下一个值。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sequence</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t1_seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> increment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> start</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="创建序列" tabindex="-1">创建序列 <a class="header-anchor" href="#创建序列" aria-label="Permalink to &quot;创建序列&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SEQUENCE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 序列名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">　　[INCREMENT BY n]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">　　[START WITH n]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">　　[{MAXVALUE/ MINVALUE n| NOMAXVALUE}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">　　[{CYCLE|NOCYCLE}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">　　[{CACHE n| NOCACHE}];</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>increment by</td><td>步长，默认为1</td></tr><tr><td>start with</td><td>起始值，默认为1</td></tr><tr><td>maxvalue</td><td>最大值，递减序列默认为-1，递增序列默认为10^27</td></tr><tr><td>minvalue</td><td>最小值，递减序列默认为1，递增序列默认为10^27</td></tr></tbody></table><ol><li><p>INCREMENT BY用于定义序列的步长，如果省略，则默认为1，如果出现负值，则代表Oracle序列的值是按照此步长递减的。</p></li><li><p>START WITH 定义序列的初始值(即产生的第一个值)，默认为1。</p></li><li><p>MAXVALUE 定义序列生成器能产生的最大值。选项NOMAXVALUE是默认选项，代表没有最大值定义，这时对于递增Oracle序列，系统能够产生的最大值是10的27次方;对于递减序列，最大值是-1。</p></li><li><p>MINVALUE定义序列生成器能产生的最小值。选项NOMAXVALUE是默认选项，代表没有最小值定义，这时对于递减序列，系统能够产生的最小值是?10的26次方;对于递增序列，最小值是1。</p></li><li><p>CYCLE和NOCYCLE 表示当序列生成器的值达到限制值后是否循环。CYCLE代表循环，NOCYCLE代表不循环。如果循环，则当递增序列达到最大值时，循环到最小值;对于递减序列达到最小值时，循环到最大值。如果不循环，达到限制值后，继续产生新值就会发生错误。</p></li><li><p>CACHE(缓冲)定义存放序列的内存块的大小，默认为20。NOCACHE表示不对序列进行内存缓冲。对序列进行内存缓冲，可以改善序列的性能。</p><p>大量语句发生请求，申请序列时，为了避免序列在运用层实现序列而引起的性能瓶颈。Oracle序列允许将序列提前生成 cache x个先存入内存，在发生大量申请序列语句时，可直接到运行最快的内存中去得到序列。但cache个数也不能设置太大，因为在数据库重启时，会清空内存信息，预存在内存中的序列会丢失，当数据库再次启动后，序列从上次内存中最大的序列号+1 开始存入cache x个。这种情况也能会在数据库关闭时也会导致序号不连续。</p></li><li><p>NEXTVAL 返回序列中下一个有效的值，任何用户都可以引用。</p></li><li><p>CURRVAL 中存放序列的当前值,NEXTVAL 应在 CURRVAL 之前指定 ，二者应同时有效。</p></li></ol><h2 id="使用序列" tabindex="-1">使用序列 <a class="header-anchor" href="#使用序列" aria-label="Permalink to &quot;使用序列&quot;">​</a></h2><ul><li><p>可以使用dual虚表对序列的值进行查看和更新</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 序列名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nextval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dual;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 序列名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">currval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dual;</span></span></code></pre></div></li></ul><table tabindex="0"><thead><tr><th>语句</th><th>意义</th></tr></thead><tbody><tr><td>nextval</td><td>下一个有效值</td></tr><tr><td>currval</td><td>当前序列值</td></tr></tbody></table><h2 id="修改序列" tabindex="-1">修改序列 <a class="header-anchor" href="#修改序列" aria-label="Permalink to &quot;修改序列&quot;">​</a></h2><ol><li>必须是序列的拥有者或对序列有 ALTER any sequence权限</li><li>只有将来的序列值会被改变</li><li>改变序列的初始值只能通过删除序列之后重建序列的方法实现</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SEQUENCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emp_sequence INCREMENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MAXVALUE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CYCLE </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 到10000后从头开始 NOCACHE ;</span></span></code></pre></div><p>可以影响Sequence的初始化参数：</p><p><code>SEQUENCE_CACHE_ENTRIES</code>：设置能同时被cache的sequence数目。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t1_seq increment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxvalue </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cycle;</span></span></code></pre></div><h2 id="查询序列" tabindex="-1">查询序列 <a class="header-anchor" href="#查询序列" aria-label="Permalink to &quot;查询序列&quot;">​</a></h2><ol><li>通过数据字典USER_OBJECTS可以查看用户拥有的序列。</li><li>通过数据字典USER_SEQUENCES可以查看序列的设置。</li></ol><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--查看用户的序列：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SEQUENCE_NAME,MIN_VALUE,MAX_VALUE,INCREMENT_BY,LAST_NUMBER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USER_SEQUENCES;</span></span></code></pre></div><h2 id="删除序列" tabindex="-1">删除序列 <a class="header-anchor" href="#删除序列" aria-label="Permalink to &quot;删除序列&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 序列名;</span></span></code></pre></div>`,21)]))}const o=i(e,[["render",n]]);export{c as __pageData,o as default};
