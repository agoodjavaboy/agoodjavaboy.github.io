import{_ as s,c as i,o as e,aF as a}from"./chunks/framework.CvyoTX4A.js";const c=JSON.parse('{"title":"请求与响应","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/4-请求与响应.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/4-请求与响应.md"}'),d={name:"mds/1-👾后端开发/1-Java/2-Java Web/4-请求与响应.md"};function n(r,t,l,h,o,p){return e(),i("div",null,t[0]||(t[0]=[a(`<h1 id="请求与响应" tabindex="-1">请求与响应 <a class="header-anchor" href="#请求与响应" aria-label="Permalink to &quot;请求与响应&quot;">​</a></h1><blockquote><p>URL：统一资源定位符，其实就是协议名+IP地址+端口号+项目名+请求路径。</p><p>URI：项目名+请求路径。</p><p>两者都不包含字符串拼接的内容。</p></blockquote><h2 id="servlet处理机制" tabindex="-1">Servlet处理机制 <a class="header-anchor" href="#servlet处理机制" aria-label="Permalink to &quot;Servlet处理机制&quot;">​</a></h2><ul><li>服务器接收到请求内容后，会将请求的内容封装到一个对象中，然后调用Servlet的方法。这个方法可能是doget/dopost/service，然后以参数的形式发送到方法中供使用。</li><li>服务器响应内容的权利及操作也会封装成对象，传入方法供使用。</li></ul><blockquote><p>请求（request）：浏览器或者其他客户端向服务器发送内容这个操作。</p><p>响应（response）：服务器根据请求的内容进行处理后返回的结果。</p><p>服务器不可能自动的发送响应，必须由客户端发送请求后相应的发送响应。</p></blockquote><ul><li><p>如果使用Servlet接口或者GenericServlet类，只能使用service方法。因为他们都是独立于协议的，所有的协议都能处理。</p><p>使用以上两个方式创建的自定义Servlet类中的service方法中，ServletRequest中封装着请求的内容，ServletResponse封装着响应的操作。</p></li><li><p>如果使用的是HttpServlet类，那就可以使用doget/dopost/service方法，因为get和post请求方式只有HTTP请求才会有。</p><p>在使用HttpServlet创建的Servlet类中的多个方法中，HttpServletRequest中封装着请求的内容，HttpServletResponse封装着响应的操作。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestServlert2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// TODO Auto-generated method stub</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg0, arg1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// TODO Auto-generated method stub</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, resp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// TODO Auto-generated method stub</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doPost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(req, resp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="请求可以取什么" tabindex="-1">请求可以取什么 <a class="header-anchor" href="#请求可以取什么" aria-label="Permalink to &quot;请求可以取什么&quot;">​</a></h2><h3 id="servletrequest" tabindex="-1">ServletRequest <a class="header-anchor" href="#servletrequest" aria-label="Permalink to &quot;ServletRequest&quot;">​</a></h3><ul><li>ServletRequest定义向servlet提供客户端请求信息的对象。servlet容器创建一个ServletRequest对象，并将其作为参数传递给servlet的服务方法。</li><li>ServletRequest对象提供的数据包括参数名称和值、属性和输入流。扩展ServletRequest的接口可以提供额外的特定于协议的数据(例如，HTTP数据由HttpServletRequest提供)。</li></ul><table tabindex="0"><thead><tr><th>Method Summary</th><th></th></tr></thead><tbody><tr><td><code>AsyncContext</code></td><td><code>getAsyncContext()</code><br>获取此请求上最近一次调用<code>startAsync()</code>或<code>startAsync(ServletRequest,ServletResponse)</code>时创建或重新初始化的AsyncContext。</td></tr><tr><td><code>java.lang.Object</code></td><td><code>getAttribute(java.lang.String name)</code><br>以“Object”的形式返回指定属性的值，如果不存在给定名称的属性，则返回“null”。</td></tr><tr><td><code>java.util.Enumeration&lt;java.lang.String&gt;</code></td><td><code>getAttributeNames()</code><br>返回一个“枚举”，其中包含此请求可用的属性的名称。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getCharacterEncoding()</code><br>返回此请求正文中使用的字符编码的名称。</td></tr><tr><td><code>int</code></td><td><code>getContentLength()</code><br>返回请求体的长度(以字节为单位)，并由输入流提供;如果长度未知，则返回-1。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getContentType()</code><br>返回请求主体的MIME类型，如果类型未知，则返回“null”。</td></tr><tr><td><code>DispatcherType</code></td><td><code>getDispatcherType()</code><br>获取此请求的调度程序类型。</td></tr><tr><td><code>ServletInputStream</code></td><td><code>getInputStream()</code><br>使用‘ServletInputStream’检索请求体作为二进制数据。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getLocalAddr()</code><br>返回接收请求的接口的Internet协议(IP)地址。</td></tr><tr><td><code>java.util.Locale</code></td><td><code>getLocale()</code><br>根据accept - language头返回客户机将接受的内容的首选“Locale”。</td></tr><tr><td><code>java.util.Enumeration&lt;java.util.Locale&gt;</code></td><td><code>getLocales()</code><br>返回&#39; Locale &#39;对象的&#39;枚举&#39;，根据Accept-Language标头指示客户端可接受的Locale(以首选Locale开始按降序排列)。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getLocalName()</code><br>返回接收请求的Internet协议(IP)接口的主机名。</td></tr><tr><td><code>int</code></td><td><code>getLocalPort()</code><br>返回接收请求的接口的Internet协议(IP)端口号。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getParameter(java.lang.String name)</code><br>以“String”的形式返回请求参数的值，如果该参数不存在，则返回“null”。</td></tr><tr><td><code>java.util.Map&lt;java.lang.String,java.lang.String[]&gt;</code></td><td><code>getParameterMap()</code><br>返回一个java.util。映射此请求的参数。</td></tr><tr><td><code>java.util.Enumeration&lt;java.lang.String&gt;</code></td><td><code>getParameterNames()</code><br>返回&#39; String &#39;对象的&#39;枚举&#39;，其中包含此请求中包含的参数的名称。</td></tr><tr><td><code>java.lang.String[]</code></td><td><code>getParameterValues(java.lang.String name)</code><br>返回一个“String”对象数组，其中包含给定请求参数的所有值，如果该参数不存在，则返回“null”。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getProtocol()</code><br>在表单protocol/majorVersion中返回请求使用的协议的名称和版本。minorVersion，例如，HTTP/1.1。</td></tr><tr><td><code>java.io.BufferedReader</code></td><td><code>getReader()</code><br>使用&#39; BufferedReader &#39;检索请求体作为字符数据。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getRemoteAddr()</code><br>返回发送请求的客户端或最后一个代理的Internet协议(IP)地址。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getRemoteHost()</code> <br>返回发送请求的客户端或最后一个代理的完全限定名。</td></tr><tr><td><code>int</code></td><td><code>getRemotePort()</code><br>返回发送请求的客户端或最后一个代理的Internet协议(IP)源端口。</td></tr><tr><td><code>RequestDispatcher</code></td><td><code>getRequestDispatcher(java.lang.String path)</code> <br>返回一个&#39; RequestDispatcher &#39;对象，它充当位于给定路径上的资源的包装器。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getScheme()</code><br>返回用于发出此请求的方案的名称，例如&#39; http &#39;、&#39; https &#39;或&#39; ftp &#39;。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getServerName()</code><br>返回发送请求的服务器的主机名。</td></tr><tr><td><code>int</code></td><td><code>getServerPort()</code><br>返回发送请求的端口号。</td></tr><tr><td><code>ServletContext</code></td><td><code>getServletContext()</code><br>获取servlet上下文，该servlet上下文是此ServletRequest最后一次被调度到的地方。</td></tr><tr><td><code>boolean</code></td><td><code>isAsyncStarted()</code><br>检查此请求是否已进入异步模式。</td></tr><tr><td><code>boolean</code></td><td><code>isAsyncSupported()</code><br>检查此请求是否支持异步操作。</td></tr><tr><td><code>boolean</code></td><td><code>isSecure()</code><br>返回一个布尔值，指示此请求是否使用安全通道(如HTTPS)发出。</td></tr><tr><td><code>void</code></td><td><code>removeAttribute(java.lang.String name)</code><br>从该请求中删除一个属性。</td></tr><tr><td><code>void</code></td><td><code>setAttribute(java.lang.String name, java.lang.Object o)</code><br>在此请求中存储属性。</td></tr><tr><td><code>void</code></td><td><code>setCharacterEncoding(java.lang.String env)</code><br>重写此请求正文中使用的字符编码的名称。</td></tr><tr><td><code>AsyncContext</code></td><td><code>startAsync()</code><br>将此请求放入异步模式，并使用原始(未包装的)ServletRequest和ServletResponse对象初始化其AsyncContext。</td></tr><tr><td><code>AsyncContext</code></td><td><code>startAsync(ServletRequest servletRequest, ServletResponse servletResponse)</code><br>将此请求放入异步模式，并使用给定的请求和响应对象初始化其“AsyncContext”。</td></tr></tbody></table><h3 id="httpservletrequest" tabindex="-1">HttpServletRequest <a class="header-anchor" href="#httpservletrequest" aria-label="Permalink to &quot;HttpServletRequest&quot;">​</a></h3><ul><li><p>HttpServletRequest扩展ServletRequest接口，为HTTP servlet提供请求信息。</p></li><li><p>servlet容器创建一个HttpServletRequest对象，并将其作为参数传递给servlet的服务方法(doGet、doPost等)。</p></li></ul><table tabindex="0"><thead><tr><th>方法返回值类型</th><th>作用</th></tr></thead><tbody><tr><td><code>boolean</code></td><td><code>authenticate(HttpServletResponse response)</code><br>使用为“ServletContext”配置的容器登录机制对发出此请求的用户进行身份验证。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getAuthType()</code><br>返回用于保护servlet的身份验证方案的名称。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getContextPath()</code><br>获得项目名。</td></tr><tr><td><code>Cookie[]</code></td><td><code>getCookies()</code><br>返回一个数组，该数组包含客户端随该请求发送的所有&#39; Cookie &#39;对象。</td></tr><tr><td><code>long</code></td><td><code>getDateHeader(java.lang.String name)</code> <br>将指定请求标头的值作为表示日期对象的长值返回。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getHeader(java.lang.String name)</code><br>以字符串的形式返回指定请求头的值。</td></tr><tr><td><code>java.util.Enumeration&lt;java.lang.String&gt;</code></td><td><code>getHeaderNames()</code><br>返回此请求包含的所有标题名称的枚举。</td></tr><tr><td><code>java.util.Enumeration&lt;java.lang.String&gt;</code></td><td><code>getHeaders(java.lang.String name)</code><br>以&#39; String &#39;对象的&#39;枚举&#39;的形式返回指定请求标头的所有值。</td></tr><tr><td><code>int</code></td><td><code>getIntHeader(java.lang.String name)</code><br>以“int”形式返回指定请求标头的值。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getMethod()</code><br>返回发出此请求的HTTP方法的名称，例如GET、POST或PUT。</td></tr><tr><td><code>Part</code></td><td><code>getPart(java.lang.String name)</code><br>获取具有给定名称的“部分”。</td></tr><tr><td><code>java.util.Collection&lt;Part&gt;</code></td><td><code>getParts()</code><br>获取此请求的所有部件组件，前提是其类型为multipart/form-data。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getPathInfo()</code><br>返回与客户端发出此请求时发送的URL相关联的任何额外路径信息。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getPathTranslated()</code><br>返回servlet名称之后但查询字符串之前的任何额外路径信息，并将其转换为实际路径。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getQueryString()</code><br>返回路径后请求URL中问号拼接的字符串。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getRemoteUser()</code><br>如果用户已通过身份验证，则返回发出此请求的用户的登录名;如果用户未通过身份验证，则返回“null”。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getRequestedSessionId()</code><br>返回客户端指定的会话ID。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getRequestURI()</code><br>获得请求路径中项目名+请求名的部分</td></tr><tr><td><code>java.lang.StringBuffer</code></td><td><code>getRequestURL()</code><br>获得浏览器在访问此Servlet时地址栏填写的内容</td></tr><tr><td><code>java.lang.String</code></td><td><code>getServletPath()</code><br>此Servlet类的路径映射名</td></tr><tr><td><code>HttpSession</code></td><td><code>getSession()</code><br>返回与此请求关联的当前会话，或者如果该请求没有会话，则创建一个会话。</td></tr><tr><td><code>HttpSession</code></td><td><code>getSession(boolean create)</code><br>如果当前会话不为空，则返回会话对象，如果create为true则返回一个新的会话对象。</td></tr><tr><td><code>java.security.Principal</code></td><td><code>getUserPrincipal()</code><br>返回一个“java.security。对象，该对象包含当前经过身份验证的用户的名称。</td></tr><tr><td><code>boolean</code></td><td><code>isRequestedSessionIdFromCookie()</code><br>检查请求的会话ID是否以cookie的形式传入。</td></tr><tr><td><code>boolean</code></td><td><code>isRequestedSessionIdFromURL()</code><br>检查请求的会话ID是否作为请求URL的一部分传入。</td></tr><tr><td><code>boolean</code></td><td><code>isRequestedSessionIdValid()</code><br>检查请求的会话ID是否仍然有效。</td></tr><tr><td><code>boolean</code></td><td><code>isUserInRole(java.lang.String role)</code><br>返回一个布尔值，指示已验证的用户是否包含在指定的逻辑“角色”中。</td></tr><tr><td><code>void</code></td><td><code>login(java.lang.String username, java.lang.String password)</code><br>在为“ServletContext”配置的web容器登录机制使用的密码验证域中验证提供的用户名和密码。</td></tr><tr><td><code>void</code></td><td><code>logout()</code><br>在请求调用“getUserPrincipal”、“getRemoteUser”和“getAuthType”时，将“null”作为返回的值。</td></tr></tbody></table><h2 id="响应可以做什么" tabindex="-1">响应可以做什么 <a class="header-anchor" href="#响应可以做什么" aria-label="Permalink to &quot;响应可以做什么&quot;">​</a></h2><h3 id="servletresponse" tabindex="-1">ServletResponse <a class="header-anchor" href="#servletresponse" aria-label="Permalink to &quot;ServletResponse&quot;">​</a></h3><ul><li><p>定义一个对象来帮助servlet向客户端发送响应。</p></li><li><p>服务器创建一个ServletResponse对象，并将其作为参数传递给servlet的service方法。</p></li><li><p>要发送字符数据，请使用getWriter()返回的PrintWriter对象。</p></li><li><p>可以使用setCharacterEncoding(java.lang.String)和setContentType(java.lang.String)方法指定响应内容的字符集和格式。如果没有指定字符集，则使用ISO-8859-1。</p><p>也可以隐式地使用setLocale(java.util.Locale)方法。显式规范优先于隐式规范。如果没有指定字符集，则使用ISO-8859-1。</p></li><li><p>setCharacterEncoding、setContentType或setLocale方法必须在getWriter之前调用，并在提交要使用的字符编码的响应之前调用。</p></li></ul><table tabindex="0"><thead><tr><th>Method Summary</th><th></th></tr></thead><tbody><tr><td><code>void</code></td><td><code>flushBuffer()</code><br>强制将缓冲区中的任何内容写入客户机。“int”</td></tr><tr><td><code>int</code></td><td><code>getBufferSize()</code><br>返回用于响应的实际缓冲区大小。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getCharacterEncoding()</code><br>返回用于在此响应中发送的正文的字符编码(MIME字符集)的名称。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getContentType()</code><br>返回用于在此响应中发送的MIME主体的内容类型。</td></tr><tr><td><code>java.util.Locale</code></td><td><code>getLocale()</code><br>使用setLocale(java.util.Locale)方法返回为此响应指定的语言环境。</td></tr><tr><td><code>ServletOutputStream</code></td><td><code>getOutputStream()</code><br>返回一个适合在响应中写入二进制数据的“ServletOutputStream”。</td></tr><tr><td><code>java.io.PrintWriter</code></td><td><code>getWriter()</code><br>返回一个“PrintWriter”对象，该对象可以将字符文本发送到客户端。</td></tr><tr><td><code>boolean</code></td><td><code>isCommitted()</code><br>返回一个布尔值，指示是否提交了响应。</td></tr><tr><td><code>void</code></td><td><code>reset()</code><br>清除缓冲区中存在的所有数据以及状态代码和标头。</td></tr><tr><td><code>void</code></td><td><code>resetBuffer()</code><br>清除响应中底层缓冲区的内容，而不清除标题或状态代码。</td></tr><tr><td><code>void</code></td><td><code>setBufferSize(int size)</code><br>设置响应主体的首选缓冲区大小。</td></tr><tr><td><code>void</code></td><td><code>setCharacterEncoding(java.lang.String charset)</code><br>设置发送到客户端(例如UTF-8)的响应的字符编码(MIME字符集)。</td></tr><tr><td><code>void</code></td><td><code>setContentLength(int len)</code><br>在HTTP servlet的响应中设置内容体的长度，此方法设置HTTP内容长度报头。</td></tr><tr><td><code>void</code></td><td><code>setContentType(java.lang.String type)</code><br>如果尚未提交响应，则设置发送到客户机的响应的内容类型。</td></tr><tr><td><code>void</code></td><td><code>setLocale(java.util.Locale loc)</code><br>如果尚未提交响应，则设置响应的区域设置。</td></tr></tbody></table><h3 id="httpservletresponse" tabindex="-1">HttpServletResponse <a class="header-anchor" href="#httpservletresponse" aria-label="Permalink to &quot;HttpServletResponse&quot;">​</a></h3><ul><li><p>扩展ServletResponse接口，在发送响应时提供特定于http的功能。例如，它有访问HTTP头文件和cookie的方法。</p></li><li><p>servlet容器创建一个HttpServletResponse对象，并将其作为参数传递给servlet的服务方法(doGet、doPost等)。</p></li></ul><table tabindex="0"><thead><tr><th>方法返回值类型</th><th>方法描述</th></tr></thead><tbody><tr><td><code>void</code></td><td><code>addCookie(Cookie cookie)</code><br>将指定的cookie添加到响应中。</td></tr><tr><td><code>void</code></td><td><code>addDateHeader(java.lang.String name, long date)</code><br>添加具有给定名称和日期值的响应标头。</td></tr><tr><td><code>void</code></td><td><code>addHeader(java.lang.String name, java.lang.String value)</code><br>添加具有给定名称和值的响应标头。</td></tr><tr><td><code>void</code></td><td><code>addIntHeader(java.lang.String name, int value)</code><br>添加具有给定名称和整数值的响应标头。</td></tr><tr><td><code>boolean</code></td><td><code>containsHeader(java.lang.String name)</code><br>返回一个布尔值，指示是否已经设置了指定的响应标头。</td></tr><tr><td><code>java.lang.String</code></td><td><code>encodeRedirectURL(java.lang.String url)</code><br>对指定的URL进行编码，以便在sendRedirect方法中使用，或者，如果不需要编码，则返回不变的URL。</td></tr><tr><td><code>java.lang.String</code></td><td><code>encodeURL(java.lang.String url)</code><br>通过在指定的URL中包含会话ID来对其进行编码，或者，如果不需要进行编码，则返回不变的URL。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getHeader(java.lang.String name)</code><br>获取具有给定名称的响应标头的值。</td></tr><tr><td><code>java.util.Collection&lt;java.lang.String&gt;</code></td><td><code>getHeaderNames()</code><br>获取此响应的标题的名称。</td></tr><tr><td><code>java.util.Collection&lt;java.lang.String&gt;</code></td><td><code>getHeaders(java.lang.String name)</code><br>获取具有给定名称的响应标头的值。</td></tr><tr><td><code>int</code></td><td><code>getStatus()</code><br>获取此响应的当前状态代码。</td></tr><tr><td><code>void</code></td><td><code>sendError(int sc)</code><br>使用指定的状态码向客户端发送错误响应并清除缓冲区。</td></tr><tr><td><code>void</code></td><td><code>sendError(int sc, java.lang.String msg)</code><br>使用指定的状态向客户端发送错误响应并清除缓冲区。</td></tr><tr><td><code>void</code></td><td><code>sendRedirect(java.lang.String location)</code><br>使用指定的重定向位置URL向客户端发送临时重定向响应并清除缓冲区。</td></tr><tr><td><code>void</code></td><td><code>setDateHeader(java.lang.String name, long date)</code><br>使用给定的名称和日期值设置响应标头。</td></tr><tr><td><code>void</code></td><td><code>setHeader(java.lang.String name, java.lang.String value)</code><br>设置具有给定名称和值的响应标头。</td></tr><tr><td><code>void</code></td><td><code>setIntHeader(java.lang.String name, int value)</code><br>设置具有给定名称和整数值的响应标头。</td></tr><tr><td><code>void</code></td><td><code>setStatus(int sc)</code><br>设置此响应的状态码。</td></tr></tbody></table><h4 id="响应状态码" tabindex="-1">响应状态码 <a class="header-anchor" href="#响应状态码" aria-label="Permalink to &quot;响应状态码&quot;">​</a></h4><table tabindex="0"><thead><tr><th>属性类型</th><th>属性名及描述</th></tr></thead><tbody><tr><td><code>static int</code></td><td>SC_ACCEPTED状态码(202)，表示一个请求已被接受处理，但尚未完成。</td></tr><tr><td><code>static int</code></td><td>SC_BAD_GATEWAY状态码(502)，表示HTTP服务器在充当代理或网关时从其咨询的服务器接收到无效响应。</td></tr><tr><td><code>static int</code></td><td>SC_BAD_REQUEST状态码(400)表示客户端发送的请求在语法上不正确。</td></tr><tr><td><code>static int</code></td><td>SC_CONFLICT状态码(409)，指示由于与资源的当前状态发生冲突，请求无法完成。</td></tr><tr><td><code>static int</code></td><td>SC_CONTINUE状态码(100)，指示客户端可以继续。</td></tr><tr><td><code>static int</code></td><td>SC_CREATED状态码(201)表示请求成功并在服务器上创建了一个新资源。</td></tr><tr><td><code>static int</code></td><td>SC_EXPECTATION_FAILED状态码(417)，表示服务器不能满足Expect请求头中给出的期望。</td></tr><tr><td><code>static int</code></td><td>SC_FORBIDDEN状态码(403)，表示服务器理解请求，但拒绝执行请求。</td></tr><tr><td><code>static int</code></td><td>SC_FOUND状态码(302)，表示资源暂时驻留在一个不同的URI下。</td></tr><tr><td><code>static int</code></td><td>SC_GATEWAY_TIMEOUT状态码(504)，表示服务器在充当网关或代理时没有及时收到来自上游服务器的响应。</td></tr><tr><td><code>static int</code></td><td>SC_GONE状态码(410)，表示该资源在服务器上不再可用，且没有已知的转发地址。</td></tr><tr><td><code>static int</code></td><td>SC_HTTP_VERSION_NOT_SUPPORTED 状态码(505)，表示服务器不支持或拒绝支持请求消息中使用的HTTP协议版本。</td></tr><tr><td><code>static int</code></td><td>SC_INTERNAL_SERVER_ERROR状态码(500)，指示HTTP服务器内部的一个错误，阻止它完成请求。</td></tr><tr><td><code>static int</code></td><td>SC_LENGTH_REQUIRED状态码(411)，表示没有定义的“Content-Length”就不能处理请求。</td></tr><tr><td><code>static int</code></td><td>SC_METHOD_NOT_ALLOWED状态码(405)，表示不允许“request- uri ”标识的资源使用“request-uri”中指定的方法。</td></tr><tr><td><code>static int</code></td><td>SC_MOVED_PERMANENTLY状态码(301)，表示资源已经永久地移动到一个新位置，并且未来的引用应该使用一个新的URI来处理它们的请求。</td></tr><tr><td><code>static int</code></td><td>SC_MOVED_TEMPORARILY状态码(302)，表示资源已经临时移动到另一个位置，但是未来的引用仍然应该使用原始URI来访问资源。</td></tr><tr><td><code>static int</code></td><td>SC_MULTIPLE_CHOICES状态码(300)，表示请求的资源对应于一组表示中的任意一个，每个表示都有自己的特定位置。</td></tr><tr><td><code>static int</code></td><td>SC_NO_CONTENT 状态码(204)，指示请求成功，但没有新信息返回。</td></tr><tr><td><code>static int</code></td><td>SC_NON_AUTHORITATIVE_INFORMATION状态码(203)，表示客户端提供的元信息不是来自服务器。</td></tr><tr><td><code>static int</code></td><td>SC_NOT_ACCEPTABLE状态码(406)，表示请求标识的资源只能根据请求中发送的accept头生成内容特征不可接受的响应实体。</td></tr><tr><td><code>static int</code></td><td>SC_NOT_FOUND状态码(404)，指示所请求的资源不可用。</td></tr><tr><td><code>static int</code></td><td>SC_NOT_IMPLEMENTED状态代码(501)，指示HTTP服务器不支持满足请求所需的功能。</td></tr><tr><td><code>static int</code></td><td>SC_NOT_MODIFIED状态码(304)，指示条件GET操作发现资源可用且未修改。</td></tr><tr><td><code>static int</code></td><td>SC_OK状态码(200)，指示请求正常成功。</td></tr><tr><td><code>static int</code></td><td>SC_PARTIAL_CONTENT状态码(206)，表示服务器已经完成了对资源的部分GET请求。</td></tr><tr><td><code>static int</code></td><td>SC_PAYMENT_REQUIRED状态代码(402)保留供将来使用。</td></tr><tr><td><code>static int</code></td><td>SC_PRECONDITION_FAILED状态码(412)，表示在服务器上测试时，一个或多个请求头字段中给定的前提条件被赋值为false。</td></tr><tr><td><code>static int</code></td><td>SC_PROXY_AUTHENTICATION_REQUIRED状态码(407)，指示客户端必须首先使用代理对自己进行身份验证。</td></tr><tr><td><code>static int</code></td><td>SC_REQUEST_ENTITY_TOO_LARGE状态码(413)，表示服务器拒绝处理请求，因为请求实体比服务器愿意或能够处理的大。</td></tr><tr><td><code>static int</code></td><td>SC_REQUEST_TIMEOUT状态码(408)，表明客户端在服务器准备等待的时间内没有产生请求。</td></tr><tr><td><code>static int</code></td><td>SC_REQUEST_URI_TOO_LONG状态码(414)，表示服务器拒绝服务请求，因为“* request - uri *”比服务器愿意解释的长。</td></tr><tr><td><code>static int</code></td><td>SC_REQUESTED_RANGE_NOT_SATISFIABLE状态码(416)，表示服务器不能满足请求的字节范围。</td></tr><tr><td><code>static int</code></td><td>SC_RESET_CONTENT状态码(205)指示代理应该重置导致发送请求的文档视图。</td></tr><tr><td><code>static int</code></td><td>SC_SEE_OTHER状态码(303)，表示可以在不同的URI下找到对请求的响应。</td></tr><tr><td><code>static int</code></td><td>SC_SERVICE_UNAVAILABLE状态码(503)，表示HTTP服务器暂时超载，无法处理请求。</td></tr><tr><td><code>static int</code></td><td>SC_SWITCHING_PROTOCOLS状态码(101)，指示服务器正在根据升级报头切换协议。</td></tr><tr><td><code>static int</code></td><td>SC_TEMPORARY_REDIRECT状态码(307)，表示请求的资源暂时驻留在一个不同的URI下。</td></tr><tr><td><code>static int</code></td><td>SC_UNAUTHORIZED状态码(401)，指示请求需要HTTP身份验证。</td></tr><tr><td><code>static int</code></td><td>SC_UNSUPPORTED_MEDIA_TYPE状态码(415)，表示服务器拒绝为请求提供服务，因为请求的实体所使用的格式是被请求的资源所不支持的。</td></tr><tr><td><code>static int</code></td><td>SC_USE_PROXY状态码(305)，指示必须通过&#39; Location &#39;字段提供的代理访问所请求的资源*。</td></tr></tbody></table><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;loginTest&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TestLoginServlet.do&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	用户名：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	密码：&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WebServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">urlPatterns</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/TestLoginServlet.do&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestLoginServlet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpServletResponse </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCharacterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//规定请求中的字符编码格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//接收两个请求中的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		String name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		String pass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//做模拟登录操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		String msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;小明&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;span style=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">color:red;font-size:20px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;登录成功！&lt;/span&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;span style=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">color:green;font-size:20px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;登录失败！&lt;/span&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCharacterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置响应内容编码格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置响应内容类型：基于文本的HTML格式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		PrintWriter pw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获得一个可以向浏览器发送数据的流</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		pw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//开始向浏览器发送内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//write是个流，要刷新并关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		pw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		pw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,26)]))}const E=s(d,[["render",n]]);export{c as __pageData,E as default};
