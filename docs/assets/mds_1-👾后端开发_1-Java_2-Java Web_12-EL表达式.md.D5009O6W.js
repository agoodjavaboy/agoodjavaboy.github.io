import{_ as t,c as l,o as n,aF as a,j as s}from"./chunks/framework.CvyoTX4A.js";const c=JSON.parse('{"title":"EL表达式","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/12-EL表达式.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/12-EL表达式.md"}'),e={name:"mds/1-👾后端开发/1-Java/2-Java Web/12-EL表达式.md"};function p(h,i,k,o,E,d){return n(),l("div",null,i[0]||(i[0]=[a(`<h1 id="el表达式" tabindex="-1">EL表达式 <a class="header-anchor" href="#el表达式" aria-label="Permalink to &quot;EL表达式&quot;">​</a></h1><h2 id="el是什么" tabindex="-1">EL是什么 <a class="header-anchor" href="#el是什么" aria-label="Permalink to &quot;EL是什么&quot;">​</a></h2><ul><li><p>EL（Expression Language） 是为了使JSP写起来更简单更灵活的一种新语法。</p></li><li><p>EL表达式的基本语法是：<code>\${...}</code>，来构成EL表达式。</p></li><li><p>在JSP文件中可以直接书写EL表达式，在进行编译的时候将编译成相应的java代码。</p></li><li><p>要想在JSP文件中书写EL表达式，则要使JSP文件不得忽略EL表达式。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page isELIgnored=&quot;false&quot; %&gt;</span></span></code></pre></div><blockquote><p>true表示忽略EL表达式，默认就是不忽略状态。</p></blockquote></li></ul><h2 id="el表达式可以做什么" tabindex="-1">EL表达式可以做什么 <a class="header-anchor" href="#el表达式可以做什么" aria-label="Permalink to &quot;EL表达式可以做什么&quot;">​</a></h2><h3 id="作用域取值" tabindex="-1">作用域取值 <a class="header-anchor" href="#作用域取值" aria-label="Permalink to &quot;作用域取值&quot;">​</a></h3><ul><li><p>EL表达式可以快捷在JSP页面进行作用域取值。</p></li><li><p>在EL表达式的大括号中书写key值，即可获得value值。</p></li><li><p>如果多个作用域同时存在同key的键值对，EL表达式会从生命周期较小的作用域开始找，这很类似pageContext的findAttribute方法。</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    application.setAttribute(&quot;name&quot;, &quot;application&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    session.setAttribute(&quot;name&quot;, &quot;hello&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${ name }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 获得hello，因为session的生命周期小于context/application --&gt;</span></span></code></pre></div><h3 id="进行数学运算" tabindex="-1">进行数学运算 <a class="header-anchor" href="#进行数学运算" aria-label="Permalink to &quot;进行数学运算&quot;">​</a></h3><ul><li><p>可以从作用域中取值然后直接运算，或者直接把表达式写在EL中进行运算。</p></li><li><p>字符串的比较使用 == 号，而不是equals方法。</p></li><li><p>只能使用简单的基本数学运算，以及比较运算和逻辑运算。</p><blockquote><p>数学运算：+ - * /</p><p>比较运算：&gt; &lt; &gt;= &lt;= ==</p><p>逻辑运算：&amp;&amp; || ！</p></blockquote></li><li><p>EL中的除法将获得一个小数，并不像java中的整除。</p></li><li><p>可以使用小括号规定计算优先级。</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	application.setAttribute(&quot;name&quot;, 10);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${name+ 10} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 将获得20 --&gt;</span></span></code></pre></div><h3 id="判断为空" tabindex="-1">判断为空 <a class="header-anchor" href="#判断为空" aria-label="Permalink to &quot;判断为空&quot;">​</a></h3><ul><li>可以使用EL表达式判断所有的作用域中，指定的key是否有值，没有值就是null值。</li><li>这是一个判断，将返回布尔类型的结果。</li><li>判断为空的用法为：<code>\${empty key}</code>，如果key的value不为null，返回false。反之亦反。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	application.setAttribute(&quot;name&quot;, 10);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${!empty aaa}	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 获得true，因为没有value与key aaa对应 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${!empty name}	</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 获得false，因为上文已经对name进行value赋值了 --&gt;</span></span></code></pre></div><h3 id="获得请求的内容" tabindex="-1">获得请求的内容 <a class="header-anchor" href="#获得请求的内容" aria-label="Permalink to &quot;获得请求的内容&quot;">​</a></h3><ul><li>请求就是表单提交，或者超链接访问，或者地址栏访问。只有这三种方式。</li><li>获得请求中的内容，语法为：<code>\${param.key}</code>，将获得请求中key所对应的value。</li><li>无论是get方式还是post方式都可以取到值。</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 发送请求所用的表单，可调节请求方式 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyJsp.jsp&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;post&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloEL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在目标页MyJsp.jsp中使用EL表达式进行取值 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${param.name}</span></span></code></pre></div><h3 id="取出指定作用域中的值" tabindex="-1">取出指定作用域中的值 <a class="header-anchor" href="#取出指定作用域中的值" aria-label="Permalink to &quot;取出指定作用域中的值&quot;">​</a></h3><ul><li>在常规使用EL表达式在作用域中取值的时候，都是从生命周期短到长的顺序寻找。如果多个作用域存在同名的key，则取出最小作用域中的value值。</li><li>还可以通过EL表达式中，指定作用域的方式在特定的作用域中进行取值。</li></ul>`,18),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"意义"),s("th",null,"语法"),s("th",null,"与java代码比较")])]),s("tbody",null,[s("tr",null,[s("td",null,"在page作用域中取出pn的值"),s("td",{"pageScope.pn":""},"$"),s("td",null,'pageContext.getAttribute("pn")')]),s("tr",null,[s("td",null,"在request作用域中取出rn的值"),s("td",{"requestScope.":"",rn:""},"$"),s("td",null,'request.getAttribute("rn")')]),s("tr",null,[s("td",null,"在session作用域中取出sn的值"),s("td",{"sessionScope.sn":""},"$"),s("td",null,'session.getAttribute("sn")')]),s("tr",null,[s("td",null,"在application/context作用域中取出an的值"),s("td",{"applicationScope.an":""},"$"),s("td",null,'application.getAttribute("an")')])])],-1),a(`<h3 id="直接操作作用域中的对象" tabindex="-1">直接操作作用域中的对象 <a class="header-anchor" href="#直接操作作用域中的对象" aria-label="Permalink to &quot;直接操作作用域中的对象&quot;">​</a></h3><ul><li><p>所有的作用域中存储的value都是Object类型的，key都是String类型的，所以很可能会在value中存储一个实体类等其他对象。</p></li><li><p>EL表达式可以直接访问对象中的属性和方法，进行修改或者取出。</p></li><li><p>EL表达式在进行取值和赋值的时候，实际调用了get/set方法，那就必须要保证此对象中存在get/set方法。没有这两个方法将取值报错。</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page language=&quot;java&quot; import=&quot;java.util.*,com.xx.bean.*&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    //在作用域中存入一个对象：如果在JSP中使用了外部的对象则要进行导包</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    User u = new User(1,&quot;hello&quot;,&quot;123456&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.setAttribute(&quot;user&quot;, u);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 使用EL表达式取出值 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${user}						</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 自动的调用toString方法输出内容 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 调用对象中的某个属性 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${user.getId()}				</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 通过get方法调用对象中的属性 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${user.setId(10)}			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- set方法同样可用：有返回值就显示返回值，没有返回值就不显示什么 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${user.id}					</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 自动的调用get方法输出内容 --&gt;</span></span></code></pre></div><h3 id="取出cookie" tabindex="-1">取出Cookie <a class="header-anchor" href="#取出cookie" aria-label="Permalink to &quot;取出Cookie&quot;">​</a></h3><ul><li>\${cookie.cookie的name}：取出一个Cookie对象来，里面有一对键值</li><li>\${cookie.cookie的name.name}：取出此cookie的name</li><li>\${cookie.cookie的name.value}：取出此cookie的value值</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 设Cookie的key为hello，value为helloworld。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${cookie.hello}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 根据Cookie的name获得Cookie对象，输出一个地址 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${cookie.hello.name}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 根据Cookie的name，获得Cookie的name，基本没什么用 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${cookie.hello.value}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 根据Cookie的name，获得Cookie的value，输出一个字符串 --&gt;</span></span></code></pre></div><h3 id="数组及集合处理" tabindex="-1">数组及集合处理 <a class="header-anchor" href="#数组及集合处理" aria-label="Permalink to &quot;数组及集合处理&quot;">​</a></h3><ul><li>所有的作用域中存储的value都是Object类型，那就可能会存在数组或者集合。</li><li>在EL表达式中，可以快捷的读出数组或者集合中的内容。</li><li>可以在EL表达式中指定集合的下标进行元素的取出：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    int[] arr = {1,2,3,4};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.setAttribute(&quot;arr&quot;, arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${arr[0]}</span></span></code></pre></div><ul><li>也可以使用下标的方式读出List集合中的内容：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List l = new ArrayList();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    l.add(4);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    l.add(5);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    l.add(6);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    l.add(7);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.setAttribute(&quot;l&quot;, l);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${l[0]}</span></span></code></pre></div><ul><li>可以通过Map集合的key来获得value：</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Map p = new HashMap();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p.put(&quot;a&quot;,&quot;hello&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p.put(&quot;b&quot;,&quot;world&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.setAttribute(&quot;map&quot;, p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${map[&quot;a&quot;]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\${map.a}</span></span></code></pre></div>`,13)]))}const g=t(e,[["render",p]]);export{c as __pageData,g as default};
