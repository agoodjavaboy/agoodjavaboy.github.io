import{_ as i,c as a,o as n,aF as t}from"./chunks/framework.CvyoTX4A.js";const g=JSON.parse('{"title":"单例模式","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/1-Java语言/10-单例模式.md","filePath":"mds/1-👾后端开发/1-Java/1-Java语言/10-单例模式.md"}'),l={name:"mds/1-👾后端开发/1-Java/1-Java语言/10-单例模式.md"};function p(h,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="单例模式" tabindex="-1">单例模式 <a class="header-anchor" href="#单例模式" aria-label="Permalink to &quot;单例模式&quot;">​</a></h1><p>单例也就是单个一个实例，单例模式也就是在程序运行过程中，单例模式设计的类只会出现一个实例。因为创建对象都是要调用构造函数的，所以每一种单例模式的第一步都是将构造函数私有化。</p><p>但是对象的获取还是要提供对外的接口，所以要创建独有的方法供外界获取当前类对象。</p><h2 id="懒汉模式" tabindex="-1">懒汉模式 <a class="header-anchor" href="#懒汉模式" aria-label="Permalink to &quot;懒汉模式&quot;">​</a></h2><p>懒汉模式表示不会提前创建好对象的实例，而是在需要到此类对象时才去创建。</p><ol><li>私有化构造函数，使其在外部无法创建对象。</li><li>提供对外的获得此类对象的接口（getA方法）。</li><li>创建一个静态的全局本类类型属性，之所以是静态的，是因为只会创建一次，只有一个空间。</li><li>为了防备外部直接调用静态的属性而获得此类对象，需要将全局属性私有化。</li><li>在对外的方法中，对静态的属性进行判断，如果此属性没有值，则表示是第一次索要本类对象，创建对象赋值给全局属性。如果此属性不是一个空的，证明不是第一次索要对象，此类对象已经创建过，则将原有的对象的地址返回。</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//懒汉式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A a;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){			</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//==号的作用是判断两个对象的地址是否相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="饿汉模式" tabindex="-1">饿汉模式 <a class="header-anchor" href="#饿汉模式" aria-label="Permalink to &quot;饿汉模式&quot;">​</a></h2><p>在类加载时就创建好类的对象，在需要到实例属性时将已经创建好的实例进行返回。</p><ol><li><p>私有化构造方法，使其在外部无法创建对象。</p></li><li><p>创建一个对外的接口（getB方法），用于获得本类的实例。</p></li><li><p>创建一个私有的静态的本类类型的引用，定义为常量，并赋值为本类的对象。</p><p>在调用“对外接口方法”时，静态的属性就将被赋值为本类的对象。</p></li><li><p>在对外接口方法中，返回静态的本类引用（b）。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//饿汉式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,11)]))}const c=i(l,[["render",p]]);export{g as __pageData,c as default};
