import{_ as a,c as i,o as n,aF as p}from"./chunks/framework.CvyoTX4A.js";const l="/assets/4f57e47c869b444eb06709ad263ddbe8-1652768521564.BIUOC4Bx.png",h="/assets/75ece8c51146437895e6030ebcc46f01-1652768528813.D7n5vo6C.png",t="/assets/8d390bfaf56942f4bb5a4b4c2f1127f6-1652768535541.DhsV-DNY.png",k="/assets/c19540e781df45f3a8550197f4b18253-1652768542912.DHgQuhwh.png",e="/assets/43cb7a33ee2f405ba5fe37e16d2abf58-1652768549373.CHy9f7nD.png",r="/assets/image-20250315000156404.DVeNiSmU.png",u=JSON.parse('{"title":"包与导包","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/1-Java语言/7-包的使用.md","filePath":"mds/1-👾后端开发/1-Java/1-Java语言/7-包的使用.md"}'),d={name:"mds/1-👾后端开发/1-Java/1-Java语言/7-包的使用.md"};function E(c,s,g,y,o,F){return n(),i("div",null,s[0]||(s[0]=[p(`<h1 id="包与导包" tabindex="-1">包与导包 <a class="header-anchor" href="#包与导包" aria-label="Permalink to &quot;包与导包&quot;">​</a></h1><p>Java中的包也就是操作系统中的文件夹，包表示一些Java文件的集合。JDK所提供的程序都存在于各个的包中，并且在实际开发过程中，自定义的每一个Java文件都要存在于一个包里。</p><p>将同一功能或者同一类型的Java文件放到同一文件夹里，加上公开类的特性能够让开发人员在文件系统中就能看到整个系统的全貌，以及所有Java文件的分布和意义。</p><p>此前在进行Java文件编译的时候，Java文件所生成的class文件将放置到Java文件的同级目录下：那是因为环境变量中CLASSPATH变量所配置的位置是一个英文点，也就是程序执行所在命令行所在目录下。并且因为通常会将命令行定位到Java文件所在位置再进行编译，所以生成的class文件就和Java文件放到了一起。采用包声明的方式之后，就可以将class文件指定的放置到某个文件夹中。</p><p>在采用了开发工具之后，开发工具会自动的将class文件系统的编译到独立的文件夹中，以和源代码隔离。</p><h2 id="声明包" tabindex="-1">声明包 <a class="header-anchor" href="#声明包" aria-label="Permalink to &quot;声明包&quot;">​</a></h2><p>包的声明也就是在Java程序中规定当前Java文件所生成的class文件放置到哪里。这与环境变量中的CLASSPATH变量有关，在使用了开发工具之后，将具有规定Java文件存放位置的能力，并且Java所生成的class文件也将由开发工具自动进行管理。</p><p>包的管理可以指定class文件的放置位置，也就能将源代码和字节码文件分离放置。在未来导入其他包的时候，也能够通过其定义的包位置将其导入，因为包定义的是class文件所在位置，那导入的实际上也就是字节码文件。</p><h3 id="定义包位置" tabindex="-1">定义包位置 <a class="header-anchor" href="#定义包位置" aria-label="Permalink to &quot;定义包位置&quot;">​</a></h3><p>包的定义一般放在Java文件的第一行，使用package关键字后加包的名称，在编译时将自动创建包名的文件夹并将class文件放置到里面：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="定义包后的编译" tabindex="-1">定义包后的编译 <a class="header-anchor" href="#定义包后的编译" aria-label="Permalink to &quot;定义包后的编译&quot;">​</a></h3><p>在声明了包之后，编译程序的语句也应该指定包生成位置，否则将无法解释运行字节码文件：<code>java -d . java文件名.java</code>，其中-d的意义也就是指定编译生成的class文件目录，目录将参考Java文件中package的定义，点的意思是当前命令行目录，那class文件包也将从当前目录开始创建。</p><p><img src="`+l+'" alt=""></p><p>采用-d语句生成的class文件将存放到java文件同级目录下的指定文件夹下，前提是将命令行定位到Java文件所在目录：</p><p><img src="'+h+'" alt=""></p><h3 id="定义包后的运行" tabindex="-1">定义包后的运行 <a class="header-anchor" href="#定义包后的运行" aria-label="Permalink to &quot;定义包后的运行&quot;">​</a></h3><p>在存在包结构创建了class文件之后，执行class文件的指令也要有所更改：<code>java 包名.类名</code>，前提是命令行所在路径必须是Java源文件所在路径：</p><p><img src="'+t+`" alt=""></p><p>在包定义的时候，所有的英文点都表示更深层的文件夹，如下图所创建的class文件就将在pac文件夹的chil文件夹中：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac.chil;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="导入包" tabindex="-1">导入包 <a class="header-anchor" href="#导入包" aria-label="Permalink to &quot;导入包&quot;">​</a></h2><p>导入也就是将其他class文件导入到当前Java文件中一起编译，从而能够使用其他class文件中的代码。</p><p>导入的class文件可以是自己编译生成的，或者是Java提供的，或者其他第三方class文件，实际上他们都并没有什么区别。</p><p>导入Java官方提供的class文件，在编译程序时将从类库中通过包路径获取class文件，而并非从当前目录中寻找。</p><p>当需要导入的class文件和当前源文件所生成的class文件处在同一包下时，无需导入可直接使用。</p><h3 id="导入语句" tabindex="-1">导入语句 <a class="header-anchor" href="#导入语句" aria-label="Permalink to &quot;导入语句&quot;">​</a></h3><p>导入语句通常写在package指令的下面，其他所有代码的上面。导入时要书写class文件的全限定名或包的全限定名，全限定名也就是<code>所有包名.类名</code>，最简单的办法也就是在类的package后查看其所处包，后加逗号再加类名。</p><p>以下导入一个Java提供的可支持控制台输入的class文件Scanner：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当前只测试对class的导入，并不学习类的使用方式，所以可以直接编译上面的实例代码查看是否报错，如果报错则表示有语法或单词的错误：</p><p><img src="`+k+'" alt=""></p><p>Java提供的源码包可以看到Scanner在Java类库中所处的位置，源码包存放在JDK安装路径下，名称为src.zip：</p><p><img src="'+e+`" alt=""></p><h3 id="导入的几种方式" tabindex="-1">导入的几种方式 <a class="header-anchor" href="#导入的几种方式" aria-label="Permalink to &quot;导入的几种方式&quot;">​</a></h3><p><strong>单个导入：</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.List;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>全包导入：</strong> 只会导入最后一个包名中所有的class文件，不会级联导入其父包或子包内的class文件。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.io.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>临时导入：</strong> 并不使用import指令，而是在使用时指定<code>包.类</code>，只在当前语句有效。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        java.util.Scanner scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="导入自定义包" tabindex="-1">导入自定义包 <a class="header-anchor" href="#导入自定义包" aria-label="Permalink to &quot;导入自定义包&quot;">​</a></h3><p>对于class来说，只有在使用者与被使用者不在同一包下的时候才需要导包，所以定义包位置的时候要定位到两个包中，但创建两个java文件的时候要在同一文件夹内。</p><p>首先创建被使用者，本章只演示包的导入，所以不写任何执行性代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span></code></pre></div><p>然后创建使用者，将其编译到与被使用者不同的文件夹，并在当前文件中导入使用者：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac.Index;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span></span></code></pre></div><p>现将使用者编译后，再将被使用者进行编译。只要编译成功即表示导入成功。</p><h2 id="关于scanner的练习" tabindex="-1">关于Scanner的练习 <a class="header-anchor" href="#关于scanner的练习" aria-label="Permalink to &quot;关于Scanner的练习&quot;">​</a></h2><p>Scanner的具体使用涉及到面型对象编程的知识，但本章仅学习与包导入和导入的class的使用验证。但仍需认真记住Scanner的使用，将在未来学习过程中使用Scanner测试和开发练习程序。</p><p>在导入类的时候，要知晓以下几个方面：</p><ol><li>这个类是做什么用的：Scanner是用于控制台输入内容扫描的工具，可以将控制台中输入的内容转化为程序中的值。</li><li>这个类在哪里：Scanner由JDK提供，存在于类库的<code>java.util</code>包下。</li><li>这个类要怎么使用：Scanner需要创建对象，并在创建对象的同事监控系统输入内容。通过创建出的Scanner对象执行控制台阻塞指令，并扫描和收集输入的内容。</li></ol><p>以下将书写Scanner导入以及Scanner使用程序：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pac;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.Scanner;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Scanner sc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.in);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建Scanner对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//执行输入方法并将输入的数字（只能是数字）放置到变量a中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出刚刚输入的数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>控制台编译和运行指令如下，在运行程序时命令行将存在闪烁的光标等待用户输入，输入数字并点击回车后展示输入的内容：</p><p><img src="`+r+'" alt="image-20250315000156404"></p>',56)]))}const b=a(d,[["render",E]]);export{u as __pageData,b as default};
