import{_ as n,c as t,o as i,aF as r}from"./chunks/framework.CvyoTX4A.js";const N=JSON.parse('{"title":"C#语言简介","description":"","frontmatter":{},"headers":[],"relativePath":"mds/4-🎮游戏开发/1-语言学习/1-C Sharp 语言/index.md","filePath":"mds/4-🎮游戏开发/1-语言学习/1-C Sharp 语言/index.md"}'),s={name:"mds/4-🎮游戏开发/1-语言学习/1-C Sharp 语言/index.md"};function e(a,o,l,g,C,d){return i(),t("div",null,o[0]||(o[0]=[r('<blockquote><p>本课程整合自：</p><ol><li>菜鸟教程：<a href="https://www.runoob.com/" target="_blank" rel="noreferrer">https://www.runoob.com/</a></li></ol><p>本课程起步要求：熟练JavaSE全部语法与类库，无需对C和C++深度理解</p></blockquote><h1 id="c-语言简介" tabindex="-1">C#语言简介 <a class="header-anchor" href="#c-语言简介" aria-label="Permalink to &quot;C#语言简介&quot;">​</a></h1><p>C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p><p>C# 是由 Anders Hejlsberg 和他的团队在 .Net 框架开发期间开发的。</p><p>C# 是专为公共语言基础结构（CLI）设计的。CLI 由可执行代码和运行时环境组成，允许在不同的计算机平台和体系结构上使用各种高级语言。</p><p>C# 是一门高级编程语言，采用面向对象思想，语法与Java相近，但提供更多快捷灵活的方式，这与Java“做一件事情只有一种代码”的思想略有不同。</p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ol><li><strong>现代的、通用的编程语言</strong>：C# 是一种现代编程语言，设计时考虑了当前软件开发的需求。它结合了多种编程范式的优点，如面向对象编程、泛型编程、函数式编程等。C# 的语法简洁且功能强大，适用于开发各种类型的应用程序，包括桌面应用、Web应用、移动应用和游戏开发。</li><li><strong>面向对象</strong>：C# 是一种纯粹的面向对象编程语言，所有代码都必须在类中定义。这种设计使得代码更易于组织、维护和扩展。面向对象的特性（如封装、继承、多态）使得C# 适合构建复杂的、可重用的软件系统。</li><li><strong>面向组件</strong>：C# 支持面向组件的编程，这意味着开发者可以创建可重用的软件组件，这些组件可以在不同的应用程序中共享和复用。C# 提供了丰富的特性来支持组件化开发，如属性、事件、委托等。</li><li><strong>容易学习</strong>：C# 的语法设计简洁明了，与C、C++和Java等语言有很多相似之处，因此对于有编程经验的开发者来说，学习C# 相对容易。此外，C# 提供了丰富的文档和社区支持，使得初学者能够快速上手。</li><li><strong>结构化语言</strong>：C# 是一种结构化编程语言，支持顺序、选择和循环等基本控制结构。这种结构化的设计使得代码逻辑清晰，易于理解和维护。C# 还支持异常处理、命名空间等高级结构化特性，进一步增强了代码的可读性和可维护性。</li><li><strong>产生高效率的程序</strong>：C# 是一种编译型语言，代码在运行前会被编译成中间语言（IL），然后在.NET运行时（CLR）中被即时编译（JIT）为机器码。这种编译方式使得C# 程序在运行时具有较高的性能。此外，C# 提供了丰富的库和框架支持，使得开发者能够高效地开发出高性能的应用程序。</li><li><strong>可以在多种计算机平台上编译</strong>：C# 最初是为Windows平台设计的，但随着.NET Core的推出，C# 已经成为一个跨平台的语言。开发者可以在Windows、Linux和macOS等多个平台上编写和运行C# 程序。这种跨平台的能力使得C# 的应用范围更加广泛。</li><li><strong>.Net 框架的一部分</strong>：C# 是.NET框架的核心语言之一，与.NET框架紧密集成。.NET框架提供了丰富的类库和运行时环境，使得C# 开发者能够快速构建各种类型的应用程序。C# 与.NET框架的集成使得开发者能够利用框架提供的强大功能，如内存管理、安全性、网络通信等。</li></ol><h2 id="编程功能" tabindex="-1">编程功能 <a class="header-anchor" href="#编程功能" aria-label="Permalink to &quot;编程功能&quot;">​</a></h2><ol><li><strong>布尔条件（Boolean Conditions）</strong>：布尔条件是编程中的基本构建块，几乎所有的程序都需要根据某些条件来做出决策。C# 的布尔条件语法简洁明了，易于理解和使用。</li><li><strong>自动垃圾回收（Automatic Garbage Collection）</strong>：C# 使用自动垃圾回收机制来管理内存。开发者不需要手动释放不再使用的内存，垃圾回收器会自动检测并回收不再使用的对象，从而防止内存泄漏。</li><li><strong>标准库（Standard Library）</strong>：C# 提供了丰富的标准库（即 .NET 类库），涵盖了从基本数据结构到网络通信、文件操作、加密等各个方面。这些库为开发者提供了强大的工具，使得开发过程更加高效。标准库的存在使得开发者不必从头实现许多常见的功能，可以直接使用经过优化和测试的库函数。这不仅提高了开发效率，还增强了代码的可靠性和性能。</li><li><strong>组件版本（Assembly Versioning）</strong>：C# 支持组件版本控制，允许开发者为程序集（Assembly）指定版本号。这使得开发者能够管理不同版本的组件，确保应用程序使用正确的组件版本。组件版本控制对于大型项目和团队开发尤为重要。它帮助开发者管理依赖关系，避免因版本冲突导致的问题，并支持应用程序的平滑升级和维护。</li><li><strong>属性（Properties）和事件（Events）</strong>：属性是C# 中用于封装字段的特殊方法，提供了对字段的访问控制。事件是一种特殊的委托，用于在特定动作发生时通知其他对象。属性和事件使得C# 的面向对象编程更加灵活和强大。属性提供了对字段的安全访问，事件则支持松耦合的事件驱动编程模型，使得对象之间的交互更加清晰和易于管理。</li><li><strong>委托（Delegates）和事件管理（Events Management）</strong>：委托是一种类型安全的函数指针，允许将方法作为参数传递。事件是基于委托的机制，用于在特定条件下触发一系列方法调用。委托和事件管理使得C# 支持回调函数和事件驱动编程。这在GUI编程、异步编程等场景中尤为重要，使得代码更加模块化和可扩展。</li><li><strong>易于使用的泛型（Generics）</strong>：泛型提高了代码的重用性和类型安全性。通过泛型，开发者可以编写更加通用和高效的代码，避免了类型转换和装箱/拆箱操作，从而提高了性能。</li><li><strong>索引器（Indexers）</strong>：索引器允许对象像数组一样通过索引访问。索引器可以定义在类或结构体中，使得对象的访问更加直观和方便。</li><li><strong>条件编译（Conditional Compilation）</strong>：条件编译允许开发者在编译时根据条件包含或排除某些代码。C# 提供了 #if、#else、#endif 等预处理指令来实现条件编译。条件编译使得开发者能够根据不同的编译条件（如调试模式、平台等）生成不同的代码版本。这在跨平台开发和调试中非常有用，使得代码更加灵活和可维护。</li><li><strong>简单的多线程（Multithreading）</strong>：C# 提供了丰富的多线程支持，包括 Thread 类、Task 类、async/await 关键字等，使得开发者能够轻松地编写多线程和异步代码。</li><li><strong>LINQ 和 Lambda 表达式</strong>：LINQ（Language Integrated Query）是一种强大的查询语言，允许开发者在C# 中直接编写查询语句。Lambda 表达式是一种简洁的匿名函数表示法，常用于LINQ查询和委托。LINQ 和 Lambda 表达式使得数据查询和操作更加简洁和直观。通过LINQ，开发者可以使用统一的语法查询各种数据源（如集合、数据库、XML等），而Lambda表达式则提供了简洁的函数表示法，使得代码更加简洁和易读。</li><li><strong>集成 Windows</strong>：C# 与Windows操作系统紧密集成，尤其是在桌面应用程序开发中。C# 提供了丰富的Windows API和框架（如WPF、WinForms）支持，使得开发者能够轻松地构建Windows应用程序。</li></ol><h2 id="net-框架" tabindex="-1">.Net 框架 <a class="header-anchor" href="#net-框架" aria-label="Permalink to &quot;.Net 框架&quot;">​</a></h2><p>.Net 框架是微软开发的一个软件开发平台，支持多种编程语言，并提供了丰富的类库和运行时环境，使得开发者能够构建各种类型的应用程序。</p><p>借助.Net框架，可以编写Windows应用程序、Web应用程序、Web服务。</p><ol><li><strong>公共语言运行库（Common Language Runtime - CLR）</strong>：CLR 是.NET框架的核心组件，负责管理代码的执行。它提供了内存管理、垃圾回收、异常处理、线程管理、安全性等功能。CLR 还负责将中间语言（IL）代码编译成机器码并执行。CLR 使得.NET应用程序具有跨平台能力（通过.NET Core和.NET 5+），并且提供了自动内存管理和安全性检查，减少了常见编程错误（如内存泄漏、空指针异常等）。</li><li><strong>.Net 框架类库（.Net Framework Class Library）</strong>：.NET框架类库是一个庞大的代码库，提供了数千个预定义的类和方法，涵盖了从基本数据结构到网络通信、文件操作、加密等各个方面。这些类库被组织在命名空间中，方便开发者调用。</li><li><strong>公共语言规范（Common Language Specification）</strong>：CLS 是一组规则和约束，定义了.NET兼容语言必须支持的特性。这些规则确保了不同语言编写的代码可以互操作。CLS 使得多种编程语言（如C#、VB.NET、F#等）能够在同一个项目中协同工作，共享代码和库。这增强了.NET框架的灵活性和可扩展性。</li><li><strong>通用类型系统（Common Type System）</strong>：CTS 定义了.NET框架中所有类型的共同特征和行为。它确保了不同语言之间的类型兼容性，使得一种语言定义的类型可以在另一种语言中使用。</li><li><strong>元数据（Metadata）和组件（Assemblies）</strong>：元数据是描述代码中类型、方法、属性等信息的结构化数据。组件（Assemblies）是.NET应用程序的基本部署单元，包含编译后的代码、元数据和资源。元数据使得.NET框架能够在运行时动态地发现和使用类型信息，支持反射和动态加载。组件则简化了应用程序的部署和版本管理。</li><li><strong>Windows 窗体（Windows Forms）</strong>：Windows Forms 是用于构建Windows桌面应用程序的GUI框架。它提供了丰富的控件和事件模型，使得开发者能够快速构建用户界面。</li><li><strong>ASP.Net 和 ASP.Net AJAX</strong>：ASP.NET 是用于构建Web应用程序的框架，支持多种开发模型（如Web Forms、MVC、Web API）。ASP.NET AJAX 提供了对AJAX（异步JavaScript和XML）的支持，使得Web应用程序能够实现无刷新页面更新。</li><li><strong>ADO.Net</strong>：ADO.NET 是用于访问和操作数据库的框架。它提供了对关系数据库的支持，包括连接、命令、数据读取器、数据集等组件。ADO.NET 使得开发者能够高效地访问和操作数据库，支持多种数据库系统（如SQL Server、Oracle、MySQL等）。它提供了强大的数据访问能力，支持事务管理、数据绑定等功能。</li><li><strong>Windows 工作流基础（Windows Workflow Foundation - WF）</strong>：WF 是一个用于构建工作流应用程序的框架。它提供了可视化的工作流设计器和运行时引擎，支持复杂业务流程的建模和执行。</li><li><strong>Windows 显示基础（Windows Presentation Foundation）</strong>：WPF 是用于构建富客户端应用程序的UI框架。它支持XAML（可扩展应用程序标记语言）用于声明式UI设计，提供了丰富的图形、动画和媒体支持。WPF 使得开发者能够创建具有丰富视觉效果和交互体验的桌面应用程序，支持数据绑定、模板、样式等高级UI特性。</li><li><strong>Windows 通信基础（Windows Communication Foundation - WCF）</strong>：WCF 是一个用于构建面向服务应用程序的框架。它支持多种通信协议（如HTTP、TCP、MSMQ等），提供了统一的编程模型，支持安全、可靠的消息传递。WCF 使得开发者能够构建分布式、松耦合的应用程序，支持跨平台、跨语言的通信。它提供了强大的服务配置和管理能力，支持事务、安全、可靠性等高级特性。</li><li><strong>LINQ</strong>：LINQ（Language Integrated Query）是一种集成在C#中的查询语言，允许开发者使用统一的语法查询各种数据源（如集合、数据库、XML等）。</li></ol>',14)]))}const c=n(s,[["render",e]]);export{N as __pageData,c as default};
