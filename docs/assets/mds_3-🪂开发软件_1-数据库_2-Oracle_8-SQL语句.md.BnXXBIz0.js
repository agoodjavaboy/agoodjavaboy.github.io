import{_ as a,c as l,o as e,aF as r}from"./chunks/framework.CvyoTX4A.js";const S=JSON.parse('{"title":"SQL语句","description":"","frontmatter":{},"headers":[],"relativePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/8-SQL语句.md","filePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/8-SQL语句.md"}'),i={name:"mds/3-🪂开发软件/1-数据库/2-Oracle/8-SQL语句.md"};function o(d,t,n,s,u,p){return e(),l("div",null,t[0]||(t[0]=[r('<h1 id="sql语句" tabindex="-1">SQL语句 <a class="header-anchor" href="#sql语句" aria-label="Permalink to &quot;SQL语句&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><ul><li>SQL指结构化查询语言.</li><li>SQL使我们有能力访问数据库.</li><li>SQL是一种ANSI(美国国家标准化组织)的标准计算机语言.</li></ul><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><ul><li>SQL 面向数据库执行查询</li><li>SQL 可从数据库取回数据</li><li>SQL 可在数据库中插入新的记录</li><li>SQL 可更新数据库中的数据</li><li>SQL 可从数据库删除记录</li><li>SQL 可创建新数据库</li><li>SQL 可在数据库中创建新表</li><li>SQL 可在数据库中创建存储过程</li><li>SQL 可在数据库中创建视图</li><li>SQL 可以设置表、存储过程和视图的权限</li></ul><h2 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h2><ul><li><p>SQL语句中的关键字和单词不区分大小写,但是字符串区分大小写，（推荐关键字大写，其他变量或值小写）.</p></li><li><p>SQL 是一门 ANSI 的标准计算机语言，用来访问和操作数据库系统。SQL 语句用于取回和更新数据库中的数据。SQL 可与数据库程序协同工作，比如 MS Access、DB2、Informix、MS SQL Server、Oracle、Sybase 以及其他数据库系统。</p></li><li><p>存在着很多不同版本的 SQL 语言，但是为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的关键词（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。</p></li></ul><p>**注释：**除了 SQL 标准之外，大部分 SQL 数据库程序都拥有它们自己的私有扩展！</p><h2 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h2><table tabindex="0"><thead><tr><th>分类</th><th>作用</th><th>语句</th></tr></thead><tbody><tr><td>DQL</td><td>数据查询语言(Data Query Language)</td><td>select(查询)</td></tr><tr><td>DDL</td><td>数据定义语言(Data Difination Language)</td><td>create(创建)/alter(修改)/drop(删除)/truncate(删除)</td></tr><tr><td>DML</td><td>数据操作语言(Data Manage Language)</td><td>insert(插入)/delete(删除)/update(修改)</td></tr><tr><td>DCL</td><td>数据控制语言(Data Control Language)</td><td>grant(赋权限)/revoke(回收权限)</td></tr><tr><td>TCL</td><td>事务控制语言(Transaction Control Language)</td><td>commit(提交)/rollback(撤回)</td></tr></tbody></table><ul><li>只有DML语句才有TCL控制。</li><li>一次提交/回滚将提交：从上次提交/回滚到本次书写之间所有的SQL操作。</li><li>事务的特性： <ul><li>原子性：一次事务中可能存在多个SQL语句，其中任何一条出现问题，都使所有的撤销。</li><li>一致性：执行前与执行后数据必须有所控制，保持一致。</li><li>隔离性：事务的处理过程在数据库中执行，外部无法通过任何途径干扰和监控。</li><li>持久性： 所做的数据操作，必须在数据库中持久化。</li></ul></li></ul><h2 id="范式" tabindex="-1">范式 <a class="header-anchor" href="#范式" aria-label="Permalink to &quot;范式&quot;">​</a></h2><p><strong>第一范式:确保每列的原子性（字段不可分）。</strong></p><p>如果每列(或者每个属性)都是不可再分的最小数据单元(也称为最小的原子单元),则满足第一范式.</p><p>1、每一列属性都是不可再分的属性值，确保每一列的原子性</p><p>2、两列的属性相近或相似或一样，尽量合并属性一样的列，确保不产生冗余数据。</p><p><strong>第二范式:在第一范式的基础上更进一层,目标是确保表中的每列都依赖于主键。</strong></p><p>每一行的数据只能与其中一列相关，即一行数据只做一件事。只要数据列中出现数据重复，就要把表拆分开来。</p><p><strong>第三范式:在第二范式的基础上更进一层,目标是确保每列都和主键列直接相关,而不是间接相关。</strong></p><p>为了理解第三范式，需要根据Armstrong公里之一定义传递依赖。</p><p>假设A、B和C是关系R的三个属性，如果A-〉B且B-〉C，则从这些函数依赖中，可以得出A-〉C，如上所述，依赖A-〉C是传递依赖。</p><p>例如:订单表(订单编号，定购日期，顾客编号，顾客姓名，……)，初看该表没有问题，满足第二范式，每列都和主键列&quot;订单编号&quot;相关，再细看你会发现&quot;顾客姓名&quot;和&quot;顾客编号&quot;相关，&quot;顾客编号&quot;和&quot;订单编号&quot;又相关，最后经过传递依赖，&quot;顾客姓名&quot;也和&quot;订单编号&quot;相关。</p><p>为了满足第三范式，应去掉&quot;顾客姓名&quot;列，放入客户表中。</p><p><strong>第四范式：禁止主键列和非主键列一对多关系不受约束。</strong></p><p><strong>第五范式：将表尽可能的分割成尽可能小的块，为了排除在表中所有的冗余。</strong></p>',25)]))}const h=a(i,[["render",o]]);export{S as __pageData,h as default};
