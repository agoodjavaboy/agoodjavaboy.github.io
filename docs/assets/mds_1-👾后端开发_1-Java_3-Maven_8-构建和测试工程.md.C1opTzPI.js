import{_ as a,c as n,o as i,aF as p}from"./chunks/framework.CvyoTX4A.js";const g=JSON.parse('{"title":"8-构建和测试工程","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/3-Maven/8-构建和测试工程.md","filePath":"mds/1-👾后端开发/1-Java/3-Maven/8-构建和测试工程.md"}'),e={name:"mds/1-👾后端开发/1-Java/3-Maven/8-构建和测试工程.md"};function l(t,s,h,k,r,c){return i(),n("div",null,s[0]||(s[0]=[p(`<h1 id="_8-构建和测试工程" tabindex="-1">8-构建和测试工程 <a class="header-anchor" href="#_8-构建和测试工程" aria-label="Permalink to &quot;8-构建和测试工程&quot;">​</a></h1><h2 id="maven-构建-测试工程" tabindex="-1">Maven - 构建 &amp; 测试工程 <a class="header-anchor" href="#maven-构建-测试工程" aria-label="Permalink to &quot;Maven - 构建 &amp; 测试工程&quot;">​</a></h2><p>我们在创建工程章节中学到的是如何使用 Maven 创建 Java 应用。现在我们将看到如何构建和测试这个应用。</p><p>跳转到 C:/MVN 目录下，既你的 java 应用目录下。打开 consumerBanking 文件夹。你将看到 <strong>POM.xml</strong> 文件中有下面的内容。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">project</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xmlns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   xmlns:xsi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   xsi:schemaLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://maven.apache.org/POM/4.0.0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">modelVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;4.0.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">modelVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.companyname.projectgroup&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;project&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;1.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;junit&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3.8.1&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>可以看到，Maven 已经添加了 JUnit 作为测试框架。默认 Maven 添加了一个源码文件 <strong>App.java</strong> 和一个测试文件 <strong>AppTest.java</strong> 到上个章节中我们提到的默认目录结构中。</p><p>打开命令控制台，跳转到 C:\\MVN\\consumerBanking 目录下，并执行以下 <strong>mvn</strong> 命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>C:\\MVN\\consumerBanking&gt;mvn clean package</span></span></code></pre></div><p>Maven 将开始构建工程。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Scanning for projects...</span></span>
<span class="line"><span>[INFO] -------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] Building consumerBanking</span></span>
<span class="line"><span>[INFO]    task-segment: [clean, package]</span></span>
<span class="line"><span>[INFO] -------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] [clean:clean {execution: default-clean}]</span></span>
<span class="line"><span>[INFO] Deleting directory C:\\MVN\\consumerBanking\\target</span></span>
<span class="line"><span>[INFO] [resources:resources {execution: default-resources}]</span></span>
<span class="line"><span>[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,</span></span>
<span class="line"><span>i.e. build is platform dependent!</span></span>
<span class="line"><span>[INFO] skip non existing resourceDirectory C:\\MVN\\consumerBanking\\src\\main\\</span></span>
<span class="line"><span>resources</span></span>
<span class="line"><span>[INFO] [compiler:compile {execution: default-compile}]</span></span>
<span class="line"><span>[INFO] Compiling 1 source file to C:\\MVN\\consumerBanking\\target\\classes</span></span>
<span class="line"><span>[INFO] [resources:testResources {execution: default-testResources}]</span></span>
<span class="line"><span>[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources,</span></span>
<span class="line"><span>i.e. build is platform dependent!</span></span>
<span class="line"><span>[INFO] skip non existing resourceDirectory C:\\MVN\\consumerBanking\\src\\test\\</span></span>
<span class="line"><span>resources</span></span>
<span class="line"><span>[INFO] [compiler:testCompile {execution: default-testCompile}]</span></span>
<span class="line"><span>[INFO] Compiling 1 source file to C:\\MVN\\consumerBanking\\target\\test-classes</span></span>
<span class="line"><span>[INFO] [surefire:test {execution: default-test}]</span></span>
<span class="line"><span>[INFO] Surefire report directory: C:\\MVN\\consumerBanking\\target\\</span></span>
<span class="line"><span>surefire-reports</span></span>
<span class="line"><span>-------------------------------------------------------</span></span>
<span class="line"><span> T E S T S</span></span>
<span class="line"><span>-------------------------------------------------------</span></span>
<span class="line"><span>Running com.companyname.bank.AppTest</span></span>
<span class="line"><span>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.027 sec</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Results :</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[INFO] [jar:jar {execution: default-jar}]</span></span>
<span class="line"><span>[INFO] Building jar: C:\\MVN\\consumerBanking\\target\\</span></span>
<span class="line"><span>consumerBanking-1.0-SNAPSHOT.jar</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] BUILD SUCCESSFUL</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span>
<span class="line"><span>[INFO] Total time: 2 seconds</span></span>
<span class="line"><span>[INFO] Finished at: Tue Jul 10 16:52:18 IST 2012</span></span>
<span class="line"><span>[INFO] Final Memory: 16M/89M</span></span>
<span class="line"><span>[INFO] ------------------------------------------------------------------------</span></span></code></pre></div><p>你已经构建了你的工程并创建了最终的 jar 文件，下面是要学习的关键概念：</p><ul><li>我们给了 maven 两个目标，首先清理目标目录（clean），然后打包工程构建的输出为 jar（package）文件。</li><li>打包好的 jar 文件可以在 consumerBanking\\target 中获得，名称为 consumerBanking-1.0-SNAPSHOT.jar。</li><li>测试报告存放在 consumerBanking\\target\\surefire-reports 文件夹中。</li><li>Maven 编译源码文件，以及测试源码文件。</li><li>接着 Maven 运行测试用例。</li><li>最后 Maven 创建工程包。</li></ul><p>现在打开命令控制台，跳转到 C:\\MVN\\consumerBanking\\target\\classes 目录，并执行下面的 java 命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>C:\\MVN\\consumerBanking\\target\\classes&gt;java com.companyname.bank.App</span></span></code></pre></div><p>你可以看到结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello World!</span></span></code></pre></div><h2 id="添加-java-源文件" tabindex="-1">添加 Java 源文件 <a class="header-anchor" href="#添加-java-源文件" aria-label="Permalink to &quot;添加 Java 源文件&quot;">​</a></h2><p>我们看看如何添加其他的 Java 文件到工程中。打开 C:\\MVN\\consumerBanking\\src\\main\\java\\com\\companyname\\bank 文件夹，在其中创建 Util 类 Util.java。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.companyname.bank;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Util</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更新 App 类来使用 Util 类。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.companyname.bank;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Hello world!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Util.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在打开命令控制台，跳转到 C:\\MVN\\consumerBanking 目录下，并执行下面的 <strong>mvn</strong> 命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>C:\\MVN\\consumerBanking&gt;mvn clean compile</span></span></code></pre></div><p>在 Maven 构建成功之后，跳转到 C:\\MVN\\consumerBanking\\target\\classes 目录下，并执行下面的 java 命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>C:\\MVN\\consumerBanking\\target\\classes&gt;java -cp com.companyname.bank.App</span></span></code></pre></div><p>你可以看到结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Hello World!</span></span></code></pre></div>`,27)]))}const E=a(e,[["render",l]]);export{g as __pageData,E as default};
