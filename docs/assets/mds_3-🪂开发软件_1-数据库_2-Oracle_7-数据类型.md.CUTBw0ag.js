import{_ as d,c as a,o as r,aF as e}from"./chunks/framework.CvyoTX4A.js";const u=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/7-数据类型.md","filePath":"mds/3-🪂开发软件/1-数据库/2-Oracle/7-数据类型.md"}'),l={name:"mds/3-🪂开发软件/1-数据库/2-Oracle/7-数据类型.md"};function h(o,t,i,n,b,c){return r(),a("div",null,t[0]||(t[0]=[e('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><h2 id="oracle" tabindex="-1">Oracle <a class="header-anchor" href="#oracle" aria-label="Permalink to &quot;Oracle&quot;">​</a></h2><h3 id="字符型" tabindex="-1">字符型 <a class="header-anchor" href="#字符型" aria-label="Permalink to &quot;字符型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>取值范围(字节)</th><th>说明</th></tr></thead><tbody><tr><td>varchar2</td><td>0-4000</td><td>可变长度的字符串</td></tr><tr><td>nvarchar2</td><td>0-1000</td><td>用来存储Unicode字符集的变长字符型数据</td></tr><tr><td>char</td><td>0-2000</td><td>定长的字符串</td></tr><tr><td>nchar</td><td>0-1000</td><td>用来存储Unicode字符串的定长字符型数据</td></tr><tr><td>long</td><td>0-2GB</td><td>用来存储较长的字符串</td></tr></tbody></table><ul><li><p>规定取值范围可以约束列中的字段中,可以存储多少字节的数据.</p></li><li><p>变长与定长:</p><ul><li>变长:规定了数据长度之后,实际存储所占用的空间会根据实际的字符来计算.</li><li>定长:规定了数据长度之后,实际存储所占用的空间会规定在声明类型时规定的长度上,即使存储的数据小于此长度.</li></ul></li><li><p>字符所占用字节的长度与编码方式有关:</p><table tabindex="0"><thead><tr><th>编码方式</th><th>字母/数字/符号</th><th>中文</th></tr></thead><tbody><tr><td>ASCII</td><td>1</td><td>不支持</td></tr><tr><td>Unicode</td><td>4</td><td>4</td></tr><tr><td>UTF-8</td><td>1</td><td>3</td></tr><tr><td>UTF-16</td><td>4</td><td>4</td></tr><tr><td>GB2312</td><td>1</td><td>繁体不支持,简体2字节</td></tr><tr><td>BIG5</td><td>1</td><td>简体不支持,繁体2字节</td></tr><tr><td>GBK</td><td>1</td><td>2</td></tr><tr><td>GB18030</td><td>1</td><td>2</td></tr><tr><td>ISO-8859-1</td><td>1</td><td>不支持</td></tr></tbody></table></li></ul><h3 id="数字型" tabindex="-1">数字型 <a class="header-anchor" href="#数字型" aria-label="Permalink to &quot;数字型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>取值范围</th><th>说明</th></tr></thead><tbody><tr><td>number(p,s)</td><td>p最大精度是38位(十进制)</td><td>p表示的是精度,s表示的是保留小数点后的位数.可以用来存储定长的整数和小数.</td></tr><tr><td>float</td><td>用来存储126位数据(二进制)</td><td>存储的精度是按二进制计算的,精度范围为二进制的1~126,在转化为二进制时需要乘以0.30103</td></tr></tbody></table><ul><li>使用number定义数据的大小的时候,p表示小数位数+整数位数的和,s表示小数位数数量.</li></ul><h3 id="日期型" tabindex="-1">日期型 <a class="header-anchor" href="#日期型" aria-label="Permalink to &quot;日期型&quot;">​</a></h3><ul><li>时间类型可以进行加减运算,求天数.</li></ul><table tabindex="0"><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>date</td><td>用来存储日期和时间,精确到秒.</td></tr><tr><td>timestamp</td><td>显示的日期比date更精确,精确到小数秒,还能显示上午下午.</td></tr></tbody></table><h3 id="其他数据类型" tabindex="-1">其他数据类型 <a class="header-anchor" href="#其他数据类型" aria-label="Permalink to &quot;其他数据类型&quot;">​</a></h3><table tabindex="0"><thead><tr><th>数据类型</th><th>取值范围(字节)</th><th>说明</th></tr></thead><tbody><tr><td>blob</td><td>最多可以存放4GB</td><td>存储二进制数据</td></tr><tr><td>clob</td><td>最多可以存放4GB</td><td>存储字符串数据</td></tr><tr><td>bfile</td><td>大小与操作系统有关</td><td>将非结构化的二进制数据存储在数据库以外的操作系统文件中</td></tr></tbody></table>',13)]))}const _=d(l,[["render",h]]);export{u as __pageData,_ as default};
