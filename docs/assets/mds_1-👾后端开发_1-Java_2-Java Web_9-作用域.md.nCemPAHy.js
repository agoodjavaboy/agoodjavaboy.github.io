import{_ as t,c as i,o as e,aF as a}from"./chunks/framework.CvyoTX4A.js";const c=JSON.parse('{"title":"作用域","description":"","frontmatter":{},"headers":[],"relativePath":"mds/1-👾后端开发/1-Java/2-Java Web/9-作用域.md","filePath":"mds/1-👾后端开发/1-Java/2-Java Web/9-作用域.md"}'),n={name:"mds/1-👾后端开发/1-Java/2-Java Web/9-作用域.md"};function l(d,s,r,p,h,k){return e(),i("div",null,s[0]||(s[0]=[a(`<h1 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h1><ul><li>作用域是用对象来描述的，是可以在多个请求或响应之间携带数据的对象。</li><li>作用域也是有生命周期的，也就是可以在什么情况下在多个请求中跳转携带。</li><li>所携带的数据都是键值对，通过键获得或者删除值。</li><li>Servlet的作用域一共有三个。JSP的作用域有Servlet的三个，多了个page，一共四个。</li></ul><table tabindex="0"><thead><tr><th>作用域名</th><th>作用范围</th><th>备注</th></tr></thead><tbody><tr><td>request：请求</td><td>在一次请求的起始位置和结束位置</td><td>请求转发可用，重定向不可用！一般用来传值</td></tr><tr><td>session：会话</td><td>浏览器与服务器建立连接开始，到浏览器或服务器单方面关闭结束</td><td>一般用来监控用户登录状态</td></tr><tr><td>context：环境</td><td>服务器开始则存在，服务器关闭则死亡</td><td>最大的作用域</td></tr></tbody></table><h2 id="request" tabindex="-1">request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;request&quot;">​</a></h2><ul><li>生命周期只在请求和响应的两端，也就是开始位置和结束位置。</li><li>request只能通过请求转发在多个Srevlet之间传值，因为转发是一次请求。不能通过重定向传值，因为重定向是两次或多次请求。</li><li>request也就是HttpServletRequest对象，在HttpServlet的service/doget/dopost方法的参数中。</li></ul><p><strong>存值</strong></p><ul><li>调用HttpServletRequest的setAttribute方法，传入键值对即可存储一个作用域中键值。</li><li>存值可以存任何类型的参数，但是key必须是String类型。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//存值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRequestDispatcher</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test.do&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forward</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request, response);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//转发跳转：可取值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //response.sendRedirect(&quot;Test.do&quot;);//重定向跳转：不可取值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>取值</strong></p><ul><li>调用HttpServletRequest的getAttribute，传入键，获得相对应的值，如果没有值则返回null。</li><li>在取值时，值都是Object类型的，如果要进行转型还需要检测。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>删除</strong></p><ul><li>调用HttpServletRequest的removeAttribute，传入键，将相对应的值删除。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//删除hello键的值了</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//显示为null，因为上文已经删除了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="session" tabindex="-1">session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;session&quot;">​</a></h2><blockquote><p>HttpSession和Cookie有一点关系，HttpSession是借助着一个Cookie存储在浏览器上来实现会话访问的。</p><p>Cookie有一种生命时长为：session，也就是一次会话。</p><p>HttpSession的id以Cookie的形式存储在浏览器上。</p><p>区别：HttpSession是存储在服务器端的键值对，Cookie是存储在浏览器端的字符串键值对。</p></blockquote><ul><li>session是HttpSession对象，要通过HttpServletRequest对象的getSession方法来获得。</li><li>getSession方法有两种获得方式： <ul><li>getSession()：获得当前请求的session对象。</li><li>getSession(boolean)：如果为false， 也是获得当前请求的session对象，如果为true，则返回一个新的Session对象。</li></ul></li><li>session的声明周期是一次会话，也就是从浏览器访问到服务器的时间到浏览器或服务器单方面关闭之间。</li><li>一般我们会采用session来记录已经登录的用户，也就是在用户登录之后立马在session中存储用户的信息。</li><li>提供一种方法来跨多个页面请求或访问Web站点来标识用户，并存储有关该用户的信息。</li><li>一个会话通常对应一个用户，该用户可能多次访问一个站点，在多次访问中都可以获取session对象中的内容。</li></ul><table tabindex="0"><thead><tr><th>Method Summary</th><th></th></tr></thead><tbody><tr><td><code>java.lang.Object</code></td><td><code>getAttribute(java.lang.String name)</code> 在此会话中返回与指定名称绑定的对象，如果没有在该名称下绑定对象，则返回“null”。</td></tr><tr><td><code>java.util.Enumeration&lt;java.lang.String&gt;</code></td><td><code>getAttributeNames()</code> 返回&#39; String &#39;对象的&#39;Enumeration&#39;，其中包含绑定到此会话的所有对象的名称。</td></tr><tr><td><code>long</code></td><td><code>getCreationTime()</code> 返回创建此会话的时间，以毫秒为单位，从格林威治时间1970年1月1日午夜开始计算。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getId()</code> 返回一个字符串，该字符串包含分配给此会话的唯一标识符。</td></tr><tr><td><code>long</code></td><td><code>getLastAccessedTime()</code> 返回客户端发送与此会话关联的请求的最后一次时间，即从1970年1月1日格林威治时间午夜开始的毫秒数，并由容器接收请求的时间标记。</td></tr><tr><td><code>int</code></td><td><code>getMaxInactiveInterval()</code> 返回servlet容器在客户端访问之间保持会话打开的最大时间间隔(以秒为单位)。</td></tr><tr><td><code>ServletContext</code></td><td><code>getServletContext()</code> 返回此会话所属的ServletContext。</td></tr><tr><td><code>void</code></td><td><code>invalidate()</code> 使此会话无效，然后解绑定到它的任何对象。</td></tr><tr><td><code>boolean</code></td><td><code>isNew()</code> 如果客户端还不知道会话，或者客户端选择不加入会话，则返回“true”。</td></tr><tr><td><code>void</code></td><td><code>removeAttribute(java.lang.String name)</code> 从此会话中移除与指定名称绑定的对象。</td></tr><tr><td><code>void</code></td><td><code>setAttribute(java.lang.String name, java.lang.Object value)</code> 使用指定的名称将对象绑定到此会话。</td></tr><tr><td><code>void</code></td><td><code>setMaxInactiveInterval(int interval)</code> 指定servlet容器将使此会话无效之前的客户端请求之间的时间(以秒为单位)。</td></tr></tbody></table><p><strong>存值</strong></p><ul><li>使用request对象获得session后调用addAttribute方法来存储键值对。键是String类型，值是Object类型。</li><li>在同一个服务器开启时间段里，session可以在多次请求中存活传值。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HttpSession hs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获得session对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//开始存值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test.do&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//执行请求重定向，将发送两次请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>取值</strong></p><ul><li>使用request获得session对象后调用getAttribute方法传入键，获得相对应的值，如果没有值则返回null。</li><li>取出的值全部都是Object类型，需要进行转型使用。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>删除</strong></p><ul><li>调用request的getSession方法来获得session对象然后调用removeAttribute方法来删除作用域中的值。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//删除session对象中的key为hello的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出值为null，因为在取值之前已经删除了此值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>session和cookie的区别：</p><ol><li>session是存在服务器上的，而cookie是存储在浏览器（硬盘）的。</li><li>cookie是不安全的，因为可以在浏览器直接看到。</li><li>cookie的默认生命周期是关闭浏览器死亡。</li><li>如果打开一个网站然后静止不动，那session会自动在30分钟后情况，需重新登录。</li></ol></blockquote><h2 id="context" tabindex="-1">context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;context&quot;">​</a></h2><ul><li><p>ServletContext就是context作用域。</p></li><li><p>ServletContext还可以用来读取web.xml文件中的配置。</p></li><li><p>ServletContext包含了服务器项目运行时所有的信息。</p></li><li><p>Context的生命周期是从服务器开启开始，到服务器关闭结束。</p></li><li><p>定义servlet用于与其servlet容器通信的一组方法，例如，获取文件的MIME类型、分派请求或写入日志文件。</p></li><li><p>对于每个Java虚拟机，每个“web应用程序”都有一个上下文。 (“web应用程序”是servlet和内容的集合，安装在服务器URL名称空间的特定子集(如/catalog)下，可能通过.war文件安装。)</p></li><li><p>对于在其部署描述符中标记为“distributed”的web应用程序，每个虚拟机都有一个上下文实例。 在这种情况下，上下文不能用作共享全局信息的位置(因为这些信息不是真正的全局信息)。 使用外部资源，比如数据库。</p></li><li><p>ServletContext对象包含在ServletConfig对象中，Web服务器在初始化servlet时提供servlet。</p></li><li><p>ServlerContext因为声明周期与服务器相关，可以长时间的进行数据累加。所以可以记录当日网站的访问数量。</p></li></ul><table tabindex="0"><thead><tr><th>方法返回值类型及声明</th><th>方法名及描述</th></tr></thead><tbody><tr><td><code>FilterRegistration.Dynamic</code></td><td><code>addFilter(java.lang.String filterName, java.lang.Class&lt;? extends Filter&gt; filterClass)</code><br>将带有给定名称和类类型的过滤器器添加到此servlet上下文。</td></tr><tr><td><code>FilterRegistration.Dynamic</code></td><td><code>addFilter(java.lang.String filterName, Filter filter)</code><br>在给定的“filterName”下，将给定的过滤器实例注册到这个ServletContext中。</td></tr><tr><td><code>FilterRegistration.Dynamic</code></td><td><code>addFilter(java.lang.String filterName, java.lang.String className)</code><br>将带有给定名称和类名的筛选器添加到此servlet上下文。</td></tr><tr><td><code>void</code></td><td><code>addListener(java.lang.Class&lt;? extends java.util.EventListener&gt; listenerClass)</code><br>将给定类类型的监听器添加到此ServletContext。</td></tr><tr><td><code>void</code></td><td><code>addListener(java.lang.String className)</code><br>将具有给定类名的侦听器添加到此ServletContext。</td></tr><tr><td><code>&lt;T extends java.util.EventListener&gt;void</code></td><td><code>addListener(T t)</code><br>将给定的侦听器添加到此ServletContext。</td></tr><tr><td><code>ServletRegistration.Dynamic</code></td><td><code>addServlet(java.lang.String servletName, java.lang.Class&lt;? extends Servlet&gt; servletClass)</code><br>将具有给定名称和类类型的servlet添加到此servlet上下文。</td></tr><tr><td><code>ServletRegistration.Dynamic</code></td><td><code>addServlet(java.lang.String servletName, Servlet servlet)</code><br>在给定的“servletName”下，用这个ServletContext注册给定的servlet实例。</td></tr><tr><td><code>ServletRegistration.Dynamic</code></td><td><code>addServlet(java.lang.String servletName, java.lang.String className)</code><br>将具有给定名称和类名的servlet添加到此servlet上下文。</td></tr><tr><td><code>&lt;T extends Filter&gt;T</code></td><td><code>createFilter(java.lang.Class&lt;T&gt; clazz)</code><br>实例化给定的筛选器类。</td></tr><tr><td><code>&lt;T extends java.util.EventListener&gt;T</code></td><td><code>createListener(java.lang.Class&lt;T&gt; clazz)</code><br>实例化给定的EventListener类。</td></tr><tr><td><code>&lt;T extends Servlet&gt;T</code></td><td><code>createServlet(java.lang.Class&lt;T&gt; clazz)</code><br>实例化给定的Servlet类。</td></tr><tr><td><code>void</code></td><td><code>declareRoles(java.lang.String... roleNames)</code><br>声明使用&#39; isUserInRole &#39;测试的角色名称。</td></tr><tr><td><code>java.lang.Object</code></td><td><code>getAttribute(java.lang.String name)</code><br>返回指定名称的servlet容器属性，如果没有指定名称的属性，则返回“null”。</td></tr><tr><td><code>java.util.Enumeration&lt;java.lang.String&gt;</code></td><td><code>getAttributeNames()</code><br>返回一个“枚举”，其中包含ServletContext中可用的属性名。</td></tr><tr><td><code>java.lang.ClassLoader</code></td><td><code>getClassLoader()</code><br>获取此ServletContext表示的web应用程序的类装入器。</td></tr><tr><td><code>ServletContext</code></td><td><code>getContext(java.lang.String uripath)</code><br>返回一个“ServletContext”对象，该对象对应于服务器上的一个指定URL。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getContextPath()</code><br>返回web应用程序的上下文路径。</td></tr><tr><td><code>java.util.Set&lt;SessionTrackingMode&gt;</code></td><td><code>getDefaultSessionTrackingModes()</code><br>获取此ServletContext默认支持的会话跟踪模式。</td></tr><tr><td><code>int</code></td><td><code>getEffectiveMajorVersion()</code><br>获取此Servlet上下文表示的应用程序所基于的Servlet规范的主要版本。</td></tr><tr><td><code>int</code></td><td><code>getEffectiveMinorVersion()</code><br>获取此Servlet上下文表示的应用程序所基于的小版本Servlet规范。</td></tr><tr><td><code>java.util.Set\\&lt;SessionTrackingMode&gt;</code></td><td><code>getEffectiveSessionTrackingModes()</code><br>获取对这个“ServletContext”有效的会话跟踪模式。</td></tr><tr><td><code>FilterRegistration</code></td><td><code>getFilterRegistration(java.lang.String filterName)</code><br>获取与给定&#39; filterName &#39;对应的筛选器的FilterRegistration。</td></tr><tr><td><code>java.util.Map&lt;java.lang.String,? extends FilterRegistration&gt;</code></td><td><code>getFilterRegistrations()</code><br>获取与此ServletContext注册的所有过滤器对应的FilterRegistration对象(可能为空)映射。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getInitParameter(java.lang.String name)</code><br>返回一个“String”，其中包含指定的上下文范围的初始化参数的值，如果该参数不存在，则返回“null”。</td></tr><tr><td><code>java.util.Enumeration&lt;java.lang.String&gt;</code></td><td><code>getInitParameterNames()</code><br>以“String”对象的“枚举”形式返回上下文的初始化参数的名称，如果上下文没有初始化参数，则返回空的“枚举”。</td></tr><tr><td><code>JspConfigDescriptor</code></td><td><code>getJspConfigDescriptor()</code><br>获取从&#39; web &#39;聚合的&#39; &lt;jsp-config&gt; &#39;相关配置。xml”和“web-fragment。这个ServletContext表示的web应用程序的xml描述符文件。</td></tr><tr><td><code>int</code></td><td><code>getMajorVersion()</code><br>返回此Servlet容器支持的Servlet API的主要版本。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getMimeType(java.lang.String file)</code><br>返回指定文件的MIME类型，如果MIME类型未知，则返回&#39; null &#39;。</td></tr><tr><td><code>int</code></td><td><code>getMinorVersion()</code><br>返回此Servlet容器支持的小版本Servlet API。</td></tr><tr><td><code>RequestDispatcher</code></td><td><code>getNamedDispatcher(java.lang.String name)</code><br>返回一个&#39; RequestDispatcher &#39;对象，它充当指定servlet的包装器。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getRealPath(java.lang.String path)</code><br>获取与给定的虚拟路径对应的实路径.</td></tr><tr><td><code>RequestDispatcher</code></td><td><code>getRequestDispatcher(java.lang.String path)</code><br>返回一个RequestDispatcher对象，该对象充当位于给定路径上的资源的包装器。</td></tr><tr><td><code>java.net.URL</code></td><td><code>getResource(java.lang.String path)</code><br>返回映射到给定路径的资源的URL。</td></tr><tr><td><code>java.io.InputStream</code></td><td><code>getResourceAsStream(java.lang.String path)</code><br>以“InputStream”对象的形式返回位于指定路径上的资源。</td></tr><tr><td><code>java.util.Set&lt;java.lang.String&gt;</code></td><td><code>getResourcePaths(java.lang.String path)</code><br>返回web应用程序中所有资源路径的目录式列表，其中最长的子路径与提供的路径参数相匹配。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getServerInfo()</code><br>返回正在运行servlet的servlet容器的名称和版本。</td></tr><tr><td><code>java.lang.String</code></td><td><code>getServletContextName()</code><br>按照display-name元素在此web应用程序的部署描述符中指定的那样，返回与此ServletContext对应的web应用程序的名称。</td></tr><tr><td><code>ServletRegistration</code></td><td><code>getServletRegistration(java.lang.String servletName)</code><br>获取与给定“servletName”的servlet对应的ServletRegistration。</td></tr><tr><td><code>java.util.Map&lt;java.lang.String,? extends ServletRegistration&gt;</code></td><td><code>getServletRegistrations()</code><br>获取与此ServletContext注册的所有servlet对应的ServletRegistration对象(由servlet名称作为键值)的映射(可能为空)。</td></tr><tr><td><code>SessionCookieConfig</code></td><td><code>getSessionCookieConfig()</code><br>获取“SessionCookieConfig”对象，可以通过该对象配置代表此“ServletContext”创建的会话跟踪cookie的各种属性。</td></tr><tr><td><code>void</code></td><td><code>log(java.lang.String msg)</code><br>将指定的消息写入servlet日志文件，通常是事件日志。</td></tr><tr><td><code>void</code></td><td><code>log(java.lang.String message, java.lang.Throwable throwable)</code> 将指定的“可抛出”异常的说明消息和堆栈跟踪写入servlet日志文件。</td></tr><tr><td><code>void</code></td><td><code>removeAttribute(java.lang.String name)</code><br>从这个ServletContext中删除具有给定名称的属性。</td></tr><tr><td><code>void</code></td><td><code>setAttribute(java.lang.String name, java.lang.Object object)</code><br>将对象绑定到此ServletContext中的给定属性名。</td></tr><tr><td><code>boolean</code></td><td><code>setInitParameter(java.lang.String name, java.lang.String value)</code> 使用这个ServletContext上的给定名称和值设置上下文初始化参数。</td></tr><tr><td><code>void</code></td><td><code>setSessionTrackingModes(java.util.Set\\&lt;SessionTrackingMode&gt; sessionTrackingModes)</code><br>设置会话跟踪模式，该模式将对这个“ServletContext”有效。</td></tr></tbody></table><p><strong>存值</strong></p><ul><li>ServletContext要使用HttpSession来获得，HttpSession要通过HttpServletRequest来获得。</li><li>或者使用getServletContext方法，这个方法位于GenericServlet接口中，因为自定义Servlet类是GenericServlet的一个子类，所以可以使用this或者直接调用。</li><li>存值依然使用setAttribute方法存储键值对。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HttpSession s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ServletContext sc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>取值</strong></p><ul><li><p>同样使用getAttribute方法来传入key值获得其value值。</p></li><li><p>在存值的时候，setAttribute方法要接收一个String类型的key和Object类型的value，那在取值的时候也要取出一个Object类型的value。</p></li><li><p>无论浏览器开启或者关闭多少次，ServletContext中存储的键值对都不会清空。只有当服务器关闭才会清空。</p></li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse arg1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HttpSession s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ServletContext sc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>删除</strong></p><ul><li>删除调用removeAttribute方法，传入key，删除value，将value值变成null。</li><li>如果没有这个key，不会出现异常。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> service</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpServletRequest request, HttpServletResponse arg1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    throws ServletException, IOException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HttpSession hs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ServletContext sc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getServletContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,40)]))}const g=t(n,[["render",l]]);export{c as __pageData,g as default};
