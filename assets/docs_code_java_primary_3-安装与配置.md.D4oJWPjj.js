import{_ as a,c as e,o as t,a5 as o}from"./chunks/framework.B33oykO0.js";const d="/assets/532c3ba72c21472b84609de02b3b3184.DElU9VbP.png",i="/assets/4f36cc444638475f90e618837f4e7659.DHt69iRf.png",l="/assets/3ebb4fb985234015851c6823504d8383.D_k540Gh.png",c="/assets/8a6718c1320f4f89a45c86b83b9e7d35.C2DG1IDS.png",p="/assets/fd976caa089d4c81b6f8c132e523b2f6.CSnWu616.png",r="/assets/79395d370e7c4140bb749d1e1be0008d.OslsiPKz.png",s="/assets/e9520b367c0640d287119b47b4f0d528.DIydRyfP.png",k=JSON.parse('{"title":"安装与配置","description":"","frontmatter":{},"headers":[],"relativePath":"docs/code/java/primary/3-安装与配置.md","filePath":"docs/code/java/primary/3-安装与配置.md","lastUpdated":null}'),n={name:"docs/code/java/primary/3-安装与配置.md"},h=o('<h1 id="安装与配置" tabindex="-1">安装与配置 <a class="header-anchor" href="#安装与配置" aria-label="Permalink to &quot;安装与配置&quot;">​</a></h1><p>当理解了计算机和Java的基础支持，表示已经对这个陌生的家伙有了一点点模糊的认识，下一步将把Java安装到自己的计算机中，来进行一次近距离的接触。</p><p>本次的安装其实就是在安装Java的开发环境，拥有开发环境的计算机就可以运行Java的程序。</p><p>Java的安装包可以在以下网址中下载：</p><ol><li>可以通过Java官网下载安装包：<a href="https://www.oracle.com/cn/index.html" target="_blank" rel="noreferrer">https://www.oracle.com/cn/index.html</a></li><li>通过Oracle官网下载安装包：<a href="https://www.java.com/zh-CN/" target="_blank" rel="noreferrer">https://www.java.com/zh-CN/</a></li><li>或者通过国内的镜像站下载（华为）：<a href="https://repo.huaweicloud.com/java/jdk/" target="_blank" rel="noreferrer">https://repo.huaweicloud.com/java/jdk/</a></li></ol><p>本次将使用Java8版本进行学习，Windows可以直接下载x64的exe文件。</p><h2 id="控制台-终端" tabindex="-1">控制台/终端 <a class="header-anchor" href="#控制台-终端" aria-label="Permalink to &quot;控制台/终端&quot;">​</a></h2><p>在进行安装之前，必要的科普一下控制台或者叫终端的使用方式。</p><p>控制台也叫终端，或者命令行，相比较图形化界面直观的操作方式，命令行都是以单词字母组成的命令来控制计算机的各种操作的。命令行的好处是快捷，记住指令之后可以很快的指挥计算机完成操作，而不需要寻找按钮和单独的输入，缺点就是指令的复杂多样化，会增加学习难度。</p><p>终端是计算机底层指令运行的地方，实际上所有的软件都是借助终端可以运行的指令来进行运行的。同样的，如果只有一个终端同样可以实现对计算机的全面控制。</p><p>无论是在什么操作系统中，都有终端这个东西，在任何系统的菜单中，都可以找到此图标，点击就会打开一个空白的窗口，其中有一个终端默认定位的路径，通常是当前登录用户的管辖目录。</p><p><code>cd</code>指令用于在目录之间穿梭，<code>cd 任何目录地址</code>就可以穿梭到此目录下，<code>cd ../</code>表示穿梭到当前目录所在的上级目录。终端所在目录的地址就在每一行的开头。</p><p>在Windows中还有更简单的指定目录打开终端的方式：</p><ol><li>打开资源管理器，然后进入到想要进入的文件目录，在资源管理器的地址栏输入<code>cmd</code>，即可进入此目录的终端；</li><li>在文件目录的空白位置按住<code>shift</code>然后使用鼠标右击同样可以进入此目录的地址；</li><li>按下<code>Win + R</code>键后，将打开快速启动窗口，输入<code>cmd</code>也将进入终端，默认定位当前登录用户管辖的目录。</li></ol><p>在Linux中，一般的发行版都在鼠标右键后可以打开终端，使用cd的方式就可以去任意的目录。</p><h2 id="安装java" tabindex="-1">安装Java <a class="header-anchor" href="#安装java" aria-label="Permalink to &quot;安装Java&quot;">​</a></h2><h3 id="在windows中安装" tabindex="-1">在Windows中安装 <a class="header-anchor" href="#在windows中安装" aria-label="Permalink to &quot;在Windows中安装&quot;">​</a></h3><ol><li><p>首先去除系统中已经存在的Java：</p><ol><li>打开控制面板；</li><li>将查看模式调整为类别模式；</li><li>点击卸载程序；</li><li>找到与Java相关的一切，右击选择卸载；</li></ol></li><li><p>然后就可以开始安装Java了。Java的安装将分为两步：</p><ol><li>JDK：Java的开发环境，包括开发过程中和运行程序时所使用到的类库及其他必要依赖。</li><li>Java的运行环境，包括运行程序时所使用到的依赖。</li></ol><p><img src="'+d+'" alt="532c3ba72c21472b84609de02b3b3184"></p><p>具体的操作就可以双击安装包，首先打开的是JDK的安装程序，选择一个喜欢的路径，并创建一个java文件夹，其中创建一个jdk文件夹，选中此文件夹就可以进行jdk的安装（例如：<code>D:\\java\\jdk</code>）。需要注意的是，请记住这个安装路径。</p><p><img src="'+i+'" alt="4f36cc444638475f90e618837f4e7659"></p><p>接着Java的安装程序将自动弹出一个JRE的安装界面，在选择目录的时候进入刚刚创建的Java目录，并新建一个jre文件夹（例如：<code>D:\\java\\jre</code>），点击此文件夹进行jre的安装。</p></li><li><p>无论自定义的路径是怎么样的，只要出现了类似如下的结构就可以：</p><p><img src="'+l+'" alt="3ebb4fb985234015851c6823504d8383"></p></li></ol><h3 id="环境安装的验证" tabindex="-1">环境安装的验证 <a class="header-anchor" href="#环境安装的验证" aria-label="Permalink to &quot;环境安装的验证&quot;">​</a></h3><p>当一切都按照上文所述进行了安装之后，就可以在任意位置打开终端，输入<code>java</code>，即可看到如下内容：</p><p><img src="'+c+'" alt="8a6718c1320f4f89a45c86b83b9e7d35"></p><p>并且输入<code>java -version</code>还可以查看当前安装的Java的版本等详细信息。</p><p>但是如果出现了以下内容：</p><p><img src="'+p+'" alt="fd976caa089d4c81b6f8c132e523b2f6"></p><p>则表示Java的安装是失败的，需要重复卸载Java，并重新进行安装。</p><h2 id="配置环境变量" tabindex="-1">配置环境变量 <a class="header-anchor" href="#配置环境变量" aria-label="Permalink to &quot;配置环境变量&quot;">​</a></h2><p>环境变量是系统运行过程中参考值存储的地方。本次设置环境变量的目的就是为了让操作系统能够找到Java的相关可执行文件，从而使其能够在控制台中直接使用。</p><p>Path环境变量是一个集合，其中保存了很多的文件夹。系统在运行某个指令的时候，会从集合的第一个文件夹中进行寻找，直到找到的此指令所对应的可执行文件，就开始执行此文件，不会再向后寻找。</p><p>如果不指定环境变量的话，也是可以执行可执行文件的，但是需要填写可执行文件完整的文件地址，才能正常的找到此文件。</p><p>通过环境变量的配置，可以在系统任何目录下执行可执行文件，而无需每次都复杂的指定可执行文件所在的目录。</p><p>在Java安装完成之后，JDK文件夹中存在一个bin文件夹，其中都是可执行文件，在未来开发和学习过程中，这些可执行文件能够为我们提供很多的帮助，所以要使其更方便的使用，就需要添加此文件夹到Path中。</p><h3 id="在windows中配置" tabindex="-1">在Windows中配置 <a class="header-anchor" href="#在windows中配置" aria-label="Permalink to &quot;在Windows中配置&quot;">​</a></h3><ol><li><p>使用<code>Win + S</code>指令打开Windows的全局搜索功能，输入 环境变量 ，即可找到一个<code>编辑系统环境变量</code>的按钮，打开即可进入环境变量编辑窗口。</p></li><li><p>环境变量窗口分为两部分，一部分是当前登录用户的环境变量，另一部分是系统变量。当前用户的变量只在当前登录用户下有效，而系统变量是所有登录到此计算机的用户都可以使用此变量。但是由于现在大多数计算机都是一个用户，所以两个变量酌情选择一个即可。</p><p><img src="'+r+'" alt="79395d370e7c4140bb749d1e1be0008d"></p></li><li><p>环境变量一共要配置三个，有新增也有修改，具体操作如下：</p><table><thead><tr><th>变量名</th><th>变量值</th><th>作用</th></tr></thead><tbody><tr><td>CLASSPATH（需要新建）</td><td>.（也就是一个英文的句号）</td><td>告诉系统生成的字节码文件放到哪里，点表示当前路径。</td></tr><tr><td>JAVA_HOME（需要新建）</td><td>java中jdk文件夹的路径</td><td>帮助系统中的其他软件，找到java的运行位置。</td></tr><tr><td>Path（已有，累加，英文分号与其他内容隔开）</td><td>java中jdk中bin文件夹的路径</td><td>帮助系统找到java的各个可执行程序。</td></tr></tbody></table><p>其中关于<code>CLASSPATH</code>在高版本的Java中已经忽略，也就是默认就是一个英文的点。但为了严谨和通用，还是建议将三个环境变量都配置上。</p><ul><li>最简单的变量叫做<code>CLASSPATH</code>，只需要填值为<code>.</code>就可以了，这个表示编译出的字节码文件放在哪里，点的意思是放在源代码文件所在的路径上，也就是源代码旁边。</li><li><code>JAVA_HOME</code>要配置Java中JDK的安装路径，主要为了辅助需要到Java运行的软件找到Java的位置，虽然现在还没有安装任何依赖Java运行的软件，但是作为一个开发人员总会有机会用到的。</li><li>最重要的变量叫做<code>path</code>，上面两个变量都是需要新增的，但是这个变量要在原有的基础上累加，推荐累加在原有内容的最前面，使用英文的分号<code>;</code>与后面的内容隔开。path的值是JDK文件夹下bin文件夹的路径，里面存放的是可以直接被系统调用的可执行文件，这个变量的作用也就是告诉系统有哪些东西可以让它直接使用。</li></ul><blockquote><p>实际上在javac所处的文件夹下执行javac指令也是可以的，是因为系统会默认在当前路径下寻找可执行文件。如果在其他文件夹中，也可以通过路径指定的方式来启动可执行文件，但用起来会麻烦一些。配置环境变量的作用就是在系统的任何一个目录下都可以使用可执行文件，并且在未来书写代码的时候也不会指定过长的可执行文件的路径。</p><p>在输入一个指令的时候，系统会先判断是否是系统指令，如果不是则在当前目录下寻找，如果目录下没有则在path所指定的各个文件夹中寻找直到运行或报错。那么在进行path路径配置的时候，越靠前的目录会越早被找到，所以可以将java环境尽量向前配置。</p><p>因为path变量的前半段就是JAVA_HOME的内容，所以可以将JAVA_HOME的内容作为一个变量应用到path中，在移动了java的安装路径之后，在保证结构不变的情况下，只需要修改JAVA_HOME的地址，path中的路径就将被自动引用，如果采用变量的方式可以将path写为：%JAVA_HOME%\\bin;。</p></blockquote></li></ol><h3 id="环境变量的验证" tabindex="-1">环境变量的验证 <a class="header-anchor" href="#环境变量的验证" aria-label="Permalink to &quot;环境变量的验证&quot;">​</a></h3><p>当一切都按照上文所述进行了配置之后，就可以在任意位置新打开一个终端，输入<code>javac</code>，即可看到如下内容：</p><p><img src="'+s+'" alt="e9520b367c0640d287119b47b4f0d528"></p><p>首先要保证终端窗口是重新打开的，在配置环境变量前打开的终端并无法加载到变量内容。并且如果输出为javac为未知指令，那则表示path变量并未配置正确，需要进行重新的配置。</p><h2 id="开发工具" tabindex="-1">开发工具 <a class="header-anchor" href="#开发工具" aria-label="Permalink to &quot;开发工具&quot;">​</a></h2><p>集成开发环境简称IDE，其中包含了在软件开发过程中的代码提示、实时编译、错误提示、自动补全等等很多的功能，但是因为新学习一门语言最重要的是熟悉语言的结构，所以前期暂不推荐使用集成开发工具，而是专业的编辑器工具。</p><p>无论是编辑器软件还是IDE，对于代码编辑器最重要的是条理清晰的文件目录结构窗口，以及对代码的高亮，还有就是要足够轻巧或者功能强大，这对代码的编辑有非常大的帮助。</p><p>常见的JavaIDE有：</p><ul><li>Eclipse：老牌开源Java开发工具，支持插件，具有丰富的开发工具；</li><li>MyEclipse：Eclipse的收费版本，开箱即用，插件自动集成；</li><li>IDEA：主流常用的开发工具，有社区版和收费版，如果只开发Java用社区版即可；</li><li>VScode：全能开发工具，不仅支持Java开发，更适合前端项目开发，丰富的开源插件可以提供任何功能；</li></ul><p>编辑器工具有：</p><ul><li>UltraEdit：功能强大且性能优良的记事本工具；</li><li>Sublime：界面漂亮的记事本软件，分为免费版和商业版；</li><li>ATOM：Github开源的现代化记事本，提供更丰富的布局和总览工具；</li><li>VIM：超牛的记事本软件，但是不适合新手使用，丰富的快捷键使很多人信奉此软件为神器；</li></ul><p>之所以在编辑器工具里没有收录Windows默认的记事本工具，一个是因为其没有代码的高亮功能，还有就是在早期的记事本中，会默认在文档的编码前后添加特殊的标识符号，这导致开发人员逐渐弃用了此软件。</p>',45),b=[h];function v(_,f,m,J,u,j){return t(),e("div",null,b)}const A=a(n,[["render",v]]);export{k as __pageData,A as default};
