import{_ as a,c as J,o as t,a5 as v}from"./chunks/framework.B33oykO0.js";const h=JSON.parse('{"title":"Java概述","description":"","frontmatter":{},"headers":[],"relativePath":"docs/code/java/primary/2-Java概述.md","filePath":"docs/code/java/primary/2-Java概述.md","lastUpdated":null}'),o={name:"docs/code/java/primary/2-Java概述.md"},r=v('<h1 id="java概述" tabindex="-1">Java概述 <a class="header-anchor" href="#java概述" aria-label="Permalink to &quot;Java概述&quot;">​</a></h1><p>Java语言从1997年发布，至今已经更新迭代了很多版本，不同的版本在保持初衷的基础上新增了很多的功能和语法，其目的都是为了让开发人员能灵活快速的写出想要的功能代码。Java语言设计灵感来源于C++，C++又来自C语言（实际上所有的语言都与C语言有联系），在吸取前者的经验和优点之下，Java对自己的风格也做了很多定义。</p><p>Java是一门面向对象编程语言，不仅吸收了C语言的各种优点，还摒弃了C里难以理解的多继承、指针等概念，因此Java语言具有<strong>功能强大</strong>和<strong>简单易用</strong>两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了<strong>面向对象理论</strong>，允许程序员以优雅的思维方式进行复杂的编程。</p><ul><li>C语言是纯面向过程的编程语言，并且需要手动的进行内存分配和释放，这导致在做大型项目开发的时候效率很低；</li><li>C++提供了面向对象的可能，优化了C语言中纯面向过程的缺点，功能更强大，能实现更多可能，但语法也更复杂；</li><li>Java从底层设计到开发使用都遵循纯面向对象的思想，更贴近人类的认知，并且提供自动的内存分配和回收，降低了开发难度；</li></ul><p>Java具有<strong>简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性</strong>等特点。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序、移动客户端系统等。</p><h2 id="定位" tabindex="-1">定位 <a class="header-anchor" href="#定位" aria-label="Permalink to &quot;定位&quot;">​</a></h2><p>研究一门语言的开始，首先要判断它是不是一门高级语言，当然现在低级语言也很少有人去学习和应用了，Java就属于高级编程语言。其次就是研究其编译和运行过程，以判断它是一个编译型语言还是解释型语言，这将决定它是注重效率还是注重通用性，Java的编译运行原理较为特殊。</p><ol><li>从语言发展史上来说，Java无疑是高级编程语言，使用单词和数学符号来完成编码，入门门槛很低；</li><li>从编译方式上来说，Java属于半编译型语言。为了解决解释型运行语言运行速度慢和编译型语言无法跨平台的问题，Java采用先编译后解释的方式。先编译表示将Java编译成为类二进制的字节码文件，此文件可在任意系统的Java环境中运行，类二进制的字节码文件可以保证运行效率，并且各个操作系统都可以安装Java环境运行同一套Java字节码文件，实现了跨平台的能力。</li><li>从数据类型方面来讲，Java属于强数据类型语言，每个Java的变量都必须先指定类型，也就是所需的内存空间，并且在运行中此变量的类型是不能改变的。</li></ol><h2 id="编译运行方式" tabindex="-1">编译运行方式 <a class="header-anchor" href="#编译运行方式" aria-label="Permalink to &quot;编译运行方式&quot;">​</a></h2><p>Java是一种特殊的高级语言，其既具有编译型语言的特征，又具有解释型语言的特征：因为Java语言要经过<strong>先编译、后解释</strong>才能被执行。</p><p>Java编写的程序需要先编译，但此编译不会生成特定平台的机器语言文件，而是生<strong>成一种和平台无关的字节码文件，也就是*.class文件</strong>，这种字节码文件不是可执行文件，这种文件无法在任何系统直接运行，它必须使用特定平台的解释器来解释执行。根据<strong>不同平台的Java解释器，将字节码文件解释成特定平台的机器文件</strong>：Java语言中负责解释字节码文件的是Java虚拟机，即JVM（Java Virtual Machine）。不同平台，各自实现了其JVM，JVM向编译器提供相同的编程接口，所以可解释编译器生成的字节码文件，将其解释成特定平台的机器语言文件。</p><p>编译型语言运行效率高是因为其生产的机器语言可以直接被计算机运行和理解，但无法很好的实现跨平台，Java的编译所生成的字节码文件能够尽快的被各个平台的解释器运行，并且可以轻易的实现跨平台的效果。<strong>实际在平台运行和使用的是字节码文件</strong>，而字节码文件是通过Java源文件生成得到的。</p><p><code>Java源代码 -&gt; 通过编译器编译java文件 -&gt; class字节码文件 -&gt; 通过解释器运行class文件 -&gt; 得到Java源代码所控制的结果</code></p><blockquote><p>Java源文件通过编译器编译成字节码文件，字节码文件通过解释器执行成指定平台的机器码从而运行程序。</p></blockquote><p>Java中负责解释字节码文件的核心组件是Java虚拟机JVM，其作用是<strong>屏蔽不同系统间的差异</strong>，让同一class文件在不同平台执行同样的效果。JVM在不同平台提供相同的接口，从而编译器只需要针对JVM接口进行编译，就可以获得统一的字节码文件，并且在不同平台的虚拟中，还针对平台做了字节码解释优化，提高执行效率。</p><p>JVM是一个抽象的操作系统，通过此系统将对实际计算机的硬件资源进行操作，Oracle公司针对虚拟机的最了统一标准：指令集、寄存器、类文件格式、栈、垃圾回收区、存储区。</p><h2 id="发展史" tabindex="-1">发展史 <a class="header-anchor" href="#发展史" aria-label="Permalink to &quot;发展史&quot;">​</a></h2><blockquote><p><a href="http://nighthacks.com/" target="_blank" rel="noreferrer">詹姆斯 高斯林</a> 曾是一位电气工程师，主要开发各种家用电器的控制系统。在书写代码时，同一套逻辑在不同的硬件系统上都要重复的梳理却用不同的代码，这使他苦不堪言。所以业余与各位同仁研究开展了对Java研发的工作，最终获得了极大的成功，成就了如今计算机界非常流行且通用的Java语言。</p><p>语言一出世，团队就着手为其命名注册，起初打算以高老师门外的橡树名命名，也就是Oak，但是巧的是这个名字已经被用作其他命名注册了，几人苦闷的在咖啡馆闲聊的时候定出了Java语言。Java的名字表示盛产咖啡豆的爪哇（印度尼西亚），图标则是一杯冒着热气的咖啡。</p></blockquote><p>1990年Sun公司为新一代智能家电筹备新的通用控制系统，因C++语言的复杂，以及垃圾回收、可移植、分布式和多线程问题，决定开发新的Oak语言。92年此语言基础设计已经完成，由FirstPerson团队主导，但因与市场需求不符导致濒临破产。随后1994年互联网和浏览器的出现让Oak语言顺应市场迎来了新的改造机会，随后Oak重新命名为Java。</p><p>1995年Java发布，采用开源的方式迎来了互联网用户的认可，Java开始在编程届逐渐普及。1996年Java发布第一个版本。</p><p>1997年Java1.1的发布引入了JIT编译器，用于即时编译一行代码。</p><blockquote><p>随后，Java主要用于网页Applet界面设计和移动设备开发，但Flash的ActionScript出现逐渐将Java的网页应用份额蚕食。至此，Java仍没有找到技术定位，此前一直应用的Applet也被Flash更快更便捷的ActionScript所取代。</p></blockquote><p>1998年，Java最重要的1.2版本发布，涵盖了JSP/Servlet、EJB规范，并且将Java分为J2EE、J2SE、J2ME版本。</p><ul><li>J2ME：较少资源或嵌入式控制器开发；</li><li>J2SE：Java技术核心API，是ME和EE的基础内容；</li><li>J2EE：最广泛的部分，涵盖企业级应用开发完整解决方案；</li></ul><p>至此，Java基本的更新已经完成，未来的版本更新都在细节上不断完善，Java的核心结构也沿用至今。</p><p>但在2009年，Oracle公司收购了Sun公司，其对Java后续更新进行控制，此时Java发展到了1.6版本。</p><h3 id="不同的版本" tabindex="-1">不同的版本 <a class="header-anchor" href="#不同的版本" aria-label="Permalink to &quot;不同的版本&quot;">​</a></h3><p><strong>标准版</strong>：Java SE（Java Standard Edition，Java 标准版）是Java技术的核心和基础，是Java ME和Java EE编程的基础。标准版的Java平台为用户提供一个程序开发环境，这个程序开发环境提供了开发与运行Java软件的编译器等开发工具、软件库及Java虚拟机。用于开发和部署桌面、服务器以及嵌入设备和实时环境中的Java应用程序。</p><p><strong>企业版</strong>：Java EE是用来简化企业解决方案的开发、部署和管理相关的复杂问题的体系结构。J2EE技术的基础就是核心Java的标准版，Java EE不仅巩固了标准版中的许多优点，例如“编写一次、随处运行”的特性、方便存取数据库的JDBC API、CORBA技术以及能够在Internet应用中保护数据的安全模式等等，同时还提供了对 EJB（Enterprise JavaBeans）、Java Servlets API、JSP（Java Server Pages）以及XML技术的全面支持。其最终目的就是成为一个能够使企业开发者大幅缩短投放市场时间的体系结构。 Java EE体系结构提供中间层集成框架用来满足无需太多费用而又需要高可用性、高可靠性以及可扩展性的应用的需求。通过提供统一的开发平台，J2EE降低了开发多层应用的费用和复杂性，同时提供对现有应用程序集成强有力支持，完全支持EJB，有良好的向导支持打包和部署应用，添加目录支持，增强了安全机制，提高了性能。</p><p><strong>Micro版</strong>：Java ME是Java微版的简称（Java Platform,Micro Edition），是一个技术和规范的集合，它为移动设备（包括消费类产品、嵌入式设备、高级移动设备等）提供了基于Java环境的开发与应用平台。Java ME分为两类配置，一类是面向小型移动设备的CLDC（Connected Limited Device Profile），一类是面向功能更强大的移动设备如智能手机和机顶盒，称为CDC（Connected Device Profile CDC）。</p><h2 id="java的特点" tabindex="-1">Java的特点 <a class="header-anchor" href="#java的特点" aria-label="Permalink to &quot;Java的特点&quot;">​</a></h2><ol><li><strong>简单性</strong>：Java看起来设计得很像C++，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。</li><li><strong>面向对象</strong>：Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法（method），而不是严格地用过程来思考。在一个面向对象的系统中，类（class）是数据和操作数据的方法的集合。数据和方法一起描述对象（object）的状态和行为，每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java还包括一个类的扩展集合，分别组成各种程序包（Package），用户可以在自己的程序中使用。</li><li><strong>分布性</strong>：Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流（stream）网络连接，所以用户可以产生分布式的客户机和服务器，这样网络就变成软件应用的分布运载工具。</li><li><strong>编译和解释性</strong>：Java编译程序生成字节码（byte-code），而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统（run-time system）的系统上运行。在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、轻量级的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。</li><li><strong>稳健性</strong>：Java消除了某些编程错误，使得用它写可靠软件相当容易。Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。可靠性方面最重要的增强之一是Java的存储模型：Java不支持指针，它消除重写存储和讹误数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。 异常处理是Java中使得程序更稳健的另一个特征：异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。</li><li><strong>安全性</strong>：Java的存储分配模型是它防御恶意代码的主要方法之一：Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向存储器。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看声明去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制，这个安全机制部分包括类如何从网上装载，例如装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。</li><li><strong>可移植性</strong>：Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为（这些数据类型由Java语法描述）。Java环境本身对新的硬件平台和操作系统是可移植的。</li><li><strong>高性能</strong>：Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定CPU（中央处理器）的机器代码，也就是实现全编译了。Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。</li><li><strong>多线程性</strong>：Java是多线程语言，它提供支持多线程的执行（也称为轻便过程），能处理不同任务，使具有线程的程序设计很容易。Java的lang包提供一个Thread类，它支持开始线程、运行线程、停止线程和检查线程状态的方法。</li><li><strong>动态性</strong>：Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。</li><li><strong>跨平台</strong>：Java由于先编译后解释的运行方式，使得其class文件可以在不同的操作系统中执行，这是很多编译型语言所做不到的。所谓平台也就是操作系统，大部分运行速度较快的语言在不同的操作系统中都要重新编译或者重新编写才可以运行。</li></ol><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><ol><li>安卓应用：许多的 Android应用都是Java程序员开发者开发。虽然 Android运用了不同的JVM以及不同的封装方式，但是代码还是用Java语言所编写。相当一部分的手机中都支持JAVA游戏，这就使很多非编程人员都认识了JAVA。</li><li>在金融业应用的服务器程序：Java在金融服务业的应用非常广泛，很多第三方交易系统、银行、金融机构都选择用Java开发，因为相对而言，Java较安全。大型跨国投资银行用Java来编写前台和后台的电子交易系统，结算和确认系统，数据处理项目以及其他项目。</li><li>网站：Java 在电子商务领域以及网站开发领域占据了一定的席位。开发人员可以运用许多不同的框架来创建web项目。即使是简单的 servlet，jsp和以struts为基础的网站在政府项目中也经常被用到。</li><li>嵌入式领域：Java在嵌入式领域发展空间很大。在这个平台上，只需130KB就能够使用Java技术（在智能卡或者传感器上）。</li><li>大数据技术：Hadoop以及其他大数据处理技术很多都是用Java，例如Apache的基于Java的HBase和Accumulo以及 ElasticSearchas。</li><li>高频交易的空间：Java平台提高了这个平台的特性和及时编译，他同时也能够像 C++ 一样传递数据。正是由于这个原因，Java成为的程序员编写交易平台的语言，因为虽然性能不比C++，但开发人员可以避开安全性，可移植性和可维护性等问题。</li><li>科学应用：Java在科学应用中是很好选择，包括自然语言处理。最主要的原因是因为Java比C++或者其他语言相对其安全性、便携性、可维护性以及其他高级语言的并发性更好。</li></ol>',34),e=[r];function l(i,s,n,c,p,d){return t(),J("div",null,e)}const u=a(o,[["render",l]]);export{h as __pageData,u as default};
