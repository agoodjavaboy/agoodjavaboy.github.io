import{_ as a,c as s,o as i,a5 as t}from"./chunks/framework.B33oykO0.js";const E=JSON.parse('{"title":"入门程序","description":"","frontmatter":{},"headers":[],"relativePath":"docs/code/java/primary/5-✍️入门程序.md","filePath":"docs/code/java/primary/5-✍️入门程序.md","lastUpdated":null}'),e={name:"docs/code/java/primary/5-✍️入门程序.md"},l=t(`<h1 id="入门程序" tabindex="-1">入门程序 <a class="header-anchor" href="#入门程序" aria-label="Permalink to &quot;入门程序&quot;">​</a></h1><blockquote><p>Hello World 中文意思是『你好，世界』。因为 《The C Programming Language》 中使用它做为第一个演示程序，所以后来的程序员在学习编程或进行设备调试时延续了这一习惯。</p><p>还有一种说法是，在比C语言还要久远的B语言在贝尔实验室出生的时候，工程师们就做了这样一件事，通过程序的方式向这个世界打招呼，也表示我们已经进入了通过代码与世界沟通的大门。这句输出语句也被记录在了贝尔实验室的工作测试日志中。</p></blockquote><h2 id="书写与运行第一个程序" tabindex="-1">书写与运行第一个程序 <a class="header-anchor" href="#书写与运行第一个程序" aria-label="Permalink to &quot;书写与运行第一个程序&quot;">​</a></h2><ol><li><p>使用文本编辑工具创建文件，命名为<code>Index.java</code>，文件名将在未来自拟，但扩展名必须要写成<code>java</code>。文件内编辑如下内容：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloworld!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Java的程序严格控制大小写，并且空格也将作为程序的一部分，空格可以多，但不能缺少。</p></blockquote><p>上文的代码就是Java的源代码，存储Java源代码的文件就叫源文件。</p></li><li><p>接下来进行程序的编译，真正要运行Java程序需要进行以下的步骤：</p><p><code>Java源代码 -&gt; 通过编译器编译java文件 -&gt; class字节码文件 -&gt; 通过解释器运行class文件 -&gt; 得到Java源代码所控制的结果</code></p><p>所以第一步就是要将Java源代码通过编译器转换成字节码文件，如果正确的配置了Java的Path变量并且测试了<code>javac</code>在控制台中的运行结果，那么就可以在源文件所在的文件夹打开控制台，输入以下的内容：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">javac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Index.java</span></span></code></pre></div></li></ol>`,4),n=[l];function p(h,k,d,o,c,r){return i(),s("div",null,n)}const _=a(e,[["render",p]]);export{E as __pageData,_ as default};
